{
  "name": "geth",
  "description": "the go-ethereum command line interface",
  "usage": "geth [options] command [command options] [arguments...]",
  "subcommands": [
    {
      "name": "account",
      "description": "Manage accounts",
      "usage": "geth account [command options] [arguments...]"
    },
    {
      "name": "attach",
      "description": "Start an interactive JavaScript environment (connect to node)",
      "usage": "geth attach [command options] [arguments...]"
    },
    {
      "name": "console",
      "description": "Start an interactive JavaScript environment",
      "usage": "geth console [command options] [arguments...]"
    },
    {
      "name": "copydb",
      "description": "Create a local chain from a target chaindata folder",
      "usage": "geth copydb [command options] [arguments...]"
    },
    {
      "name": "dump",
      "description": "Dump a specific block from storage",
      "usage": "geth dump [command options] [arguments...]"
    },
    {
      "name": "dumpconfig",
      "description": "Show configuration values",
      "usage": "geth dumpconfig [command options] [arguments...]"
    },
    {
      "name": "export",
      "description": "Export blockchain into file",
      "usage": "geth export [command options] [arguments...]"
    },
    {
      "name": "export-preimages",
      "description": "Export the preimage database into an RLP stream",
      "usage": "geth export-preimages [command options] [arguments...]"
    },
    {
      "name": "import",
      "description": "Import a blockchain file",
      "usage": "geth import [command options] [arguments...]"
    },
    {
      "name": "import-preimages",
      "description": "Import the preimage database from an RLP stream",
      "usage": "geth import-preimages [command options] [arguments...]"
    },
    {
      "name": "init",
      "description": "Bootstrap and initialize a new genesis block",
      "usage": "geth init [command options] [arguments...]"
    },
    {
      "name": "inspect",
      "description": "Inspect the storage size for each type of data in the database",
      "usage": "geth inspect [command options] [arguments...]"
    },
    {
      "name": "js",
      "description": "Execute the specified JavaScript files",
      "usage": "geth js [command options] [arguments...]"
    },
    {
      "name": "license",
      "description": "Display license information",
      "usage": "geth license [command options] [arguments...]"
    },
    {
      "name": "makecache",
      "description": "Generate ethash verification cache (for testing)",
      "usage": "geth makecache [command options] [arguments...]"
    },
    {
      "name": "makedag",
      "description": "Generate ethash mining DAG (for testing)",
      "usage": "geth makedag [command options] [arguments...]"
    },
    {
      "name": "removedb",
      "description": "Remove blockchain and state databases",
      "usage": "geth removedb [command options] [arguments...]"
    },
    {
      "name": "retesteth",
      "description": "Launches geth in retesteth mode",
      "usage": "geth retesteth [command options] [arguments...]"
    },
    {
      "name": "version",
      "description": "Print version numbers",
      "usage": "geth version [command options] [arguments...]"
    },
    {
      "name": "wallet",
      "description": "Manage Ethereum presale wallets",
      "usage": "geth wallet [command options] [arguments...]"
    },
    {
      "name": "help",
      "description": "Shows a list of commands or help for one command",
      "usage": "geth help [command options] [arguments...]"
    }
  ],
  "options": [
    {
      "option": "--config",
      "description": "TOML configuration file"
    },
    {
      "option": "--datadir",
      "description": "Data directory for the databases and keystore",
      "default": "/home/ahmad/snap/geth/477/.ethereum"
    },
    {
      "option": "--datadir.ancient",
      "description": "Data directory for ancient chain segments",
      "default": "inside chaindata"
    },
    {
      "option": "--keystore",
      "description": "Directory for the keystore",
      "default": "inside the datadir"
    },
    {
      "option": "--nousb",
      "description": "Disables monitoring for and managing USB hardware wallets"
    },
    {
      "option": "--pcscdpath",
      "description": "Path to the smartcard daemon (pcscd) socket file",
      "default": "/run/pcscd/pcscd.comm"
    },
    {
      "option": "--networkid",
      "description": "Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten, 4=Rinkeby)",
      "default": "1"
    },
    {
      "option": "--testnet",
      "description": "Ropsten network: pre-configured proof-of-work test network"
    },
    {
      "option": "--rinkeby",
      "description": "Rinkeby network: pre-configured proof-of-authority test network"
    },
    {
      "option": "--goerli",
      "description": "GÃ¶rli network: pre-configured proof-of-authority test network"
    },
    {
      "option": "--syncmode",
      "description": "Blockchain sync mode (\"fast\", \"full\", or \"light\")",
      "default": "fast"
    },
    {
      "option": "--exitwhensynced",
      "description": "Exits after block synchronisation completes"
    },
    {
      "option": "--gcmode",
      "description": "Blockchain garbage collection mode (\"full\", \"archive\")",
      "default": "full"
    },
    {
      "option": "--ethstats",
      "description": "Reporting URL of a ethstats service (nodename:secret@host:port)"
    },
    {
      "option": "--identity",
      "description": "Custom node name"
    },
    {
      "option": "--lightkdf",
      "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength"
    },
    {
      "option": "--whitelist",
      "description": "Comma separated block number-to-hash mappings to enforce (<number>=<hash>)"
    },
    {
      "option": "--light.serve",
      "description": "Maximum percentage of time allowed for serving LES requests (multi-threaded processing allows values over 100)",
      "default": "0"
    },
    {
      "option": "--light.ingress",
      "description": "Incoming bandwidth limit for serving light clients (kilobytes/sec, 0 = unlimited)",
      "default": "0"
    },
    {
      "option": "--light.egress",
      "description": "Outgoing bandwidth limit for serving light clients (kilobytes/sec, 0 = unlimited)",
      "default": "0"
    },
    {
      "option": "--light.maxpeers",
      "description": "Maximum number of light clients to serve, or light servers to attach to",
      "default": "100"
    },
    {
      "option": "--ulc.servers",
      "description": "List of trusted ultra-light servers"
    },
    {
      "option": "--ulc.fraction",
      "description": "Minimum % of trusted ultra-light servers required to announce a new head",
      "default": "75"
    },
    {
      "option": "--ulc.onlyannounce",
      "description": "Ultra light server sends announcements only"
    },
    {
      "option": "--dev",
      "description": "Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled"
    },
    {
      "option": "--dev.period",
      "description": "Block period to use in developer mode (0 = mine only if transaction pending)",
      "default": "0"
    },
    {
      "option": "--ethash.cachedir",
      "description": "Directory to store the ethash verification caches",
      "default": "inside the datadir"
    },
    {
      "option": "--ethash.cachesinmem",
      "description": "Number of recent ethash caches to keep in memory (16MB each)",
      "default": "2"
    },
    {
      "option": "--ethash.cachesondisk",
      "description": "Number of recent ethash caches to keep on disk (16MB each)",
      "default": "3"
    },
    {
      "option": "--ethash.dagdir",
      "description": "Directory to store the ethash mining DAGs",
      "default": "/home/ahmad/snap/geth/477/.ethash"
    },
    {
      "option": "--ethash.dagsinmem",
      "description": "Number of recent ethash mining DAGs to keep in

 memory (1+GB each)",
      "default": "1"
    },
    {
      "option": "--ethash.dagsondisk",
      "description": "Number of recent ethash mining DAGs to keep on disk (1+GB each)",
      "default": "2"
    },
    {
      "option": "--txpool.locals",
      "description": "Comma separated accounts to treat as locals (no flush, priority inclusion)"
    },
    {
      "option": "--txpool.nolocals",
      "description": "Disables price exemptions for locally submitted transactions"
    },
    {
      "option": "--txpool.journal",
      "description": "Disk journal for local transaction to survive node restarts",
      "default": "transactions.rlp"
    },
    {
      "option": "--txpool.rejournal",
      "description": "Time interval to regenerate the local transaction journal",
      "default": "1h0m0s"
    },
    {
      "option": "--txpool.pricelimit",
      "description": "Minimum gas price limit to enforce for acceptance into the pool",
      "default": "1"
    },
    {
      "option": "--txpool.pricebump",
      "description": "Price bump percentage to replace an already existing transaction",
      "default": "10"
    },
    {
      "option": "--txpool.accountslots",
      "description": "Minimum number of executable transaction slots guaranteed per account",
      "default": "16"
    },
    {
      "option": "--txpool.globalslots",
      "description": "Maximum number of executable transaction slots for all accounts",
      "default": "4096"
    },
    {
      "option": "--txpool.accountqueue",
      "description": "Maximum number of non-executable transaction slots permitted per account",
      "default": "64"
    },
    {
      "option": "--txpool.globalqueue",
      "description": "Maximum number of non-executable transaction slots for all accounts",
      "default": "1024"
    },
    {
      "option": "--txpool.lifetime",
      "description": "Maximum amount of time non-executable transaction are queued",
      "default": "3h0m0s"
    },
    {
      "option": "--cache",
      "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
      "default": "1024"
    },
    {
      "option": "--cache.database",
      "description": "Percentage of cache memory allowance to use for database io",
      "default": "50"
    },
    {
      "option": "--cache.trie",
      "description": "Percentage of cache memory allowance to use for trie caching (default = 25% full mode, 50% archive mode)",
      "default": "25"
    },
    {
      "option": "--cache.gc",
      "description": "Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode)",
      "default": "25"
    },
    {
      "option": "--cache.noprefetch",
      "description": "Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data)"
    },
    {
      "option": "--unlock",
      "description": "Comma separated list of accounts to unlock"
    },
    {
      "option": "--password",
      "description": "Password file to use for non-interactive password input"
    },
    {
      "option": "--signer",
      "description": "External signer (url or path to ipc file)"
    },
    {
      "option": "--allow-insecure-unlock",
      "description": "Allow insecure account unlocking when account-related RPCs are exposed by http"
    },
    {
      "option": "--ipcdisable",
      "description": "Disable the IPC-RPC server"
    },
    {
      "option": "--ipcpath",
      "description": "Filename for IPC socket/pipe within the datadir (explicit paths escape it)"
    },
    {
      "option": "--rpc",
      "description": "Enable the HTTP-RPC server"
    },
    {
      "option": "--rpcaddr",
      "description": "HTTP-RPC server listening interface",
      "default": "localhost"
    },
    {
      "option": "--rpcport",
      "description": "HTTP-RPC server listening port",
      "default": "8545"
    },
    {
      "option": "--rpcapi",
      "description": "API's offered over the HTTP-RPC interface"
    },
    {
      "option": "--rpc.gascap",
      "description": "Sets a cap on gas that can be used in eth_call/estimateGas",
      "default": "0"
    },
    {
      "option": "--rpccorsdomain",
      "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)"
    },
    {
      "option": "--rpcvhosts",
      "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
      "default": "localhost"
    },
    {
      "option": "--ws",
      "description": "Enable the WS-RPC server"
    },
    {
      "option": "--wsaddr",
      "description": "WS-RPC server listening interface",
      "default": "localhost"
    },
    {
      "option": "--wsport",
      "description": "WS-RPC server listening port",
      "default": "8546"
    },
    {
      "option": "--wsapi",
      "description": "API's offered over the WS-RPC interface"
    },
    {
      "option": "--wsorigins",
      "description": "Origins from which to accept websockets requests"
    },
    {
      "option": "--graphql",
      "description": "Enable the GraphQL server"
    },
    {
      "option": "--graphql.addr",
      "description": "GraphQL server listening interface",
      "default": "localhost"
    },
    {
      "option": "--graphql.port",
      "description": "GraphQL server listening port",
      "default": "8547"
    },
    {
      "option": "--graphql.corsdomain",
      "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)"
    },
    {
      "option": "--graphql.vhosts",
      "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
      "default": "localhost"
    },
    {
      "option": "--jspath",
      "description": "JavaScript root path for loadScript",
      "default": "."
    },
    {
      "option": "--exec",
      "description": "Execute JavaScript statement"
    },
    {
      "option": "--preload",
      "description": "Comma separated list of JavaScript files to preload into the console"
    },
    {
      "option": "--bootnodes",
      "description": "Comma separated enode URLs for P2P discovery bootstrap (set v4+v5 instead for light servers)"
    },
    {
      "option": "--bootnodesv4",
      "description": "Comma separated enode URLs for P2P v4 discovery bootstrap (light server, full nodes)"
    },
    {
      "option": "--bootnodesv5",
      "description": "Comma separated enode URLs for P2P v5 discovery bootstrap (light server, light nodes)"
    },
    {
      "option": "--port",
      "description": "Network listening port",
      "default": "30303"
    },
    {
      "option": "--maxpeers",
      "description": "Maximum number of network peers (network disabled if set to 0)",
      "default": "50"
    },
    {
      "option": "--maxpendpeers",
      "description": "Maximum number of pending connection attempts (defaults used if set to 0)",
      "default": "0"
    },
    {
      "option": "--nat",
      "description": "NAT port mapping mechanism (any|none|upnp|pmp|extip:<IP>)",
      "default": "any"
    },
    {
      "option": "--nodiscover",
      "description": "Disables the peer discovery mechanism (manual peer addition)"
    },
    {
      "option": "--v5disc",
      "description": "Enables the experimental RLPx V5 (Topic Discovery) mechanism"
    },
    {
      "option": "--netrestrict",
      "description": "Restricts network communication to the given IP networks (CIDR masks)"
    },
    {
      "option": "--nodekey",
      "description": "P2P node key file"
    },
    {
      "option": "--nodekeyhex",
      "description": "P2P node key as hex (for testing)"
    },
    {
      "option": "--mine",
      "description": "Enable mining"
    },
    {
      "option": "--miner.threads",
      "description": "Number of CPU threads to use for mining",
      "default": "0"
    },
    {
      "option": "--miner.notify",
      "description": "Comma separated HTTP URL list to notify of new work packages"
    },
    {
      "option": "--miner.gasprice",
      "description": "Minimum gas price for mining a transaction",
      "default": "1000000000"
    },
    {
      "option": "--miner.gastarget",
      "description": "Target gas floor for mined blocks",
     

 "default": "8000000"
    },
    {
      "option": "--miner.gaslimit",
      "description": "Target gas ceiling for mined blocks",
      "default": "8000000"
    },
    {
      "option": "--miner.etherbase",
      "description": "Public address for block mining rewards (default = first account)",
      "default": "0"
    },
    {
      "option": "--miner.extradata",
      "description": "Block extra data set by the miner (default = client version)"
    },
    {
      "option": "--miner.recommit",
      "description": "Time interval to recreate the block being mined",
      "default": "3s"
    },
    {
      "option": "--miner.noverify",
      "description": "Disable remote sealing verification"
    },
    {
      "option": "--gpoblocks",
      "description": "Number of recent blocks to check for gas prices",
      "default": "20"
    },
    {
      "option": "--gpopercentile",
      "description": "Suggested gas price is the given percentile of a set of recent transaction gas prices",
      "default": "60"
    },
    {
      "option": "--vmdebug",
      "description": "Record information useful for VM and contract debugging"
    },
    {
      "option": "--vm.evm",
      "description": "External EVM configuration (default = built-in interpreter)"
    },
    {
      "option": "--vm.ewasm",
      "description": "External ewasm configuration (default = built-in interpreter)"
    },
    {
      "option": "--fakepow",
      "description": "Disables proof-of-work verification"
    },
    {
      "option": "--nocompaction",
      "description": "Disables db compaction after import"
    },
    {
      "option": "--verbosity",
      "description": "Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail",
      "default": "3"
    },
    {
      "option": "--vmodule",
      "description": "Per-module verbosity: comma-separated list of <pattern>=<level> (e.g. eth/*=5,p2p=4)"
    },
    {
      "option": "--backtrace",
      "description": "Request a stack trace at a specific logging statement (e.g. \"block.go:271\")"
    },
    {
      "option": "--debug",
      "description": "Prepends log messages with call-site location (file and line number)"
    },
    {
      "option": "--pprof",
      "description": "Enable the pprof HTTP server"
    },
    {
      "option": "--pprofaddr",
      "description": "pprof HTTP server listening interface",
      "default": "127.0.0.1"
    },
    {
      "option": "--pprofport",
      "description": "pprof HTTP server listening port",
      "default": "6060"
    },
    {
      "option": "--memprofilerate",
      "description": "Turn on memory profiling with the given rate",
      "default": "524288"
    },
    {
      "option": "--blockprofilerate",
      "description": "Turn on block profiling with the given rate",
      "default": "0"
    },
    {
      "option": "--cpuprofile",
      "description": "Write CPU profile to the given file"
    },
    {
      "option": "--trace",
      "description": "Write execution trace to the given file"
    },
    {
      "option": "--metrics",
      "description": "Enable metrics collection and reporting"
    },
    {
      "option": "--metrics.expensive",
      "description": "Enable expensive metrics collection and reporting"
    },
    {
      "option": "--metrics.influxdb",
      "description": "Enable metrics export/push to an external InfluxDB database"
    },
    {
      "option": "--metrics.influxdb.endpoint",
      "description": "InfluxDB API endpoint to report metrics to",
      "default": "http://localhost:8086"
    },
    {
      "option": "--metrics.influxdb.database",
      "description": "InfluxDB database name to push reported metrics to",
      "default": "geth"
    },
    {
      "option": "--metrics.influxdb.username",
      "description": "Username to authorize access to the database",
      "default": "test"
    },
    {
      "option": "--metrics.influxdb.password",
      "description": "Password to authorize access to the database",
      "default": "test"
    },
    {
      "option": "--metrics.influxdb.tags",
      "description": "Comma-separated InfluxDB tags (key/values) attached to all measurements",
      "default": "host=localhost"
    },
    {
      "option": "--shh",
      "description": "Enable Whisper"
    },
    {
      "option": "--shh.maxmessagesize",
      "description": "Max message size accepted",
      "default": "1048576"
    },
    {
      "option": "--shh.pow",
      "description": "Minimum POW accepted",
      "default": "0.2"
    },
    {
      "option": "--shh.restrict-light",
      "description": "Restrict connection between two whisper light clients"
    },
    {
      "option": "--lightserv",
      "description": "Maximum percentage of time allowed for serving LES requests (deprecated, use --light.serve)",
      "default": "0"
    },
    {
      "option": "--lightpeers",
      "description": "Maximum number of light clients to serve, or light servers to attach to (deprecated, use --light.maxpeers)",
      "default": "100"
    },
    {
      "option": "--minerthreads",
      "description": "Number of CPU threads to use for mining (deprecated, use --miner.threads)",
      "default": "0"
    },
    {
      "option": "--targetgaslimit",
      "description": "Target gas floor for mined blocks (deprecated, use --miner.gastarget)",
      "default": "8000000"
    },
    {
      "option": "--gasprice",
      "description": "Minimum gas price for mining a transaction (deprecated, use --miner.gasprice)",
      "default": "1000000000"
    },
    {
      "option": "--etherbase",
      "description": "Public address for block mining rewards (default = first account, deprecated, use --miner.etherbase)",
      "default": "0"
    },
    {
      "option": "--extradata",
      "description": "Block extra data set by the miner (default = client version, deprecated, use --miner.extradata)"
    },
    {
      "option": "--override.istanbul",
      "description": "Manually specify Istanbul fork-block, overriding the bundled setting",
      "default": "0"
    },
    {
      "option": "--help",
      "shortcut": "-h",
      "description": "show help"
    }
  ]
}
