{
    "name": "anvil",
    "description": "A fast local Ethereum development node",
    "usage": "anvil [OPTIONS] [COMMAND]",
    "subcommands": [
        {
            "name": "anvil completions",
            "description": "Generate shell completions script",
            "usage": "anvil completions [OPTIONS] <SHELL>",
            "subcommands": [],
            "options": [
                {
                    "option": "--color",
                    "description": "The color of the log messages",
                    "value": "<COLOR>",
                    "tags": [
                        "possible values: auto, always, never"
                    ]
                },
                {
                    "option": "--help",
                    "shortcut": "-h",
                    "description": "Print help (see a summary with '-h')"
                },
                {
                    "option": "--jobs",
                    "shortcut": "-j",
                    "description": "Number of threads to use. Specifying 0 defaults to the number of logical cores",
                    "value": "<THREADS>",
                    "tags": [
                        "aliases: --jobs"
                    ]
                },
                {
                    "option": "--json",
                    "description": "Format log messages as JSON"
                },
                {
                    "option": "--quiet",
                    "shortcut": "-q",
                    "description": "Do not print log messages"
                },
                {
                    "option": "--threads",
                    "shortcut": "-j",
                    "description": "Number of threads to use. Specifying 0 defaults to the number of logical cores",
                    "value": "<THREADS>",
                    "tags": [
                        "aliases: --jobs"
                    ]
                },
                {
                    "option": "--verbosity",
                    "shortcut": "-v",
                    "description": "Verbosity level of the log messages. Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv). Depending on the context the verbosity levels have different meanings. For example, the verbosity levels of the EVM are: - 2 (-vv): Print logs for all tests. - 3 (-vvv): Print execution traces for failing tests. - 4 (-vvvv): Print execution traces for all tests, and setup traces for failing tests. - 5 (-vvvvv): Print execution and setup traces for all tests, including storage changes."
                }
            ]
        },
        {
            "name": "anvil generate-fig-spec",
            "description": "A CLI tool to generate Fig autocompletion spec",
            "usage": "anvil generate-fig-spec [OPTIONS]",
            "options": [
                {
                    "option": "--color",
                    "description": "The color of the log messages",
                    "value": "<COLOR>",
                    "default": "auto",
                    "tags": [
                        "auto",
                        "always",
                        "never"
                    ]
                },
                {
                    "option": "--help",
                    "shortcut": "-h",
                    "description": "Print help (see a summary with '-h')"
                },
                {
                    "option": "--jobs",
                    "shortcut": "-j",
                    "description": "Number of threads to use. Specifying 0 defaults to the number of logical cores",
                    "value": "<THREADS>"
                },
                {
                    "option": "--json",
                    "description": "Format log messages as JSON"
                },
                {
                    "option": "--quiet",
                    "shortcut": "-q",
                    "description": "Do not print log messages"
                },
                {
                    "option": "--threads",
                    "shortcut": "-j",
                    "description": "Number of threads to use. Specifying 0 defaults to the number of logical cores",
                    "value": "<THREADS>"
                },
                {
                    "option": "--verbosity",
                    "shortcut": "-v",
                    "description": "Verbosity level of the log messages. Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv). Depending on the context the verbosity levels have different meanings. For example, the verbosity levels of the EVM are: 2 (-vv): Print logs for all tests. 3 (-vvv): Print execution traces for failing tests. 4 (-vvvv): Print execution traces for all tests, and setup traces for failing tests. 5 (-vvvvv): Print execution and setup traces for all tests, including storage changes."
                }
            ],
            "subcommands": []
        }
    ],
    "options": [
        {
            "option": "--accounts",
            "shortcut": "-a",
            "description": "Number of dev accounts to generate and configure",
            "value": "<NUM>",
            "default": "10"
        },
        {
            "option": "--allow-origin",
            "description": "The cors `allow_origin` header",
            "value": "<ALLOW_ORIGIN>",
            "default": "*"
        },
        {
            "option": "--auto-impersonate",
            "description": "Enables automatic impersonation on startup. This allows any transaction sender to be simulated as different accounts, which is useful for testing contract behavior",
            "tags": [
                "--auto-unlock"
            ]
        },
        {
            "option": "--balance",
            "description": "The balance of every dev account in Ether",
            "value": "<NUM>",
            "default": "10000"
        },
        {
            "option": "--block-base-fee-per-gas",
            "description": "The base fee in a block",
            "value": "<FEE>",
            "tags": [
                "--base-fee"
            ]
        },
        {
            "option": "--block-time",
            "shortcut": "-b",
            "description": "Block time in seconds for interval mining",
            "value": "<SECONDS>",
            "tags": [
                "--blockTime"
            ]
        },
        {
            "option": "--cache-path",
            "description": "Path to the cache directory where states are stored",
            "value": "<PATH>"
        },
        {
            "option": "--chain-id",
            "description": "The chain ID",
            "value": "<CHAIN_ID>"
        },
        {
            "option": "--code-size-limit",
            "description": "EIP-170: Contract code size limit in bytes. Useful to increase this because of tests. To disable entirely, use `--disable-code-size-limit`. By default, it is 0x6000 (~25kb)",
            "value": "<CODE_SIZE>"
        },
        {
            "option": "--color",
            "description": "The color of the log messages",
            "value": "<COLOR>"
        },
        {
            "option": "--compute-units-per-second",
            "description": "Sets the number of assumed available compute units per second for this provider",
            "value": "<CUPS>",
            "default": "330"
        },
        {
            "option": "--config-out",
            "description": "Writes output of `anvil` as json to user-specified file",
            "value": "<FILE>"
        },
        {
            "option": "--derivation-path",
            "description": "Sets the derivation path of the child key to be derived.",
            "value": "<DERIVATION_PATH>",
            "default": "m/44'/60'/0'/0/"
        },
        {
            "option": "--disable-block-gas-limit",
            "description": "Disable the `call.gas_limit <= block.gas_limit` constraint"
        },
        {
            "option": "--disable-code-size-limit",
            "description": "Disable EIP-170: Contract code size limit"
        },
        {
            "option": "--disable-console-log",
            "description": "Disable printing of `console.log` invocations to stdout",
            "tags": [
                "--no-console-log"
            ]
        },
        {
            "option": "--disable-default-create2-deployer",
            "description": "Disable the default create2 deployer",
            "tags": [
                "--no-create2"
            ]
        },
        {
            "option": "--disable-min-priority-fee",
            "description": "Disable the enforcement of a minimum suggested priority fee",
            "tags": [
                "--no-priority-fee"
            ]
        },
        {
            "option": "--dump-state",
            "description": "Dump the state and block environment of chain on exit to the given file. If the value is a directory, the state will be written to `<VALUE>/state.json`.",
            "value": "<PATH>"
        },
        {
            "option": "--fork-block-number",
            "description": "Fetch state from a specific block number over a remote endpoint. If negative, the given value is subtracted from the `latest` block number. See --fork-url.",
            "value": "<BLOCK>"
        },
        {
            "option": "--fork-chain-id",
            "description": "Specify chain id to skip fetching it from remote endpoint. This enables offline-start mode. You still must pass both `--fork-url` and `--fork-block-number`, and already have your required state cached on disk, anything missing locally would be fetched from the remote.",
            "value": "<CHAIN>"
        },
        {
            "option": "--fork-header",
            "description": "Headers to use for the rpc client, e.g. \"User-Agent: test-agent\". See --fork-url.",
            "value": "<HEADERS>"
        },
        {
            "option": "--fork-retry-backoff",
            "description": "Initial retry backoff on encountering errors. See --fork-url.",
            "value": "<BACKOFF>"
        },
        {
            "option": "--fork-transaction-hash",
            "description": "Fetch state from a specific transaction hash over a remote endpoint. See --fork-url.",
            "value": "<TRANSACTION>"
        },
        {
            "option": "--fork-url",
            "shortcut": "-f",
            "description": "Fetch state over a remote endpoint instead of starting from an empty state. If you want to fetch state from a specific block number, add a block number like `http://localhost:8545@1400000` or use the `--fork-block-number` argument.",
            "value": "<URL>",
            "tags": [
                "--rpc-url"
            ]
        },
        {
            "option": "--gas-limit",
            "description": "The block gas limit",
            "value": "<GAS_LIMIT>"
        },
        {
            "option": "--gas-price",
            "description": "The gas price",
            "value": "<GAS_PRICE>"
        },
        {
            "option": "--hardfork",
            "description": "The EVM hardfork to use. Choose the hardfork by name, e.g. `prague`, `cancun`, `shanghai`, `paris`, `london`, etc...",
            "value": "<HARDFORK>",
            "default": "latest"
        },
        {
            "option": "--host",
            "description": "The hosts the server will listen on",
            "value": "<IP_ADDR>",
            "default": "127.0.0.1"
        },
        {
            "option": "--init",
            "description": "Initialize the genesis block with the given `genesis.json` file",
            "value": "<PATH>"
        },
        {
            "option": "--ipc",
            "description": "Launch an ipc server at the given path or default path = `/tmp/anvil.ipc`",
            "value": "[<PATH>]",
            "tags": [
                "--ipcpath"
            ]
        },
        {
            "option": "--json",
            "description": "Format log messages as JSON"
        },
        {
            "option": "--load-state",
            "description": "Initialize the chain from a previously saved state snapshot",
            "value": "<PATH>"
        },
        {
            "option": "--max-persisted-states",
            "description": "Max number of states to persist on disk. Note that `prune_history` will overwrite `max_persisted_states` to 0.",
            "value": "<MAX_PERSISTED_STATES>"
        },
        {
            "option": "--memory-limit",
            "description": "The memory limit per EVM execution in bytes",
            "value": "<MEMORY_LIMIT>"
        },
        {
            "option": "--mixed-mining",
            "tags": [
                "--mixed-mining"
            ]
        },
        {
            "option": "--mnemonic",
            "shortcut": "-m",
            "description": "BIP39 mnemonic phrase used for generating accounts. Cannot be used if `mnemonic_random` or `mnemonic_seed` are used",
            "value": "<MNEMONIC>"
        },
        {
            "option": "--mnemonic-random",
            "description": "Automatically generates a BIP39 mnemonic phrase, and derives accounts from it. Cannot be used with other `mnemonic` options. You can specify the number of words you want in the mnemonic.",
            "value": "[<MNEMONIC_RANDOM>]",
            "default": "12"
        },
        {
            "option": "--mnemonic-seed-unsafe",
            "description": "Generates a BIP39 mnemonic phrase from a given seed. Cannot be used with other `mnemonic` options. CAREFUL: This is NOT SAFE and should only be used for testing. Never use the private keys generated in production.",
            "value": "<MNEMONIC_SEED>"
        },
        {
            "option": "--no-cors",
            "description": "Disable CORS"
        },
        {
            "option": "--no-mining",
            "description": "Disable auto and interval mining, and mine on demand instead",
            "tags": [
                "--no-mine"
            ]
        },
        {
            "option": "--no-rate-limit",
            "description": "Disables rate limiting for this node's provider. See also --fork-url and <https://docs.alchemy.com/reference/compute-units#what-are-cups-compute-units-per-second>",
            "default": "false",
            "tags": [
                "--no-rpc-rate-limit"
            ]
        },
        {
            "option": "--no-request-size-limit",
            "description": "Disable the default request body size limit. At time of writing the default limit is 2MB"
        },
        {
            "option": "--no-storage-caching",
            "description": "Explicitly disables the use of RPC caching. All storage slots are read entirely from the endpoint. This flag overrides the project's configuration file. See --fork-url."
        },
        {
            "option": "--number",
            "description": "The number of the genesis block",
            "value": "<NUM>"
        },
        {
            "option": "--odyssey",
            "description": "Enable Odyssey features"
        },
        {
            "option": "--optimism",
            "description": "Run an Optimism chain",
            "tags": [
                "--optimism"
            ]
        },
        {
            "option": "--order",
            "description": "How transactions are sorted in the mempool",
            "value": "<ORDER>",
            "default": "fees"
        },
        {
            "option": "--port",
            "shortcut": "-p",
            "description": "Port number to listen on",
            "value": "<NUM>",
            "default": "8545"
        },
        {
            "option": "--preserve-historical-states",
            "description": "Preserve historical state snapshots when dumping the state. This will save the in-memory states of the chain at particular block hashes. These historical states will be loaded into the memory when `--load-state` / `--state`, and aids in RPC calls beyond the block at which state was dumped."
        },
        {
            "option": "--print-traces",
            "description": "Enable printing of traces for executed transactions and `eth_call` to stdout",
            "tags": [
                "--enable-trace-printing"
            ]
        },
        {
            "option": "--prune-history",
            "description": "Don't keep full chain history. If a number argument is specified, at most this number of states is kept in memory. If enabled, no state will be persisted on disk, so `max_persisted_states` will be 0.",
            "value": "[<PRUNE_HISTORY>]"
        },
        {
            "option": "--quiet",
            "shortcut": "-q",
            "description": "Do not print log messages"
        },
        {
            "option": "--retries",
            "description": "Number of retry requests for spurious networks (timed out requests)",
            "value": "<retries>",
            "default": "5"
        },
        {
            "option": "--slots-in-an-epoch",
            "description": "Slots in an epoch",
            "value": "<SLOTS_IN_AN_EPOCH>",
            "default": "32"
        },
        {
            "option": "--state",
            "description": "This is an alias for both --load-state and --dump-state. It initializes the chain with the state and block environment stored at the file, if it exists, and dumps the chain's state on exit.",
            "value": "<PATH>"
        },
        {
            "option": "--state-interval",
            "shortcut": "-s",
            "description": "Interval in seconds at which the state and block environment is to be dumped to disk. See --state and --dump-state",
            "value": "<SECONDS>"
        },
        {
            "option": "--steps-tracing",
            "description": "Enable steps tracing used for debug calls returning geth-style traces",
            "tags": [
                "--tracing"
            ]
        },
        {
            "option": "--timestamp",
            "description": "The timestamp of the genesis block",
            "value": "<NUM>"
        },
        {
            "option": "--timeout",
            "description": "Timeout in ms for requests sent to remote JSON-RPC server in forking mode.",
            "value": "<timeout>",
            "default": "45000"
        },
        {
            "option": "--threads",
            "shortcut": "-j",
            "description": "Number of threads to use. Specifying 0 defaults to the number of logical cores",
            "value": "<THREADS>",
            "tags": [
                "--jobs"
            ]
        },
        {
            "option": "--transaction-block-keeper",
            "description": "Number of blocks with transactions to keep in memory",
            "value": "<TRANSACTION_BLOCK_KEEPER>"
        },
        {
            "option": "--verbosity",
            "shortcut": "-v",
            "description": "Verbosity level of the log messages. Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv). Depending on the context the verbosity levels have different meanings. For example, the verbosity levels of the EVM are: - 2 (-vv): Print logs for all tests. - 3 (-vvv): Print execution traces for failing tests. - 4 (-vvvv): Print execution traces for all tests, and setup traces for failing tests. - 5 (-vvvvv): Print execution and setup traces for all tests, including storage changes.",
            "value": "..."
        },
        {
            "option": "--version",
            "shortcut": "-V",
            "description": "Print version"
        }
    ],
    "version": "1.3.1-stable"
}
