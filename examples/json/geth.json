{
  "name": "geth",
  "description": "the go-ethereum command line interface",
  "usage": "geth [global options] command [command options] [arguments...]",
  "subcommands": [
      {
          "name": "geth account",
          "description": "Manage accounts, list all existing accounts, import a private key into a new account, create a new account or update an existing account. It supports interactive mode, when you are prompted for password as well as non-interactive mode where passwords are supplied via a given password file. Non-interactive mode is only meant for scripted use on test networks or known safe environments. Make sure you remember the password you gave when creating a new account (with either new or import). Without it you are not able to unlock your account. Note that exporting your key in unencrypted format is NOT supported. Keys are stored under <DATADIR>/keystore. It is safe to transfer the entire directory or the individual keys therein between ethereum nodes by simply copying. Make sure you backup your keys regularly.",
          "usage": "geth account command [command options] [arguments...]",
          "subcommands": [
              {
                  "name": "geth account import",
                  "description": "Import a private key into a new account",
                  "usage": "geth account import [command options] <keyFile>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--keystore",
                          "description": "Directory for the keystore",
                          "value": "value",
                          "tags": [
                              "$GETH_KEYSTORE"
                          ]
                      },
                      {
                          "option": "--lightkdf",
                          "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                          "default": "false",
                          "tags": [
                              "$GETH_LIGHTKDF"
                          ]
                      },
                      {
                          "option": "--password",
                          "description": "Password file to use for non-interactive password input",
                          "value": "value",
                          "tags": [
                              "$GETH_PASSWORD"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth account list",
                  "description": "Print summary of existing accounts",
                  "usage": "geth account list [command options] [arguments...]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum"
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--keystore",
                          "description": "Directory for the keystore",
                          "value": "value",
                          "tags": [
                              "($GETH_KEYSTORE)"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth account new",
                  "description": "Creates a new account and prints the address. The account is saved in encrypted format, you are prompted for a password. You must remember this password to unlock your account in the future. For non-interactive use the password can be specified with the --password flag. Note, this is meant to be used for testing only, it is a bad idea to save your password to file or expose in any other way.",
                  "usage": "geth account new [command options] [arguments...]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--keystore",
                          "description": "Directory for the keystore",
                          "value": "value",
                          "tags": [
                              "$GETH_KEYSTORE"
                          ]
                      },
                      {
                          "option": "--lightkdf",
                          "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                          "default": "false",
                          "tags": [
                              "$GETH_LIGHTKDF"
                          ]
                      },
                      {
                          "option": "--password",
                          "description": "Password file to use for non-interactive password input",
                          "value": "value",
                          "tags": [
                              "$GETH_PASSWORD"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth account update",
                  "description": "Update an existing account. The account is saved in the newest version in encrypted format, you are prompted for a password to unlock the account and another to save the updated file. This same command can therefore be used to migrate an account of a deprecated format to the newest format or change the password for an account. For non-interactive use the password can be specified with the --password flag: Since only one password can be given, only format update can be performed, changing your password is only possible interactively.",
                  "usage": "geth account update [command options] <address>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--keystore",
                          "description": "Directory for the keystore",
                          "value": "value",
                          "tags": [
                              "$GETH_KEYSTORE"
                          ]
                      },
                      {
                          "option": "--lightkdf",
                          "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                          "default": "false",
                          "tags": [
                              "$GETH_LIGHTKDF"
                          ]
                      }
                  ],
                  "subcommands": []
              }
          ],
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ]
      },
      {
          "name": "geth attach",
          "description": "The Geth console is an interactive shell for the JavaScript runtime environment which exposes a node admin interface as well as the \u00d0app JavaScript API. See https://geth.ethereum.org/docs/interacting-with-geth/javascript-console. This command allows to open a console on a running geth node.",
          "usage": "geth attach [command options] [endpoint]",
          "options": [
              {
                  "description": "Data directory for the databases and keystore",
                  "option": "--datadir",
                  "default": "/home/ahmad/.ethereum",
                  "value": "value"
              },
              {
                  "description": "Execute JavaScript statement",
                  "option": "--exec",
                  "value": "value"
              },
              {
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "option": "--header",
                  "shortcut": "-H",
                  "value": "value"
              },
              {
                  "description": "JavaScript root path for `loadScript`",
                  "option": "--jspath",
                  "default": ".",
                  "value": "value"
              },
              {
                  "description": "Comma separated list of JavaScript files to preload into the console",
                  "option": "--preload",
                  "value": "value"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth console",
          "description": "Start an interactive JavaScript environment",
          "usage": "geth console [command options] [arguments...]",
          "options": [
              {
                  "option": "--allow-insecure-unlock",
                  "description": "Allow insecure account unlocking when account-related RPCs are exposed by http (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_ALLOW_INSECURE_UNLOCK"
                  ]
              },
              {
                  "option": "--authrpc.addr",
                  "description": "Listening address for authenticated APIs",
                  "default": "localhost",
                  "tags": [
                      "$GETH_AUTHRPC_ADDR"
                  ]
              },
              {
                  "option": "--authrpc.jwtsecret",
                  "description": "Path to a JWT secret to use for authenticated RPC endpoints",
                  "tags": [
                      "$GETH_AUTHRPC_JWTSECRET"
                  ]
              },
              {
                  "option": "--authrpc.port",
                  "description": "Listening port for authenticated APIs",
                  "default": "8551",
                  "tags": [
                      "$GETH_AUTHRPC_PORT"
                  ]
              },
              {
                  "option": "--authrpc.vhosts",
                  "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
                  "default": "localhost",
                  "tags": [
                      "$GETH_AUTHRPC_VHOSTS"
                  ]
              },
              {
                  "option": "--beacon.api",
                  "description": "Beacon node (CL) light client API URL. This flag can be given multiple times.",
                  "tags": [
                      "$GETH_BEACON_API"
                  ]
              },
              {
                  "option": "--beacon.api.header",
                  "description": "Pass custom HTTP header fields to the remote beacon node API in \"key:value\" format. This flag can be given multiple times.",
                  "tags": [
                      "$GETH_BEACON_API_HEADER"
                  ]
              },
              {
                  "option": "--beacon.checkpoint",
                  "description": "Beacon chain weak subjectivity checkpoint block hash",
                  "tags": [
                      "$GETH_BEACON_CHECKPOINT"
                  ]
              },
              {
                  "option": "--beacon.config",
                  "description": "Beacon chain config YAML file",
                  "tags": [
                      "$GETH_BEACON_CONFIG"
                  ]
              },
              {
                  "option": "--beacon.genesis.gvroot",
                  "description": "Beacon chain genesis validators root",
                  "tags": [
                      "$GETH_BEACON_GENESIS_GVROOT"
                  ]
              },
              {
                  "option": "--beacon.genesis.time",
                  "description": "Beacon chain genesis time",
                  "default": "0",
                  "tags": [
                      "$GETH_BEACON_GENESIS_TIME"
                  ]
              },
              {
                  "option": "--beacon.nofilter",
                  "description": "Disable future slot signature filter",
                  "default": "false",
                  "tags": [
                      "$GETH_BEACON_NOFILTER"
                  ]
              },
              {
                  "option": "--beacon.threshold",
                  "description": "Beacon sync committee participation threshold",
                  "default": "342",
                  "tags": [
                      "$GETH_BEACON_THRESHOLD"
                  ]
              },
              {
                  "option": "--bloomfilter.size",
                  "description": "Megabytes of memory allocated to bloom-filter for pruning",
                  "default": "2048",
                  "tags": [
                      "$GETH_BLOOMFILTER_SIZE"
                  ]
              },
              {
                  "option": "--blobpool.datacap",
                  "description": "Disk space to allocate for pending blob transactions (soft limit)",
                  "default": "2684354560",
                  "tags": [
                      "$GETH_BLOBPOOL_DATACAP"
                  ]
              },
              {
                  "option": "--blobpool.datadir",
                  "description": "Data directory to store blob transactions in",
                  "default": "blobpool",
                  "tags": [
                      "$GETH_BLOBPOOL_DATADIR"
                  ]
              },
              {
                  "option": "--blobpool.pricebump",
                  "description": "Price bump percentage to replace an already existing blob transaction",
                  "default": "100",
                  "tags": [
                      "$GETH_BLOBPOOL_PRICEBUMP"
                  ]
              },
              {
                  "option": "--bootnodes",
                  "description": "Comma separated enode URLs for P2P discovery bootstrap",
                  "tags": [
                      "$GETH_BOOTNODES"
                  ]
              },
              {
                  "option": "--cache",
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "default": "1024",
                  "tags": [
                      "$GETH_CACHE"
                  ]
              },
              {
                  "option": "--cache.blocklogs",
                  "description": "Size (in number of blocks) of the log cache for filtering",
                  "default": "32",
                  "tags": [
                      "$GETH_CACHE_BLOCKLOGS"
                  ]
              },
              {
                  "option": "--cache.database",
                  "description": "Percentage of cache memory allowance to use for database io",
                  "default": "50",
                  "tags": [
                      "$GETH_CACHE_DATABASE"
                  ]
              },
              {
                  "option": "--cache.gc",
                  "description": "Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode)",
                  "default": "25",
                  "tags": [
                      "$GETH_CACHE_GC"
                  ]
              },
              {
                  "option": "--cache.noprefetch",
                  "description": "Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data)",
                  "default": "false",
                  "tags": [
                      "$GETH_CACHE_NOPREFETCH"
                  ]
              },
              {
                  "option": "--cache.preimages",
                  "description": "Enable recording the SHA3/keccak preimages of trie keys",
                  "default": "false",
                  "tags": [
                      "$GETH_CACHE_PREIMAGES"
                  ]
              },
              {
                  "option": "--cache.snapshot",
                  "description": "Percentage of cache memory allowance to use for snapshot caching (default = 10% full mode, 20% archive mode)",
                  "default": "10",
                  "tags": [
                      "$GETH_CACHE_SNAPSHOT"
                  ]
              },
              {
                  "option": "--cache.trie",
                  "description": "Percentage of cache memory allowance to use for trie caching (default = 15% full mode, 30% archive mode)",
                  "default": "15",
                  "tags": [
                      "$GETH_CACHE_TRIE"
                  ]
              },
              {
                  "option": "--cache.trie.journal",
                  "description": "Disk journal directory for trie cache to survive node restarts",
                  "tags": [
                      "$GETH_CACHE_TRIE_JOURNAL"
                  ]
              },
              {
                  "option": "--cache.trie.rejournal",
                  "description": "Time interval to regenerate the trie cache journal",
                  "default": "0s",
                  "tags": [
                      "$GETH_CACHE_TRIE_REJOURNAL"
                  ]
              },
              {
                  "option": "--config",
                  "description": "TOML configuration file",
                  "tags": [
                      "$GETH_CONFIG"
                  ]
              },
              {
                  "option": "--crypto.kzg",
                  "description": "KZG library implementation to use; gokzg (recommended) or ckzg",
                  "default": "gokzg",
                  "tags": [
                      "$GETH_CRYPTO_KZG"
                  ]
              },
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ]
              },
              {
                  "option": "--datadir.minfreedisk",
                  "description": "Minimum free disk space in MB, once reached triggers auto shut down (default = --cache.gc converted to MB, 0 = disabled)",
                  "tags": [
                      "$GETH_DATADIR_MINFREEDISK"
                  ]
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ]
              },
              {
                  "option": "--dev",
                  "description": "Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled",
                  "default": "false",
                  "tags": [
                      "$GETH_DEV"
                  ]
              },
              {
                  "option": "--dev.gaslimit",
                  "description": "Initial block gas limit",
                  "default": "11500000",
                  "tags": [
                      "$GETH_DEV_GASLIMIT"
                  ]
              },
              {
                  "option": "--dev.period",
                  "description": "Block period to use in developer mode (0 = mine only if transaction pending)",
                  "default": "0",
                  "tags": [
                      "$GETH_DEV_PERIOD"
                  ]
              },
              {
                  "option": "--discovery.dns",
                  "description": "Sets DNS discovery entry points (use \"\" to disable DNS)",
                  "tags": [
                      "$GETH_DISCOVERY_DNS"
                  ]
              },
              {
                  "option": "--discovery.port",
                  "description": "Use a custom UDP port for P2P discovery",
                  "default": "30303",
                  "tags": [
                      "$GETH_DISCOVERY_PORT"
                  ]
              },
              {
                  "option": "--discovery.v4, --discv4",
                  "description": "Enables the V4 discovery mechanism",
                  "default": "true",
                  "tags": [
                      "$GETH_DISCOVERY_V4"
                  ]
              },
              {
                  "option": "--discovery.v5, --discv5",
                  "description": "Enables the V5 discovery mechanism",
                  "default": "true",
                  "tags": [
                      "$GETH_DISCOVERY_V5"
                  ]
              },
              {
                  "option": "--eth.requiredblocks",
                  "description": "Comma separated block number-to-hash mappings to require for peering (<number>=<hash>)",
                  "tags": [
                      "$GETH_ETH_REQUIREDBLOCKS"
                  ]
              },
              {
                  "option": "--ethstats",
                  "description": "Reporting URL of a ethstats service (nodename:secret@host:port)",
                  "tags": [
                      "$GETH_ETHSTATS"
                  ]
              },
              {
                  "option": "--exec",
                  "description": "Execute JavaScript statement",
                  "tags": [
                      "$GETH_EXEC"
                  ]
              },
              {
                  "option": "--exitwhensynced",
                  "description": "Exits after block synchronisation completes",
                  "default": "false",
                  "tags": [
                      "$GETH_EXITWHENSYNCED"
                  ]
              },
              {
                  "option": "--fdlimit",
                  "description": "Raise the open file descriptor resource limit (default = system fd limit)",
                  "default": "0",
                  "tags": [
                      "$GETH_FDLIMIT"
                  ]
              },
              {
                  "option": "--gcmode",
                  "description": "Blockchain garbage collection mode, only relevant in state.scheme=hash (\"full\", \"archive\")",
                  "default": "full",
                  "tags": [
                      "$GETH_GCMODE"
                  ]
              },
              {
                  "option": "--gpo.blocks",
                  "description": "Number of recent blocks to check for gas prices",
                  "default": "20",
                  "tags": [
                      "$GETH_GPO_BLOCKS"
                  ]
              },
              {
                  "option": "--gpo.ignoreprice",
                  "description": "Gas price below which gpo will ignore transactions",
                  "default": "2",
                  "tags": [
                      "$GETH_GPO_IGNOREPRICE"
                  ]
              },
              {
                  "option": "--gpo.maxprice",
                  "description": "Maximum transaction priority fee (or gasprice before London fork) to be recommended by gpo",
                  "default": "500000000000",
                  "tags": [
                      "$GETH_GPO_MAXPRICE"
                  ]
              },
              {
                  "option": "--gpo.percentile",
                  "description": "Suggested gas price is the given percentile of a set of recent transaction gas prices",
                  "default": "60",
                  "tags": [
                      "$GETH_GPO_PERCENTILE"
                  ]
              },
              {
                  "option": "--graphql",
                  "description": "Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well.",
                  "default": "false",
                  "tags": [
                      "$GETH_GRAPHQL"
                  ]
              },
              {
                  "option": "--graphql.corsdomain",
                  "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)",
                  "tags": [
                      "$GETH_GRAPHQL_CORSDOMAIN"
                  ]
              },
              {
                  "option": "--graphql.vhosts",
                  "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
                  "default": "localhost",
                  "tags": [
                      "$GETH_GRAPHQL_VHOSTS"
                  ]
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "tags": [
                      "$GETH_HEADER"
                  ]
              },
              {
                  "option": "--history.state",
                  "description": "Number of recent blocks to retain state history for (default = 90,000 blocks, 0 = entire chain)",
                  "default": "90000",
                  "tags": [
                      "$GETH_HISTORY_STATE"
                  ]
              },
              {
                  "option": "--history.transactions",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain)",
                  "default": "2350000",
                  "tags": [
                      "$GETH_HISTORY_TRANSACTIONS"
                  ]
              },
              {
                  "option": "--holesky",
                  "description": "Holesky network: pre-configured proof-of-stake test network",
                  "default": "false",
                  "tags": [
                      "$GETH_HOLESKY"
                  ]
              },
              {
                  "option": "--http",
                  "description": "Enable the HTTP-RPC server",
                  "default": "false",
                  "tags": [
                      "$GETH_HTTP"
                  ]
              },
              {
                  "option": "--http.addr",
                  "description": "HTTP-RPC server listening interface",
                  "default": "localhost",
                  "tags": [
                      "$GETH_HTTP_ADDR"
                  ]
              },
              {
                  "option": "--http.api",
                  "description": "API's offered over the HTTP-RPC interface",
                  "tags": [
                      "$GETH_HTTP_API"
                  ]
              },
              {
                  "option": "--http.corsdomain",
                  "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)",
                  "tags": [
                      "$GETH_HTTP_CORSDOMAIN"
                  ]
              },
              {
                  "option": "--http.port",
                  "description": "HTTP-RPC server listening port",
                  "default": "8545",
                  "tags": [
                      "$GETH_HTTP_PORT"
                  ]
              },
              {
                  "option": "--http.rpcprefix",
                  "description": "HTTP path prefix on which JSON-RPC is served. Use '/' to serve on all paths.",
                  "tags": [
                      "$GETH_HTTP_RPCPREFIX"
                  ]
              },
              {
                  "option": "--http.vhosts",
                  "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
                  "default": "localhost",
                  "tags": [
                      "$GETH_HTTP_VHOSTS"
                  ]
              },
              {
                  "option": "--identity",
                  "description": "Custom node name",
                  "tags": [
                      "$GETH_IDENTITY"
                  ]
              },
              {
                  "option": "--ipcdisable",
                  "description": "Disable the IPC-RPC server",
                  "default": "false",
                  "tags": [
                      "$GETH_IPCDISABLE"
                  ]
              },
              {
                  "option": "--ipcpath",
                  "description": "Filename for IPC socket/pipe within the datadir (explicit paths escape it)",
                  "tags": [
                      "$GETH_IPCPATH"
                  ]
              },
              {
                  "option": "--jspath",
                  "description": "JavaScript root path for `loadScript`",
                  "default": ".",
                  "tags": [
                      "$GETH_JSPATH"
                  ]
              },
              {
                  "option": "--keystore",
                  "description": "Directory for the keystore (default = inside the datadir)",
                  "tags": [
                      "$GETH_KEYSTORE"
                  ]
              },
              {
                  "option": "--light.egress",
                  "description": "Outgoing bandwidth limit for serving light clients (deprecated)",
                  "default": "0",
                  "tags": [
                      "$GETH_LIGHT_EGRESS"
                  ]
              },
              {
                  "option": "--light.ingress",
                  "description": "Incoming bandwidth limit for serving light clients (deprecated)",
                  "default": "0",
                  "tags": [
                      "$GETH_LIGHT_INGRESS"
                  ]
              },
              {
                  "option": "--light.maxpeers",
                  "description": "Maximum number of light clients to serve, or light servers to attach to (deprecated)",
                  "default": "0",
                  "tags": [
                      "$GETH_LIGHT_MAXPEERS"
                  ]
              },
              {
                  "option": "--light.nopruning",
                  "description": "Disable ancient light chain data pruning (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_LIGHT_NOPRUNING"
                  ]
              },
              {
                  "option": "--light.nosyncserve",
                  "description": "Enables serving light clients before syncing (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_LIGHT_NOSYNCSERVE"
                  ]
              },
              {
                  "option": "--light.serve",
                  "description": "Maximum percentage of time allowed for serving LES requests (deprecated)",
                  "default": "0",
                  "tags": [
                      "$GETH_LIGHT_SERVE"
                  ]
              },
              {
                  "option": "--lightkdf",
                  "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                  "default": "false",
                  "tags": [
                      "$GETH_LIGHTKDF"
                  ]
              },
              {
                  "option": "--log.backtrace",
                  "description": "Request a stack trace at a specific logging statement (deprecated)",
                  "tags": [
                      "$GETH_LOG_BACKTRACE"
                  ]
              },
              {
                  "option": "--log.debug",
                  "description": "Prepends log messages with call-site location (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_LOG_DEBUG"
                  ]
              },
              {
                  "option": "--mainnet",
                  "description": "Ethereum mainnet",
                  "default": "false",
                  "tags": [
                      "$GETH_MAINNET"
                  ]
              },
              {
                  "option": "--maxpeers",
                  "description": "Maximum number of network peers (network disabled if set to 0)",
                  "default": "50",
                  "tags": [
                      "$GETH_MAXPEERS"
                  ]
              },
              {
                  "option": "--maxpendpeers",
                  "description": "Maximum number of pending connection attempts (defaults used if set to 0)",
                  "default": "0",
                  "tags": [
                      "$GETH_MAXPENDPEERS"
                  ]
              },
              {
                  "option": "--mine",
                  "description": "Enable mining (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_MINE"
                  ]
              },
              {
                  "option": "--miner.etherbase",
                  "description": "0x prefixed public address for block mining rewards (deprecated)",
                  "tags": [
                      "$GETH_MINER_ETHERBASE"
                  ]
              },
              {
                  "option": "--miner.extradata",
                  "description": "Block extra data set by the miner (default = client version)",
                  "tags": [
                      "$GETH_MINER_EXTRADATA"
                  ]
              },
              {
                  "option": "--miner.gaslimit",
                  "description": "Target gas ceiling for mined blocks",
                  "default": "30000000",
                  "tags": [
                      "$GETH_MINER_GASLIMIT"
                  ]
              },
              {
                  "option": "--miner.gasprice",
                  "description": "Minimum gas price for mining a transaction",
                  "default": "0",
                  "tags": [
                      "$GETH_MINER_GASPRICE"
                  ]
              },
              {
                  "option": "--miner.newpayload-timeout",
                  "description": "Specify the maximum time allowance for creating a new payload (deprecated)",
                  "default": "2s",
                  "tags": [
                      "$GETH_MINER_NEWPAYLOAD_TIMEOUT"
                  ]
              },
              {
                  "option": "--miner.pending.feeRecipient",
                  "description": "0x prefixed public address for the pending block producer (not used for actual block production)",
                  "tags": [
                      "$GETH_MINER_PENDING_FEERECIPIENT"
                  ]
              },
              {
                  "option": "--miner.recommit",
                  "description": "Time interval to recreate the block being mined",
                  "default": "2s",
                  "tags": [
                      "$GETH_MINER_RECOMMIT"
                  ]
              },
              {
                  "option": "--nat",
                  "description": "NAT port mapping mechanism (any|none|upnp|pmp|pmp:<IP>|extip:<IP>)",
                  "default": "any",
                  "tags": [
                      "$GETH_NAT"
                  ]
              },
              {
                  "option": "--netrestrict",
                  "description": "Restricts network communication to the given IP networks (CIDR masks)",
                  "tags": [
                      "$GETH_NETRESTRICT"
                  ]
              },
              {
                  "option": "--networkid",
                  "description": "Explicitly set network id (integer)(For testnets: use --sepolia, --holesky instead)",
                  "default": "0",
                  "tags": [
                      "$GETH_NETWORKID"
                  ]
              },
              {
                  "option": "--nodekey",
                  "description": "P2P node key file",
                  "tags": [
                      "$GETH_NODEKEY"
                  ]
              },
              {
                  "option": "--nodekeyhex",
                  "description": "P2P node key as hex (for testing)",
                  "tags": [
                      "$GETH_NODEKEYHEX"
                  ]
              },
              {
                  "option": "--nodiscover",
                  "description": "Disables the peer discovery mechanism (manual peer addition)",
                  "default": "false",
                  "tags": [
                      "$GETH_NODISCOVER"
                  ]
              },
              {
                  "option": "--nousb",
                  "description": "Disables monitoring for and managing USB hardware wallets (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_NOUSB"
                  ]
              },
              {
                  "option": "--nocompaction",
                  "description": "Disables db compaction after import",
                  "default": "false",
                  "tags": [
                      "$GETH_NOCOMPACTION"
                  ]
              },
              {
                  "option": "--override.cancun",
                  "description": "Manually specify the Cancun fork timestamp, overriding the bundled setting",
                  "default": "0",
                  "tags": [
                      "$GETH_OVERRIDE_CANCUN"
                  ]
              },
              {
                  "option": "--override.verkle",
                  "description": "Manually specify the Verkle fork timestamp, overriding the bundled setting",
                  "default": "0",
                  "tags": [
                      "$GETH_OVERRIDE_VERKLE"
                  ]
              },
              {
                  "option": "--password",
                  "description": "Password file to use for non-interactive password input",
                  "tags": [
                      "$GETH_PASSWORD"
                  ]
              },
              {
                  "option": "--pcscdpath",
                  "description": "Path to the smartcard daemon (pcscd) socket file",
                  "default": "/run/pcscd/pcscd.comm",
                  "tags": [
                      "$GETH_PCSCDPATH"
                  ]
              },
              {
                  "option": "--port",
                  "description": "Network listening port",
                  "default": "30303",
                  "tags": [
                      "$GETH_PORT"
                  ]
              },
              {
                  "option": "--preload",
                  "description": "Comma separated list of JavaScript files to preload into the console",
                  "tags": [
                      "$GETH_PRELOAD"
                  ]
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ]
              },
              {
                  "option": "--rpc.allow-unprotected-txs",
                  "description": "Allow for unprotected (non EIP155 signed) transactions to be submitted via RPC",
                  "default": "false",
                  "tags": [
                      "$GETH_RPC_ALLOW_UNPROTECTED_TXS"
                  ]
              },
              {
                  "option": "--rpc.batch-request-limit",
                  "description": "Maximum number of requests in a batch",
                  "default": "1000",
                  "tags": [
                      "$GETH_RPC_BATCH_REQUEST_LIMIT"
                  ]
              },
              {
                  "option": "--rpc.batch-response-max-size",
                  "description": "Maximum number of bytes returned from a batched call",
                  "default": "25000000",
                  "tags": [
                      "$GETH_RPC_BATCH_RESPONSE_MAX_SIZE"
                  ]
              },
              {
                  "option": "--rpc.enabledeprecatedpersonal",
                  "description": "This used to enable the 'personal' namespace.",
                  "default": "false",
                  "tags": [
                      "$GETH_RPC_ENABLEDEPRECATEDPERSONAL"
                  ]
              },
              {
                  "option": "--rpc.evmtimeout",
                  "description": "Sets a timeout used for eth_call (0=infinite)",
                  "default": "5s",
                  "tags": [
                      "$GETH_RPC_EVMTIMEOUT"
                  ]
              },
              {
                  "option": "--rpc.gascap",
                  "description": "Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite)",
                  "default": "50000000",
                  "tags": [
                      "$GETH_RPC_GASCAP"
                  ]
              },
              {
                  "option": "--rpc.txfeecap",
                  "description": "Sets a cap on transaction fee (in ether) that can be sent via the RPC APIs (0 = no cap)",
                  "default": "1",
                  "tags": [
                      "$GETH_RPC_TXFEECAP"
                  ]
              },
              {
                  "option": "--sepolia",
                  "description": "Sepolia network: pre-configured proof-of-work test network",
                  "default": "false",
                  "tags": [
                      "$GETH_SEPOLIA"
                  ]
              },
              {
                  "option": "--signer",
                  "description": "External signer (url or path to ipc file)",
                  "tags": [
                      "$GETH_SIGNER"
                  ]
              },
              {
                  "option": "--snapshot",
                  "description": "Enables snapshot-database mode (default = enable)",
                  "default": "true",
                  "tags": [
                      "$GETH_SNAPSHOT"
                  ]
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ]
              },
              {
                  "option": "--synctarget",
                  "description": "Hash of the block to full sync to (dev testing feature)",
                  "tags": [
                      "$GETH_SYNCTARGET"
                  ]
              },
              {
                  "option": "--syncmode",
                  "description": "Blockchain sync mode (\"snap\" or \"full\")",
                  "default": "snap",
                  "tags": [
                      "$GETH_SYNCMODE"
                  ]
              },
              {
                  "option": "--txlookuplimit",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain) (deprecated, use history.transactions instead)",
                  "default": "2350000",
                  "tags": [
                      "$GETH_TXLOOKUPLIMIT"
                  ]
              },
              {
                  "option": "--txpool.accountqueue",
                  "description": "Maximum number of non-executable transaction slots permitted per account",
                  "default": "64",
                  "tags": [
                      "$GETH_TXPOOL_ACCOUNTQUEUE"
                  ]
              },
              {
                  "option": "--txpool.accountslots",
                  "description": "Minimum number of executable transaction slots guaranteed per account",
                  "default": "16",
                  "tags": [
                      "$GETH_TXPOOL_ACCOUNTSLOTS"
                  ]
              },
              {
                  "option": "--txpool.globalqueue",
                  "description": "Maximum number of non-executable transaction slots for all accounts",
                  "default": "1024",
                  "tags": [
                      "$GETH_TXPOOL_GLOBALQUEUE"
                  ]
              },
              {
                  "option": "--txpool.globalslots",
                  "description": "Maximum number of executable transaction slots for all accounts",
                  "default": "5120",
                  "tags": [
                      "$GETH_TXPOOL_GLOBALSLOTS"
                  ]
              },
              {
                  "option": "--txpool.journal",
                  "description": "Disk journal for local transaction to survive node restarts",
                  "default": "transactions.rlp",
                  "tags": [
                      "$GETH_TXPOOL_JOURNAL"
                  ]
              },
              {
                  "option": "--txpool.lifetime",
                  "description": "Maximum amount of time non-executable transaction are queued",
                  "default": "3h0m0s",
                  "tags": [
                      "$GETH_TXPOOL_LIFETIME"
                  ]
              },
              {
                  "option": "--txpool.locals",
                  "description": "Comma separated accounts to treat as locals (no flush, priority inclusion)",
                  "tags": [
                      "$GETH_TXPOOL_LOCALS"
                  ]
              },
              {
                  "option": "--txpool.nolocals",
                  "description": "Disables price exemptions for locally submitted transactions",
                  "default": "false",
                  "tags": [
                      "$GETH_TXPOOL_NOLOCALS"
                  ]
              },
              {
                  "option": "--txpool.pricebump",
                  "description": "Price bump percentage to replace an already existing transaction",
                  "default": "10",
                  "tags": [
                      "$GETH_TXPOOL_PRICEBUMP"
                  ]
              },
              {
                  "option": "--txpool.pricelimit",
                  "description": "Minimum gas price tip to enforce for acceptance into the pool",
                  "default": "1",
                  "tags": [
                      "$GETH_TXPOOL_PRICELIMIT"
                  ]
              },
              {
                  "option": "--txpool.rejournal",
                  "description": "Time interval to regenerate the local transaction journal",
                  "default": "1h0m0s",
                  "tags": [
                      "$GETH_TXPOOL_REJOURNAL"
                  ]
              },
              {
                  "option": "--unlock",
                  "description": "Comma separated list of accounts to unlock (deprecated)",
                  "tags": [
                      "$GETH_UNLOCK"
                  ]
              },
              {
                  "option": "--usb",
                  "description": "Enable monitoring and management of USB hardware wallets",
                  "default": "false",
                  "tags": [
                      "$GETH_USB"
                  ]
              },
              {
                  "option": "--v5disc",
                  "description": "Enables the experimental RLPx V5 (Topic Discovery) mechanism (deprecated, use --discv5 instead)",
                  "default": "false",
                  "tags": [
                      "$GETH_V5DISC"
                  ]
              },
              {
                  "option": "--vmdebug",
                  "description": "Record information useful for VM and contract debugging",
                  "default": "false",
                  "tags": [
                      "$GETH_VMDEBUG"
                  ]
              },
              {
                  "option": "--vmtrace",
                  "description": "Name of tracer which should record internal VM operations (costly)",
                  "tags": [
                      "$GETH_VMTRACE"
                  ]
              },
              {
                  "option": "--vmtrace.jsonconfig",
                  "description": "Tracer configuration (JSON)",
                  "default": "{}",
                  "tags": [
                      "$GETH_VMTRACE_JSONCONFIG"
                  ]
              },
              {
                  "option": "--whitelist",
                  "description": "Comma separated block number-to-hash mappings to enforce (<number>=<hash>) (deprecated in favor of --eth.requiredblocks)",
                  "tags": [
                      "$GETH_WHITELIST"
                  ]
              },
              {
                  "option": "--ws",
                  "description": "Enable the WS-RPC server",
                  "default": "false",
                  "tags": [
                      "$GETH_WS"
                  ]
              },
              {
                  "option": "--ws.addr",
                  "description": "WS-RPC server listening interface",
                  "default": "localhost",
                  "tags": [
                      "$GETH_WS_ADDR"
                  ]
              },
              {
                  "option": "--ws.api",
                  "description": "API's offered over the WS-RPC interface",
                  "tags": [
                      "$GETH_WS_API"
                  ]
              },
              {
                  "option": "--ws.origins",
                  "description": "Origins from which to accept websockets requests",
                  "tags": [
                      "$GETH_WS_ORIGINS"
                  ]
              },
              {
                  "option": "--ws.port",
                  "description": "WS-RPC server listening port",
                  "default": "8546",
                  "tags": [
                      "$GETH_WS_PORT"
                  ]
              },
              {
                  "option": "--ws.rpcprefix",
                  "description": "HTTP path prefix on which JSON-RPC is served. Use '/' to serve on all paths.",
                  "tags": [
                      "$GETH_WS_RPCPREFIX"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth db",
          "description": "Low level database operations",
          "usage": "geth db command [command options] [arguments...]",
          "subcommands": [
              {
                  "name": "geth db check-state-content",
                  "description": "Verify that state data is cryptographically correct",
                  "usage": "geth db check-state-content [command options] <start (optional)>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "($GETH_DATADIR)"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "($GETH_DATADIR_ANCIENT)"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "($GETH_DB_ENGINE)"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "($GETH_HEADER)"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "($GETH_HOLESKY)"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "($GETH_MAINNET)"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "($GETH_REMOTEDB)"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "($GETH_SEPOLIA)"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "($GETH_STATE_SCHEME)"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db compact",
                  "description": "Compact leveldb database. WARNING: May take a very long time",
                  "usage": "geth db compact [command options] [arguments...]",
                  "options": [
                      {
                          "option": "--cache",
                          "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                          "value": "value",
                          "default": "1024",
                          "tags": [
                              "$GETH_CACHE"
                          ]
                      },
                      {
                          "option": "--cache.database",
                          "description": "Percentage of cache memory allowance to use for database io",
                          "value": "value",
                          "default": "50",
                          "tags": [
                              "$GETH_CACHE_DATABASE"
                          ]
                      },
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "\"snap\"",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db delete",
                  "description": "Delete a database key (WARNING: may corrupt your database)",
                  "usage": "geth db delete [command options] <hex-encoded key>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "tags": [
                              "$GETH_HEADER"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ],
                          "value": "value"
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db dumptrie",
                  "description": "Show the storage key/values of a given storage trie",
                  "usage": "geth db dumptrie [command options] <hex-encoded state root> <hex-encoded account hash> <hex-encoded storage trie root> <hex-encoded start (optional)> <int max elements (optional)>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "tags": [
                              "$GETH_HEADER"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ],
                          "value": "value"
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db export",
                  "description": "Exports the chain data into an RLP dump. If the <dumpfile> has .gz suffix, gzip compression will be used.",
                  "usage": "geth db export [command options] <type> <dumpfile>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db freezer-index",
                  "description": "This command displays information about the freezer index.",
                  "usage": "geth db freezer-index [command options] <freezer-type> <table-type> <start (int)> <end (int)>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db get",
                  "description": "Show the value of a database key",
                  "usage": "geth db get [command options] <hex-encoded key>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "\"snap\"",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db import",
                  "description": "Imports leveldb-data from an exported RLP dump.",
                  "usage": "geth db import [command options] <dumpfile> <start (optional)",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db inspect",
                  "description": "Inspect the storage size for each type of data in the database",
                  "usage": "geth db inspect [command options] <prefix> <start>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db inspect-history",
                  "description": "This command queries the history of the account or storage slot within the specified block range",
                  "usage": "geth db inspect-history [command options] <address> [OPTIONAL <storage-slot>]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--end",
                          "description": "block number of the range end(included), zero means latest history",
                          "value": "value",
                          "default": "0"
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--raw",
                          "description": "display the decoded raw state value (otherwise shows rlp-encoded value)",
                          "default": "false"
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--start",
                          "description": "block number of the range start, zero means earliest history",
                          "value": "value",
                          "default": "0"
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "\"snap\"",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db metadata",
                  "description": "Shows metadata about the chain status.",
                  "usage": "geth db metadata [command options] [arguments...]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db put",
                  "description": "Set the value of a database key (WARNING: may corrupt your database)",
                  "usage": "geth db put [command options] <hex-encoded key> <hex-encoded value>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth db stats",
                  "description": "Print leveldb statistics",
                  "usage": "geth db stats [command options] [arguments...]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": false
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": false,
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": false,
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": false,
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      },
                      {
                          "option": "--syncmode",
                          "description": "Blockchain sync mode (\"snap\" or \"full\")",
                          "value": "value",
                          "default": "snap",
                          "tags": [
                              "$GETH_SYNCMODE"
                          ]
                      }
                  ],
                  "subcommands": []
              }
          ],
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ]
      },
      {
          "name": "geth dump",
          "description": "This command dumps out the state for a given block (or latest, if none provided).",
          "usage": "geth dump [command options] [? <blockHash> | <blockNum>]",
          "options": [
              {
                  "default": "/home/ahmad/.ethereum",
                  "description": "Data directory for the databases and keystore",
                  "option": "--datadir",
                  "tags": [
                      "$GETH_DATADIR"
                  ],
                  "value": "value"
              },
              {
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "option": "--datadir.ancient",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ],
                  "value": "value"
              },
              {
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "option": "--db.engine",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ],
                  "value": "value"
              },
              {
                  "default": 1024,
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "option": "--cache",
                  "tags": [
                      "$GETH_CACHE"
                  ],
                  "value": "value"
              },
              {
                  "default": false,
                  "description": "Include accounts for which we don't have the address (missing preimage)",
                  "option": "--incompletes"
              },
              {
                  "default": true,
                  "description": "Print streaming JSON iteratively, delimited by newlines",
                  "option": "--iterative"
              },
              {
                  "default": 0,
                  "description": "Max number of elements (0 = no limit)",
                  "option": "--limit",
                  "value": "value"
              },
              {
                  "default": false,
                  "description": "Exclude contract code (save db lookups)",
                  "option": "--nocode"
              },
              {
                  "default": false,
                  "description": "Exclude storage entries (save db lookups)",
                  "option": "--nostorage"
              },
              {
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "option": "--header",
                  "shortcut": "-H",
                  "tags": [
                      "$GETH_HEADER"
                  ],
                  "value": "value"
              },
              {
                  "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "description": "Start position. Either a hash or address",
                  "option": "--start",
                  "value": "value"
              },
              {
                  "description": "URL for remote database",
                  "option": "--remotedb",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ],
                  "value": "value"
              },
              {
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "option": "--state.scheme",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ],
                  "value": "value"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth dumpconfig",
          "description": "Export configuration values in a TOML format",
          "usage": "geth dumpconfig [command options] <dumpfile (optional)>",
          "options": [
              {
                  "option": "--allow-insecure-unlock",
                  "description": "Allow insecure account unlocking when account-related RPCs are exposed by http (deprecated)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--authrpc.addr",
                  "description": "Listening address for authenticated APIs",
                  "default": "localhost"
              },
              {
                  "option": "--authrpc.jwtsecret",
                  "description": "Path to a JWT secret to use for authenticated RPC endpoints"
              },
              {
                  "option": "--authrpc.port",
                  "description": "Listening port for authenticated APIs",
                  "default": "8551"
              },
              {
                  "option": "--authrpc.vhosts",
                  "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
                  "default": "localhost"
              },
              {
                  "option": "--beacon.api",
                  "description": "Beacon node (CL) light client API URL. This flag can be given multiple times."
              },
              {
                  "option": "--beacon.api.header",
                  "description": "Pass custom HTTP header fields to the remote beacon node API in 'key:value' format. This flag can be given multiple times."
              },
              {
                  "option": "--beacon.checkpoint",
                  "description": "Beacon chain weak subjectivity checkpoint block hash"
              },
              {
                  "option": "--beacon.config",
                  "description": "Beacon chain config YAML file"
              },
              {
                  "option": "--beacon.genesis.gvroot",
                  "description": "Beacon chain genesis validators root"
              },
              {
                  "option": "--beacon.genesis.time",
                  "description": "Beacon chain genesis time",
                  "default": "0"
              },
              {
                  "option": "--beacon.nofilter",
                  "description": "Disable future slot signature filter",
                  "default": "false"
              },
              {
                  "option": "--beacon.threshold",
                  "description": "Beacon sync committee participation threshold",
                  "default": "342"
              },
              {
                  "option": "--bloomfilter.size",
                  "description": "Megabytes of memory allocated to bloom-filter for pruning",
                  "default": "2048"
              },
              {
                  "option": "--blobpool.datacap",
                  "description": "Disk space to allocate for pending blob transactions (soft limit)",
                  "default": "2684354560"
              },
              {
                  "option": "--blobpool.datadir",
                  "description": "Data directory to store blob transactions in",
                  "default": "blobpool"
              },
              {
                  "option": "--blobpool.pricebump",
                  "description": "Price bump percentage to replace an already existing blob transaction",
                  "default": "100"
              },
              {
                  "option": "--bootnodes",
                  "description": "Comma separated enode URLs for P2P discovery bootstrap"
              },
              {
                  "option": "--cache",
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "default": "1024"
              },
              {
                  "option": "--cache.blocklogs",
                  "description": "Size (in number of blocks) of the log cache for filtering",
                  "default": "32"
              },
              {
                  "option": "--cache.database",
                  "description": "Percentage of cache memory allowance to use for database io",
                  "default": "50"
              },
              {
                  "option": "--cache.gc",
                  "description": "Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode)",
                  "default": "25"
              },
              {
                  "option": "--cache.noprefetch",
                  "description": "Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data)",
                  "default": "false"
              },
              {
                  "option": "--cache.preimages",
                  "description": "Enable recording the SHA3/keccak preimages of trie keys",
                  "default": "false"
              },
              {
                  "option": "--cache.snapshot",
                  "description": "Percentage of cache memory allowance to use for snapshot caching (default = 10% full mode, 20% archive mode)",
                  "default": "10"
              },
              {
                  "option": "--cache.trie",
                  "description": "Percentage of cache memory allowance to use for trie caching (default = 15% full mode, 30% archive mode)",
                  "default": "15"
              },
              {
                  "option": "--cache.trie.journal",
                  "description": "Disk journal directory for trie cache to survive node restarts"
              },
              {
                  "option": "--cache.trie.rejournal",
                  "description": "Time interval to regenerate the trie cache journal",
                  "default": "0s"
              },
              {
                  "option": "--config",
                  "description": "TOML configuration file"
              },
              {
                  "option": "--crypto.kzg",
                  "description": "KZG library implementation to use; gokzg (recommended) or ckzg",
                  "default": "gokzg"
              },
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "default": "/home/ahmad/.ethereum"
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)"
              },
              {
                  "option": "--datadir.minfreedisk",
                  "description": "Minimum free disk space in MB, once reached triggers auto shut down (default = --cache.gc converted to MB, 0 = disabled)"
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')"
              },
              {
                  "option": "--dev",
                  "description": "Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled",
                  "default": "false"
              },
              {
                  "option": "--dev.gaslimit",
                  "description": "Initial block gas limit",
                  "default": "11500000"
              },
              {
                  "option": "--dev.period",
                  "description": "Block period to use in developer mode (0 = mine only if transaction pending)",
                  "default": "0"
              },
              {
                  "option": "--discovery.dns",
                  "description": "Sets DNS discovery entry points (use \"\" to disable DNS)"
              },
              {
                  "option": "--discovery.port",
                  "description": "Use a custom UDP port for P2P discovery",
                  "default": "30303"
              },
              {
                  "option": "--discovery.v4",
                  "description": "Enables the V4 discovery mechanism",
                  "default": "true"
              },
              {
                  "option": "--discovery.v5",
                  "description": "Enables the V5 discovery mechanism",
                  "default": "true"
              },
              {
                  "option": "--eth.requiredblocks",
                  "description": "Comma separated block number-to-hash mappings to require for peering (<number>=<hash>)"
              },
              {
                  "option": "--ethstats",
                  "description": "Reporting URL of a ethstats service (nodename:secret@host:port)"
              },
              {
                  "option": "--exitwhensynced",
                  "description": "Exits after block synchronisation completes",
                  "default": "false"
              },
              {
                  "option": "--fdlimit",
                  "description": "Raise the open file descriptor resource limit (default = system fd limit)",
                  "default": "0"
              },
              {
                  "option": "--gcmode",
                  "description": "Blockchain garbage collection mode, only relevant in state.scheme=hash (\"full\", \"archive\")",
                  "default": "full"
              },
              {
                  "option": "--gpo.blocks",
                  "description": "Number of recent blocks to check for gas prices",
                  "default": "20"
              },
              {
                  "option": "--gpo.ignoreprice",
                  "description": "Gas price below which gpo will ignore transactions",
                  "default": "2"
              },
              {
                  "option": "--gpo.maxprice",
                  "description": "Maximum transaction priority fee (or gasprice before London fork) to be recommended by gpo",
                  "default": "500000000000"
              },
              {
                  "option": "--gpo.percentile",
                  "description": "Suggested gas price is the given percentile of a set of recent transaction gas prices",
                  "default": "60"
              },
              {
                  "option": "--graphql",
                  "description": "Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well.",
                  "default": "false"
              },
              {
                  "option": "--graphql.corsdomain",
                  "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)"
              },
              {
                  "option": "--graphql.vhosts",
                  "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
                  "default": "localhost"
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times."
              },
              {
                  "option": "--holesky",
                  "description": "Holesky network: pre-configured proof-of-stake test network",
                  "default": "false"
              },
              {
                  "option": "--http",
                  "description": "Enable the HTTP-RPC server",
                  "default": "false"
              },
              {
                  "option": "--http.addr",
                  "description": "HTTP-RPC server listening interface",
                  "default": "localhost"
              },
              {
                  "option": "--http.api",
                  "description": "API's offered over the HTTP-RPC interface"
              },
              {
                  "option": "--http.corsdomain",
                  "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)"
              },
              {
                  "option": "--http.port",
                  "description": "HTTP-RPC server listening port",
                  "default": "8545"
              },
              {
                  "option": "--http.rpcprefix",
                  "description": "HTTP path prefix on which JSON-RPC is served. Use '/' to serve on all paths."
              },
              {
                  "option": "--http.vhosts",
                  "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
                  "default": "localhost"
              },
              {
                  "option": "--identity",
                  "description": "Custom node name"
              },
              {
                  "option": "--ipcdisable",
                  "description": "Disable the IPC-RPC server",
                  "default": "false"
              },
              {
                  "option": "--ipcpath",
                  "description": "Filename for IPC socket/pipe within the datadir (explicit paths escape it)"
              },
              {
                  "option": "--keystore",
                  "description": "Directory for the keystore (default = inside the datadir)"
              },
              {
                  "option": "--light.egress",
                  "description": "Outgoing bandwidth limit for serving light clients (deprecated)",
                  "default": "0",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--light.ingress",
                  "description": "Incoming bandwidth limit for serving light clients (deprecated)",
                  "default": "0",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--light.maxpeers",
                  "description": "Maximum number of light clients to serve, or light servers to attach to (deprecated)",
                  "default": "0",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--light.nopruning",
                  "description": "Disable ancient light chain data pruning (deprecated)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--light.nosyncserve",
                  "description": "Enables serving light clients before syncing (deprecated)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--light.serve",
                  "description": "Maximum percentage of time allowed for serving LES requests (deprecated)",
                  "default": "0",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--lightkdf",
                  "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                  "default": "false"
              },
              {
                  "option": "--log.backtrace",
                  "description": "Request a stack trace at a specific logging statement (deprecated)",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--log.debug",
                  "description": "Prepends log messages with call-site location (deprecated)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--mainnet",
                  "description": "Ethereum mainnet",
                  "default": "false"
              },
              {
                  "option": "--maxpeers",
                  "description": "Maximum number of network peers (network disabled if set to 0)",
                  "default": "50"
              },
              {
                  "option": "--maxpendpeers",
                  "description": "Maximum number of pending connection attempts (defaults used if set to 0)",
                  "default": "0"
              },
              {
                  "option": "--mine",
                  "description": "Enable mining (deprecated)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--miner.etherbase",
                  "description": "0x prefixed public address for block mining rewards (deprecated)",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--miner.extradata",
                  "description": "Block extra data set by the miner (default = client version)"
              },
              {
                  "option": "--miner.gaslimit",
                  "description": "Target gas ceiling for mined blocks",
                  "default": "30000000"
              },
              {
                  "option": "--miner.gasprice",
                  "description": "Minimum gas price for mining a transaction",
                  "default": "0"
              },
              {
                  "option": "--miner.newpayload-timeout",
                  "description": "Specify the maximum time allowance for creating a new payload (deprecated)",
                  "default": "2s",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--miner.pending.feeRecipient",
                  "description": "0x prefixed public address for the pending block producer (not used for actual block production)"
              },
              {
                  "option": "--miner.recommit",
                  "description": "Time interval to recreate the block being mined",
                  "default": "2s"
              },
              {
                  "option": "--nat",
                  "description": "NAT port mapping mechanism (any|none|upnp|pmp|pmp:<IP>|extip:<IP>)",
                  "default": "any"
              },
              {
                  "option": "--netrestrict",
                  "description": "Restricts network communication to the given IP networks (CIDR masks)"
              },
              {
                  "option": "--networkid",
                  "description": "Explicitly set network id (integer)(For testnets: use --sepolia, --holesky instead)",
                  "default": "0"
              },
              {
                  "option": "--nodekey",
                  "description": "P2P node key file"
              },
              {
                  "option": "--nodekeyhex",
                  "description": "P2P node key as hex (for testing)"
              },
              {
                  "option": "--nodiscover",
                  "description": "Disables the peer discovery mechanism (manual peer addition)",
                  "default": "false"
              },
              {
                  "option": "--nousb",
                  "description": "Disables monitoring for and managing USB hardware wallets (deprecated)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--nocompaction",
                  "description": "Disables db compaction after import",
                  "default": "false"
              },
              {
                  "option": "--override.cancun",
                  "description": "Manually specify the Cancun fork timestamp, overriding the bundled setting",
                  "default": "0"
              },
              {
                  "option": "--override.verkle",
                  "description": "Manually specify the Verkle fork timestamp, overriding the bundled setting",
                  "default": "0"
              },
              {
                  "option": "--password",
                  "description": "Password file to use for non-interactive password input"
              },
              {
                  "option": "--pcscdpath",
                  "description": "Path to the smartcard daemon (pcscd) socket file",
                  "default": "/run/pcscd/pcscd.comm"
              },
              {
                  "option": "--port",
                  "description": "Network listening port",
                  "default": "30303"
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database"
              },
              {
                  "option": "--rpc.allow-unprotected-txs",
                  "description": "Allow for unprotected (non EIP155 signed) transactions to be submitted via RPC",
                  "default": "false"
              },
              {
                  "option": "--rpc.batch-request-limit",
                  "description": "Maximum number of requests in a batch",
                  "default": "1000"
              },
              {
                  "option": "--rpc.batch-response-max-size",
                  "description": "Maximum number of bytes returned from a batched call",
                  "default": "25000000"
              },
              {
                  "option": "--rpc.enabledeprecatedpersonal",
                  "description": "This used to enable the 'personal' namespace.",
                  "default": "false"
              },
              {
                  "option": "--rpc.evmtimeout",
                  "description": "Sets a timeout used for eth_call (0=infinite)",
                  "default": "5s"
              },
              {
                  "option": "--rpc.gascap",
                  "description": "Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite)",
                  "default": "50000000"
              },
              {
                  "option": "--rpc.txfeecap",
                  "description": "Sets a cap on transaction fee (in ether) that can be sent via the RPC APIs (0 = no cap)",
                  "default": "1"
              },
              {
                  "option": "--sepolia",
                  "description": "Sepolia network: pre-configured proof-of-work test network",
                  "default": "false"
              },
              {
                  "option": "--signer",
                  "description": "External signer (url or path to ipc file)"
              },
              {
                  "option": "--snapshot",
                  "description": "Enables snapshot-database mode (default = enable)",
                  "default": "true"
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')"
              },
              {
                  "option": "--syncmode",
                  "description": "Blockchain sync mode (\"snap\" or \"full\")",
                  "default": "snap"
              },
              {
                  "option": "--synctarget",
                  "description": "Hash of the block to full sync to (dev testing feature)"
              },
              {
                  "option": "--txlookuplimit",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain) (deprecated, use history.transactions instead)",
                  "default": "2350000",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--txpool.accountqueue",
                  "description": "Maximum number of non-executable transaction slots permitted per account",
                  "default": "64"
              },
              {
                  "option": "--txpool.accountslots",
                  "description": "Minimum number of executable transaction slots guaranteed per account",
                  "default": "16"
              },
              {
                  "option": "--txpool.globalqueue",
                  "description": "Maximum number of non-executable transaction slots for all accounts",
                  "default": "1024"
              },
              {
                  "option": "--txpool.globalslots",
                  "description": "Maximum number of executable transaction slots for all accounts",
                  "default": "5120"
              },
              {
                  "option": "--txpool.journal",
                  "description": "Disk journal for local transaction to survive node restarts",
                  "default": "transactions.rlp"
              },
              {
                  "option": "--txpool.lifetime",
                  "description": "Maximum amount of time non-executable transaction are queued",
                  "default": "3h0m0s"
              },
              {
                  "option": "--txpool.locals",
                  "description": "Comma separated accounts to treat as locals (no flush, priority inclusion)"
              },
              {
                  "option": "--txpool.nolocals",
                  "description": "Disables price exemptions for locally submitted transactions",
                  "default": "false"
              },
              {
                  "option": "--txpool.pricebump",
                  "description": "Price bump percentage to replace an already existing transaction",
                  "default": "10"
              },
              {
                  "option": "--txpool.pricelimit",
                  "description": "Minimum gas price tip to enforce for acceptance into the pool",
                  "default": "1"
              },
              {
                  "option": "--txpool.rejournal",
                  "description": "Time interval to regenerate the local transaction journal",
                  "default": "1h0m0s"
              },
              {
                  "option": "--unlock",
                  "description": "Comma separated list of accounts to unlock (deprecated)",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--usb",
                  "description": "Enable monitoring and management of USB hardware wallets",
                  "default": "false"
              },
              {
                  "option": "--v5disc",
                  "description": "Enables the experimental RLPx V5 (Topic Discovery) mechanism (deprecated, use --discv5 instead)",
                  "default": "false",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--vmdebug",
                  "description": "Record information useful for VM and contract debugging",
                  "default": "false"
              },
              {
                  "option": "--vmtrace",
                  "description": "Name of tracer which should record internal VM operations (costly)"
              },
              {
                  "option": "--vmtrace.jsonconfig",
                  "description": "Tracer configuration (JSON)",
                  "default": "{}"
              },
              {
                  "option": "--whitelist",
                  "description": "Comma separated block number-to-hash mappings to enforce (<number>=<hash>) (deprecated in favor of --eth.requiredblocks)",
                  "tags": [
                      "deprecated"
                  ]
              },
              {
                  "option": "--ws",
                  "description": "Enable the WS-RPC server",
                  "default": "false"
              },
              {
                  "option": "--ws.addr",
                  "description": "WS-RPC server listening interface",
                  "default": "localhost"
              },
              {
                  "option": "--ws.api",
                  "description": "API's offered over the WS-RPC interface"
              },
              {
                  "option": "--ws.origins",
                  "description": "Origins from which to accept websockets requests"
              },
              {
                  "option": "--ws.port",
                  "description": "WS-RPC server listening port",
                  "default": "8546"
              },
              {
                  "option": "--ws.rpcprefix",
                  "description": "HTTP path prefix on which JSON-RPC is served. Use '/' to serve on all paths."
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth dumpgenesis",
          "description": "Dumps genesis block JSON configuration to stdout",
          "usage": "geth dumpgenesis [command options] [arguments...]",
          "options": [
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "value": "value",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--holesky",
                  "description": "Holesky network: pre-configured proof-of-stake test network",
                  "default": "false",
                  "tags": [
                      "$GETH_HOLESKY"
                  ]
              },
              {
                  "option": "--mainnet",
                  "description": "Ethereum mainnet",
                  "default": "false",
                  "tags": [
                      "$GETH_MAINNET"
                  ]
              },
              {
                  "option": "--sepolia",
                  "description": "Sepolia network: pre-configured proof-of-work test network",
                  "default": "false",
                  "tags": [
                      "$GETH_SEPOLIA"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth export",
          "description": "Export blockchain into file. Requires a first argument of the file to write to. Optional second and third arguments control the first and last block to write. In this mode, the file will be appended if already existing. If the file ends with .gz, the output will be gzipped.",
          "usage": "geth export [command options] <filename> [<blockNumFirst> <blockNumLast>]",
          "options": [
              {
                  "option": "--cache",
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "default": "1024",
                  "tags": [
                      "PERFORMANCE TUNING",
                      "$GETH_CACHE"
                  ]
              },
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "ETHEREUM",
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "tags": [
                      "ETHEREUM",
                      "$GETH_DATADIR_ANCIENT"
                  ]
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "tags": [
                      "ETHEREUM",
                      "$GETH_DB_ENGINE"
                  ]
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "tags": [
                      "API AND CONSOLE",
                      "$GETH_HEADER"
                  ]
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database",
                  "tags": [
                      "LOGGING AND DEBUGGING",
                      "$GETH_REMOTEDB"
                  ]
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "tags": [
                      "STATE HISTORY MANAGEMENT",
                      "$GETH_STATE_SCHEME"
                  ]
              },
              {
                  "option": "--syncmode",
                  "description": "Blockchain sync mode (\"snap\" or \"full\")",
                  "default": "\"snap\"",
                  "tags": [
                      "STATE HISTORY MANAGEMENT",
                      "$GETH_SYNCMODE"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth export-history",
          "description": "Export blockchain history to Era archives",
          "usage": "geth export-history [command options] <dir> <first> <last>",
          "options": [
              {
                  "default": "/home/ahmad/.ethereum",
                  "description": "Data directory for the databases and keystore",
                  "option": "--datadir",
                  "tags": [
                      "$GETH_DATADIR"
                  ],
                  "value": "value"
              },
              {
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "option": "--datadir.ancient",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ],
                  "value": "value"
              },
              {
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "option": "--db.engine",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ],
                  "value": "value"
              },
              {
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "option": "--header",
                  "shortcut": "-H",
                  "tags": [
                      "$GETH_HEADER"
                  ],
                  "value": "value"
              },
              {
                  "description": "URL for remote database",
                  "option": "--remotedb",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ],
                  "value": "value"
              },
              {
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "option": "--state.scheme",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ],
                  "value": "value"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth import",
          "description": "Import a blockchain file",
          "usage": "geth import [command options] <filename> (<filename 2> ... <filename N>)",
          "options": [
              {
                  "option": "--cache",
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "value": "value",
                  "default": "1024",
                  "tags": [
                      "$GETH_CACHE"
                  ]
              },
              {
                  "option": "--cache.database",
                  "description": "Percentage of cache memory allowance to use for database io",
                  "value": "value",
                  "default": "50",
                  "tags": [
                      "$GETH_CACHE_DATABASE"
                  ]
              },
              {
                  "option": "--cache.gc",
                  "description": "Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode)",
                  "value": "value",
                  "default": "25",
                  "tags": [
                      "$GETH_CACHE_GC"
                  ]
              },
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "value": "value",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "value": "value",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ]
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "value": "value",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ]
              },
              {
                  "option": "--gcmode",
                  "description": "Blockchain garbage collection mode, only relevant in state.scheme=hash ('full', 'archive')",
                  "value": "value",
                  "default": "full",
                  "tags": [
                      "$GETH_GCMODE"
                  ]
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "value": "value",
                  "tags": [
                      "$GETH_HEADER"
                  ]
              },
              {
                  "option": "--history.state",
                  "description": "Number of recent blocks to retain state history for (default = 90,000 blocks, 0 = entire chain)",
                  "value": "value",
                  "default": "90000",
                  "tags": [
                      "$GETH_HISTORY_STATE"
                  ]
              },
              {
                  "option": "--history.transactions",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain)",
                  "value": "value",
                  "default": "2350000",
                  "tags": [
                      "$GETH_HISTORY_TRANSACTIONS"
                  ]
              },
              {
                  "option": "--metrics",
                  "description": "Enable metrics collection and reporting",
                  "default": "false",
                  "tags": [
                      "$GETH_METRICS"
                  ]
              },
              {
                  "option": "--metrics.addr",
                  "description": "Enable stand-alone metrics HTTP server listening interface.",
                  "value": "value",
                  "tags": [
                      "$GETH_METRICS_ADDR"
                  ]
              },
              {
                  "option": "--metrics.expensive",
                  "description": "Enable expensive metrics collection and reporting (deprecated)",
                  "default": "false",
                  "tags": [
                      "$GETH_METRICS_EXPENSIVE"
                  ]
              },
              {
                  "option": "--metrics.influxdb",
                  "description": "Enable metrics export/push to an external InfluxDB database",
                  "default": "false",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB"
                  ]
              },
              {
                  "option": "--metrics.influxdb.bucket",
                  "description": "InfluxDB bucket name to push reported metrics to (v2 only)",
                  "value": "value",
                  "default": "geth",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_BUCKET"
                  ]
              },
              {
                  "option": "--metrics.influxdb.database",
                  "description": "InfluxDB database name to push reported metrics to",
                  "value": "value",
                  "default": "geth",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_DATABASE"
                  ]
              },
              {
                  "option": "--metrics.influxdb.endpoint",
                  "description": "InfluxDB API endpoint to report metrics to",
                  "value": "value",
                  "default": "http://localhost:8086",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_ENDPOINT"
                  ]
              },
              {
                  "option": "--metrics.influxdb.organization",
                  "description": "InfluxDB organization name (v2 only)",
                  "value": "value",
                  "default": "geth",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_ORGANIZATION"
                  ]
              },
              {
                  "option": "--metrics.influxdb.password",
                  "description": "Password to authorize access to the database",
                  "value": "value",
                  "default": "test",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_PASSWORD"
                  ]
              },
              {
                  "option": "--metrics.influxdb.tags",
                  "description": "Comma-separated InfluxDB tags (key/values) attached to all measurements",
                  "value": "value",
                  "default": "host=localhost",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_TAGS"
                  ]
              },
              {
                  "option": "--metrics.influxdb.token",
                  "description": "Token to authorize access to the database (v2 only)",
                  "value": "value",
                  "default": "test",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_TOKEN"
                  ]
              },
              {
                  "option": "--metrics.influxdb.username",
                  "description": "Username to authorize access to the database",
                  "value": "value",
                  "default": "test",
                  "tags": [
                      "$GETH_METRICS_INFLUXDB_USERNAME"
                  ]
              },
              {
                  "option": "--metrics.influxdbv2",
                  "description": "Enable metrics export/push to an external InfluxDB v2 database",
                  "default": "false",
                  "tags": [
                      "$GETH_METRICS_INFLUXDBV2"
                  ]
              },
              {
                  "option": "--metrics.port",
                  "description": "Metrics HTTP server listening port. Please note that --metrics.addr must be set to start the server.",
                  "value": "value",
                  "default": "6060",
                  "tags": [
                      "$GETH_METRICS_PORT"
                  ]
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database",
                  "value": "value",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ]
              },
              {
                  "option": "--snapshot",
                  "description": "Enables snapshot-database mode (default = enable)",
                  "default": "true",
                  "tags": [
                      "$GETH_SNAPSHOT"
                  ]
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "value": "value",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ]
              },
              {
                  "option": "--syncmode",
                  "description": "Blockchain sync mode ('snap' or 'full')",
                  "value": "value",
                  "default": "snap",
                  "tags": [
                      "$GETH_SYNCMODE"
                  ]
              },
              {
                  "option": "--txlookuplimit",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain) (deprecated, use history.transactions instead)",
                  "value": "value",
                  "default": "2350000",
                  "tags": [
                      "$GETH_TXLOOKUPLIMIT"
                  ]
              },
              {
                  "option": "--vmtrace",
                  "description": "Name of tracer which should record internal VM operations (costly)",
                  "value": "value",
                  "tags": [
                      "$GETH_VMTRACE"
                  ]
              },
              {
                  "option": "--vmtrace.jsonconfig",
                  "description": "Tracer configuration (JSON)",
                  "value": "value",
                  "default": "{}",
                  "tags": [
                      "$GETH_VMTRACE_JSONCONFIG"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth import-history",
          "description": "The import-history command will import blocks and their corresponding receipts from Era archives.",
          "usage": "geth import-history [command options] <dir>",
          "options": [
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "value": "value",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "value": "value",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ]
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "value": "value",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ]
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "value": "value",
                  "tags": [
                      "$GETH_HEADER"
                  ]
              },
              {
                  "option": "--holesky",
                  "description": "Holesky network: pre-configured proof-of-stake test network",
                  "default": "false",
                  "tags": [
                      "$GETH_HOLESKY"
                  ]
              },
              {
                  "option": "--mainnet",
                  "description": "Ethereum mainnet",
                  "default": "false",
                  "tags": [
                      "$GETH_MAINNET"
                  ]
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database",
                  "value": "value",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ]
              },
              {
                  "option": "--sepolia",
                  "description": "Sepolia network: pre-configured proof-of-work test network",
                  "default": "false",
                  "tags": [
                      "$GETH_SEPOLIA"
                  ]
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "value": "value",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ]
              },
              {
                  "option": "--txlookuplimit",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain) (deprecated, use history.transactions instead)",
                  "value": "value",
                  "default": "2350000",
                  "tags": [
                      "$GETH_TXLOOKUPLIMIT"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth import-preimages",
          "description": "The import-preimages command imports hash preimages from an RLP encoded stream. It's deprecated, please use \"geth db import\" instead.",
          "usage": "geth import-preimages [command options] <datafile>",
          "options": [
              {
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "option": "--header",
                  "shortcut": "-H",
                  "tags": [
                      "API AND CONSOLE"
                  ],
                  "value": "value"
              },
              {
                  "default": "/home/ahmad/.ethereum",
                  "description": "Data directory for the databases and keystore",
                  "option": "--datadir",
                  "tags": [
                      "ETHEREUM"
                  ],
                  "value": "value"
              },
              {
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "option": "--datadir.ancient",
                  "tags": [
                      "ETHEREUM"
                  ],
                  "value": "value"
              },
              {
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "option": "--db.engine",
                  "tags": [
                      "ETHEREUM"
                  ],
                  "value": "value"
              },
              {
                  "description": "URL for remote database",
                  "option": "--remotedb",
                  "tags": [
                      "LOGGING AND DEBUGGING"
                  ],
                  "value": "value"
              },
              {
                  "default": 1024,
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "option": "--cache",
                  "tags": [
                      "PERFORMANCE TUNING"
                  ],
                  "value": "value"
              },
              {
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "option": "--state.scheme",
                  "tags": [
                      "STATE HISTORY MANAGEMENT"
                  ],
                  "value": "value"
              },
              {
                  "default": "snap",
                  "description": "Blockchain sync mode (\"snap\" or \"full\")",
                  "option": "--syncmode",
                  "tags": [
                      "STATE HISTORY MANAGEMENT"
                  ],
                  "value": "value"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth init",
          "description": "The init command initializes a new genesis block and definition for the network. This is a destructive action and changes the network in which you will be participating. It expects the genesis file as argument.",
          "usage": "geth init [command options] <genesisPath>",
          "options": [
              {
                  "option": "--cache.preimages",
                  "description": "Enable recording the SHA3/keccak preimages of trie keys",
                  "default": "false",
                  "tags": [
                      "$GETH_CACHE_PREIMAGES"
                  ]
              },
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "value": "value",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "value": "value",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ]
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "value": "value",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ]
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "value": "value",
                  "tags": [
                      "$GETH_HEADER"
                  ]
              },
              {
                  "option": "--override.cancun",
                  "description": "Manually specify the Cancun fork timestamp, overriding the bundled setting",
                  "value": "value",
                  "default": "0",
                  "tags": [
                      "$GETH_OVERRIDE_CANCUN"
                  ]
              },
              {
                  "option": "--override.verkle",
                  "description": "Manually specify the Verkle fork timestamp, overriding the bundled setting",
                  "value": "value",
                  "default": "0",
                  "tags": [
                      "$GETH_OVERRIDE_VERKLE"
                  ]
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database",
                  "value": "value",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ]
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "value": "value",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth js",
          "description": "(DEPRECATED) Execute the specified JavaScript files",
          "usage": "geth js [command options] <jsfile> [jsfile...]",
          "options": [
              {
                  "option": "--beacon.api",
                  "description": "Beacon node (CL) light client API URL. This flag can be given multiple times."
              },
              {
                  "option": "--beacon.api.header",
                  "description": "Pass custom HTTP header fields to the remote beacon node API in \"key:value\" format. This flag can be given multiple times."
              },
              {
                  "option": "--beacon.checkpoint",
                  "description": "Beacon chain weak subjectivity checkpoint block hash"
              },
              {
                  "option": "--beacon.config",
                  "description": "Beacon chain config YAML file"
              },
              {
                  "option": "--beacon.genesis.gvroot",
                  "description": "Beacon chain genesis validators root"
              },
              {
                  "option": "--beacon.genesis.time",
                  "value": "0",
                  "description": "Beacon chain genesis time",
                  "default": "0"
              },
              {
                  "option": "--beacon.nofilter",
                  "description": "Disable future slot signature filter",
                  "default": "false"
              },
              {
                  "option": "--beacon.threshold",
                  "value": "342",
                  "description": "Beacon sync committee participation threshold",
                  "default": "342"
              },
              {
                  "option": "--bloomfilter.size",
                  "value": "2048",
                  "description": "Megabytes of memory allocated to bloom-filter for pruning",
                  "default": "2048"
              },
              {
                  "option": "--blobpool.datacap",
                  "value": "2684354560",
                  "description": "Disk space to allocate for pending blob transactions (soft limit)",
                  "default": "2684354560"
              },
              {
                  "option": "--blobpool.datadir",
                  "value": "blobpool",
                  "description": "Data directory to store blob transactions in",
                  "default": "blobpool"
              },
              {
                  "option": "--blobpool.pricebump",
                  "value": "100",
                  "description": "Price bump percentage to replace an already existing blob transaction",
                  "default": "100"
              },
              {
                  "option": "--bootnodes",
                  "description": "Comma separated enode URLs for P2P discovery bootstrap"
              },
              {
                  "option": "--cache",
                  "value": "1024",
                  "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
                  "default": "1024"
              },
              {
                  "option": "--cache.blocklogs",
                  "value": "32",
                  "description": "Size (in number of blocks) of the log cache for filtering",
                  "default": "32"
              },
              {
                  "option": "--cache.database",
                  "value": "50",
                  "description": "Percentage of cache memory allowance to use for database io",
                  "default": "50"
              },
              {
                  "option": "--cache.gc",
                  "value": "25",
                  "description": "Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode)",
                  "default": "25"
              },
              {
                  "option": "--cache.noprefetch",
                  "description": "Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data)",
                  "default": "false"
              },
              {
                  "option": "--cache.preimages",
                  "description": "Enable recording the SHA3/keccak preimages of trie keys",
                  "default": "false"
              },
              {
                  "option": "--cache.snapshot",
                  "value": "10",
                  "description": "Percentage of cache memory allowance to use for snapshot caching (default = 10% full mode, 20% archive mode)",
                  "default": "10"
              },
              {
                  "option": "--cache.trie",
                  "value": "15",
                  "description": "Percentage of cache memory allowance to use for trie caching (default = 15% full mode, 30% archive mode)",
                  "default": "15"
              },
              {
                  "option": "--cache.trie.journal",
                  "description": "Disk journal directory for trie cache to survive node restarts"
              },
              {
                  "option": "--cache.trie.rejournal",
                  "value": "0s",
                  "description": "Time interval to regenerate the trie cache journal",
                  "default": "0s"
              },
              {
                  "option": "--config",
                  "description": "TOML configuration file"
              },
              {
                  "option": "--crypto.kzg",
                  "description": "KZG library implementation to use; gokzg (recommended) or ckzg",
                  "default": "gokzg"
              },
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "default": "/home/ahmad/.ethereum"
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)"
              },
              {
                  "option": "--datadir.minfreedisk",
                  "description": "Minimum free disk space in MB, once reached triggers auto shut down (default = --cache.gc converted to MB, 0 = disabled)"
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')"
              },
              {
                  "option": "--dev",
                  "description": "Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled",
                  "default": "false"
              },
              {
                  "option": "--dev.gaslimit",
                  "value": "11500000",
                  "description": "Initial block gas limit",
                  "default": "11500000"
              },
              {
                  "option": "--dev.period",
                  "value": "0",
                  "description": "Block period to use in developer mode (0 = mine only if transaction pending)",
                  "default": "0"
              },
              {
                  "option": "--discovery.dns",
                  "description": "Sets DNS discovery entry points (use \"\" to disable DNS)"
              },
              {
                  "option": "--discovery.port",
                  "value": "30303",
                  "description": "Use a custom UDP port for P2P discovery",
                  "default": "30303"
              },
              {
                  "option": "--discovery.v4",
                  "description": "Enables the V4 discovery mechanism",
                  "default": "true"
              },
              {
                  "option": "--discovery.v5",
                  "description": "Enables the V5 discovery mechanism",
                  "default": "true"
              },
              {
                  "option": "--eth.requiredblocks",
                  "description": "Comma separated block number-to-hash mappings to require for peering (<number>=<hash>)"
              },
              {
                  "option": "--ethstats",
                  "description": "Reporting URL of a ethstats service (nodename:secret@host:port)"
              },
              {
                  "option": "--exec",
                  "description": "Execute JavaScript statement"
              },
              {
                  "option": "--exitwhensynced",
                  "description": "Exits after block synchronisation completes",
                  "default": "false"
              },
              {
                  "option": "--fdlimit",
                  "value": "0",
                  "description": "Raise the open file descriptor resource limit (default = system fd limit)",
                  "default": "0"
              },
              {
                  "option": "--gcmode",
                  "value": "full",
                  "description": "Blockchain garbage collection mode, only relevant in state.scheme=hash (\"full\", \"archive\")",
                  "default": "full"
              },
              {
                  "option": "--gpo.blocks",
                  "value": "20",
                  "description": "Number of recent blocks to check for gas prices",
                  "default": "20"
              },
              {
                  "option": "--gpo.ignoreprice",
                  "value": "2",
                  "description": "Gas price below which gpo will ignore transactions",
                  "default": "2"
              },
              {
                  "option": "--gpo.maxprice",
                  "value": "500000000000",
                  "description": "Maximum transaction priority fee (or gasprice before London fork) to be recommended by gpo",
                  "default": "500000000000"
              },
              {
                  "option": "--gpo.percentile",
                  "value": "60",
                  "description": "Suggested gas price is the given percentile of a set of recent transaction gas prices",
                  "default": "60"
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times."
              },
              {
                  "option": "--history.state",
                  "value": "90000",
                  "description": "Number of recent blocks to retain state history for (default = 90,000 blocks, 0 = entire chain)",
                  "default": "90000"
              },
              {
                  "option": "--history.transactions",
                  "value": "2350000",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain)",
                  "default": "2350000"
              },
              {
                  "option": "--holesky",
                  "description": "Holesky network: pre-configured proof-of-stake test network",
                  "default": "false"
              },
              {
                  "option": "--identity",
                  "description": "Custom node name"
              },
              {
                  "option": "--jspath",
                  "description": "JavaScript root path for `loadScript`",
                  "default": "."
              },
              {
                  "option": "--keystore",
                  "description": "Directory for the keystore (default = inside the datadir)"
              },
              {
                  "option": "--light.egress",
                  "value": "0",
                  "description": "Outgoing bandwidth limit for serving light clients (deprecated)",
                  "default": "0"
              },
              {
                  "option": "--light.ingress",
                  "value": "0",
                  "description": "Incoming bandwidth limit for serving light clients (deprecated)",
                  "default": "0"
              },
              {
                  "option": "--light.maxpeers",
                  "value": "0",
                  "description": "Maximum number of light clients to serve, or light servers to attach to (deprecated)",
                  "default": "0"
              },
              {
                  "option": "--light.nopruning",
                  "description": "Disable ancient light chain data pruning (deprecated)",
                  "default": "false"
              },
              {
                  "option": "--light.nosyncserve",
                  "description": "Enables serving light clients before syncing (deprecated)",
                  "default": "false"
              },
              {
                  "option": "--light.serve",
                  "value": "0",
                  "description": "Maximum percentage of time allowed for serving LES requests (deprecated)",
                  "default": "0"
              },
              {
                  "option": "--lightkdf",
                  "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                  "default": "false"
              },
              {
                  "option": "--log.backtrace",
                  "description": "Request a stack trace at a specific logging statement (deprecated)"
              },
              {
                  "option": "--log.debug",
                  "description": "Prepends log messages with call-site location (deprecated)",
                  "default": "false"
              },
              {
                  "option": "--mainnet",
                  "description": "Ethereum mainnet",
                  "default": "false"
              },
              {
                  "option": "--maxpeers",
                  "value": "50",
                  "description": "Maximum number of network peers (network disabled if set to 0)",
                  "default": "50"
              },
              {
                  "option": "--maxpendpeers",
                  "value": "0",
                  "description": "Maximum number of pending connection attempts (defaults used if set to 0)",
                  "default": "0"
              },
              {
                  "option": "--mine",
                  "description": "Enable mining (deprecated)",
                  "default": "false"
              },
              {
                  "option": "--miner.etherbase",
                  "description": "0x prefixed public address for block mining rewards (deprecated)"
              },
              {
                  "option": "--miner.extradata",
                  "description": "Block extra data set by the miner (default = client version)"
              },
              {
                  "option": "--miner.gaslimit",
                  "value": "30000000",
                  "description": "Target gas ceiling for mined blocks",
                  "default": "30000000"
              },
              {
                  "option": "--miner.gasprice",
                  "value": "0",
                  "description": "Minimum gas price for mining a transaction",
                  "default": "0"
              },
              {
                  "option": "--miner.newpayload-timeout",
                  "value": "2s",
                  "description": "Specify the maximum time allowance for creating a new payload (deprecated)",
                  "default": "2s"
              },
              {
                  "option": "--miner.pending.feeRecipient",
                  "description": "0x prefixed public address for the pending block producer (not used for actual block production)"
              },
              {
                  "option": "--miner.recommit",
                  "value": "2s",
                  "description": "Time interval to recreate the block being mined",
                  "default": "2s"
              },
              {
                  "option": "--nat",
                  "description": "NAT port mapping mechanism (any|none|upnp|pmp|pmp:<IP>|extip:<IP>)",
                  "default": "any"
              },
              {
                  "option": "--netrestrict",
                  "description": "Restricts network communication to the given IP networks (CIDR masks)"
              },
              {
                  "option": "--networkid",
                  "value": "0",
                  "description": "Explicitly set network id (integer)(For testnets: use --sepolia, --holesky instead)",
                  "default": "0"
              },
              {
                  "option": "--nodekey",
                  "description": "P2P node key file"
              },
              {
                  "option": "--nodekeyhex",
                  "description": "P2P node key as hex (for testing)"
              },
              {
                  "option": "--nodiscover",
                  "description": "Disables the peer discovery mechanism (manual peer addition)",
                  "default": "false"
              },
              {
                  "option": "--nousb",
                  "description": "Disables monitoring for and managing USB hardware wallets (deprecated)",
                  "default": "false"
              },
              {
                  "option": "--nocompaction",
                  "description": "Disables db compaction after import",
                  "default": "false"
              },
              {
                  "option": "--override.cancun",
                  "value": "0",
                  "description": "Manually specify the Cancun fork timestamp, overriding the bundled setting",
                  "default": "0"
              },
              {
                  "option": "--override.verkle",
                  "value": "0",
                  "description": "Manually specify the Verkle fork timestamp, overriding the bundled setting",
                  "default": "0"
              },
              {
                  "option": "--password",
                  "description": "Password file to use for non-interactive password input"
              },
              {
                  "option": "--pcscdpath",
                  "description": "Path to the smartcard daemon (pcscd) socket file",
                  "default": "/run/pcscd/pcscd.comm"
              },
              {
                  "option": "--port",
                  "value": "30303",
                  "description": "Network listening port",
                  "default": "30303"
              },
              {
                  "option": "--preload",
                  "description": "Comma separated list of JavaScript files to preload into the console"
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database"
              },
              {
                  "option": "--rpc.enabledeprecatedpersonal",
                  "description": "This used to enable the 'personal' namespace.",
                  "default": "false"
              },
              {
                  "option": "--sepolia",
                  "description": "Sepolia network: pre-configured proof-of-work test network",
                  "default": "false"
              },
              {
                  "option": "--signer",
                  "description": "External signer (url or path to ipc file)"
              },
              {
                  "option": "--snapshot",
                  "description": "Enables snapshot-database mode (default = enable)",
                  "default": "true"
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')"
              },
              {
                  "option": "--syncmode",
                  "description": "Blockchain sync mode (\"snap\" or \"full\")",
                  "default": "snap"
              },
              {
                  "option": "--synctarget",
                  "description": "Hash of the block to full sync to (dev testing feature)"
              },
              {
                  "option": "--txlookuplimit",
                  "value": "2350000",
                  "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain) (deprecated, use history.transactions instead)",
                  "default": "2350000"
              },
              {
                  "option": "--txpool.accountqueue",
                  "value": "64",
                  "description": "Maximum number of non-executable transaction slots permitted per account",
                  "default": "64"
              },
              {
                  "option": "--txpool.accountslots",
                  "value": "16",
                  "description": "Minimum number of executable transaction slots guaranteed per account",
                  "default": "16"
              },
              {
                  "option": "--txpool.globalqueue",
                  "value": "1024",
                  "description": "Maximum number of non-executable transaction slots for all accounts",
                  "default": "1024"
              },
              {
                  "option": "--txpool.globalslots",
                  "value": "5120",
                  "description": "Maximum number of executable transaction slots for all accounts",
                  "default": "5120"
              },
              {
                  "option": "--txpool.journal",
                  "description": "Disk journal for local transaction to survive node restarts",
                  "default": "transactions.rlp"
              },
              {
                  "option": "--txpool.lifetime",
                  "description": "Maximum amount of time non-executable transaction are queued",
                  "default": "3h0m0s"
              },
              {
                  "option": "--txpool.locals",
                  "description": "Comma separated accounts to treat as locals (no flush, priority inclusion)"
              },
              {
                  "option": "--txpool.nolocals",
                  "description": "Disables price exemptions for locally submitted transactions",
                  "default": "false"
              },
              {
                  "option": "--txpool.pricebump",
                  "value": "10",
                  "description": "Price bump percentage to replace an already existing transaction",
                  "default": "10"
              },
              {
                  "option": "--txpool.pricelimit",
                  "value": "1",
                  "description": "Minimum gas price tip to enforce for acceptance into the pool",
                  "default": "1"
              },
              {
                  "option": "--txpool.rejournal",
                  "description": "Time interval to regenerate the local transaction journal",
                  "default": "1h0m0s"
              },
              {
                  "option": "--unlock",
                  "description": "Comma separated list of accounts to unlock (deprecated)"
              },
              {
                  "option": "--usb",
                  "description": "Enable monitoring and management of USB hardware wallets",
                  "default": "false"
              },
              {
                  "option": "--v5disc",
                  "description": "Enables the experimental RLPx V5 (Topic Discovery) mechanism (deprecated, use --discv5 instead)",
                  "default": "false"
              },
              {
                  "option": "--vmdebug",
                  "description": "Record information useful for VM and contract debugging",
                  "default": "false"
              },
              {
                  "option": "--vmtrace",
                  "description": "Name of tracer which should record internal VM operations (costly)"
              },
              {
                  "option": "--vmtrace.jsonconfig",
                  "description": "Tracer configuration (JSON)",
                  "default": "{}"
              },
              {
                  "option": "--whitelist",
                  "description": "Comma separated block number-to-hash mappings to enforce (<number>=<hash>) (deprecated in favor of --eth.requiredblocks)"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth license",
          "description": "Display license information",
          "usage": "geth license [command options]",
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth removedb",
          "description": "Remove blockchain and state databases",
          "usage": "geth removedb [command options] [arguments...]",
          "options": [
              {
                  "option": "--datadir",
                  "description": "Data directory for the databases and keystore",
                  "value": "value",
                  "default": "/home/ahmad/.ethereum",
                  "tags": [
                      "$GETH_DATADIR"
                  ]
              },
              {
                  "option": "--datadir.ancient",
                  "description": "Root directory for ancient data (default = inside chaindata)",
                  "value": "value",
                  "tags": [
                      "$GETH_DATADIR_ANCIENT"
                  ]
              },
              {
                  "option": "--db.engine",
                  "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                  "value": "value",
                  "tags": [
                      "$GETH_DB_ENGINE"
                  ]
              },
              {
                  "option": "--header",
                  "shortcut": "-H",
                  "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                  "value": "value",
                  "tags": [
                      "$GETH_HEADER"
                  ]
              },
              {
                  "option": "--remotedb",
                  "description": "URL for remote database",
                  "value": "value",
                  "tags": [
                      "$GETH_REMOTEDB"
                  ]
              },
              {
                  "option": "--remove.chain",
                  "description": "If set, selects the state data for removal",
                  "default": "false"
              },
              {
                  "option": "--remove.state",
                  "description": "If set, selects the state data for removal",
                  "default": "false"
              },
              {
                  "option": "--state.scheme",
                  "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                  "value": "value",
                  "tags": [
                      "$GETH_STATE_SCHEME"
                  ]
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth show-deprecated-flags",
          "description": "Show flags that have been deprecated and will soon be removed",
          "usage": "geth show-deprecated-flags [command options]",
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth snapshot",
          "description": "A set of commands based on the snapshot",
          "usage": "geth snapshot command [command options] [arguments...]",
          "subcommands": [
              {
                  "name": "geth snapshot check-dangling-storage",
                  "description": "Check that there is no 'dangling' snap storage",
                  "usage": "geth snapshot check-dangling-storage [command options] <root>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot dump",
                  "description": "This command is semantically equivalent to 'geth dump', but uses the snapshots as the backend data source, making this command a lot faster. The argument is interpreted as block number or hash. If none is provided, the latest block is used.",
                  "usage": "geth snapshot dump [command options] [? <blockHash> | <blockNum>]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--limit",
                          "description": "Max number of elements (0 = no limit)",
                          "default": "0"
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--nocode",
                          "description": "Exclude contract code (save db lookups)",
                          "default": "false"
                      },
                      {
                          "option": "--nostorage",
                          "description": "Exclude storage entries (save db lookups)",
                          "default": "false"
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--start",
                          "description": "Start position. Either a hash or address",
                          "default": "0x0000000000000000000000000000000000000000000000000000000000000000"
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot export-preimages",
                  "description": "The export-preimages command exports hash preimages to a flat file, in exactly the expected order for the overlay tree migration.",
                  "usage": "geth snapshot export-preimages [command options] <dumpfile> [<root>]",
                  "options": [
                      {
                          "description": "Data directory for the databases and keystore",
                          "option": "--datadir",
                          "default": "/home/ahmad/.ethereum",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "option": "--datadir.ancient",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "option": "--db.engine",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "description": "show help",
                          "option": "--help",
                          "shortcut": "-h",
                          "default": false
                      },
                      {
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "option": "--header",
                          "shortcut": "-H",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "description": "URL for remote database",
                          "option": "--remotedb",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "option": "--state.scheme",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot help, h",
                  "subcommands": [],
                  "options": []
              },
              {
                  "name": "geth snapshot inspect-account",
                  "description": "Check all snapshot layers for the specific account",
                  "usage": "geth snapshot inspect-account [command options] <address | hash>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot prune-state",
                  "description": "Prune stale ethereum state data based on the snapshot",
                  "usage": "geth snapshot prune-state [command options] <root>",
                  "options": [
                      {
                          "option": "--bloomfilter.size",
                          "description": "Megabytes of memory allocated to bloom-filter for pruning",
                          "default": "2048",
                          "tags": [
                              "$GETH_BLOOMFILTER_SIZE"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "tags": [
                              "$GETH_HEADER"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ],
                          "value": "value"
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ],
                          "value": "value"
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot traverse-rawstate",
                  "description": "Traverse the state with given root hash and perform detailed verification",
                  "usage": "geth snapshot traverse-rawstate [command options] <root>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot traverse-state",
                  "description": "Traverse the state with given root hash and perform quick verification",
                  "usage": "geth snapshot traverse-state [command options] <root>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth snapshot verify-state",
                  "description": "Recalculate state hash based on the snapshot for verification",
                  "usage": "geth snapshot verify-state [command options] <root>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              }
          ],
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ]
      },
      {
          "name": "geth verkle",
          "description": "A set of experimental verkle tree management commands",
          "usage": "geth verkle command [command options] [arguments...]",
          "subcommands": [
              {
                  "name": "geth verkle dump",
                  "description": "Dump a verkle tree to a DOT file",
                  "usage": "geth verkle dump [command options] <root> <key1> [<key 2> ...]",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              },
              {
                  "name": "geth verkle verify",
                  "description": "verify the conversion of a MPT into a verkle tree",
                  "usage": "geth verkle verify [command options] <root>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--datadir.ancient",
                          "description": "Root directory for ancient data (default = inside chaindata)",
                          "value": "value",
                          "tags": [
                              "$GETH_DATADIR_ANCIENT"
                          ]
                      },
                      {
                          "option": "--db.engine",
                          "description": "Backing database implementation to use ('pebble' or 'leveldb')",
                          "value": "value",
                          "tags": [
                              "$GETH_DB_ENGINE"
                          ]
                      },
                      {
                          "option": "--header",
                          "shortcut": "-H",
                          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times.",
                          "value": "value",
                          "tags": [
                              "$GETH_HEADER"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--holesky",
                          "description": "Holesky network: pre-configured proof-of-stake test network",
                          "default": "false",
                          "tags": [
                              "$GETH_HOLESKY"
                          ]
                      },
                      {
                          "option": "--mainnet",
                          "description": "Ethereum mainnet",
                          "default": "false",
                          "tags": [
                              "$GETH_MAINNET"
                          ]
                      },
                      {
                          "option": "--remotedb",
                          "description": "URL for remote database",
                          "value": "value",
                          "tags": [
                              "$GETH_REMOTEDB"
                          ]
                      },
                      {
                          "option": "--sepolia",
                          "description": "Sepolia network: pre-configured proof-of-work test network",
                          "default": "false",
                          "tags": [
                              "$GETH_SEPOLIA"
                          ]
                      },
                      {
                          "option": "--state.scheme",
                          "description": "Scheme to use for storing ethereum state ('hash' or 'path')",
                          "value": "value",
                          "tags": [
                              "$GETH_STATE_SCHEME"
                          ]
                      }
                  ],
                  "subcommands": []
              }
          ],
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ]
      },
      {
          "name": "geth version",
          "description": "Print version numbers",
          "usage": "geth version [command options]",
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth version-check",
          "description": "Checks (online) for known Geth security vulnerabilities",
          "usage": "geth version-check [command options] <versionstring (optional)>",
          "options": [
              {
                  "option": "--check.url",
                  "description": "URL to use when checking vulnerabilities",
                  "value": "value",
                  "default": "https://geth.ethereum.org/docs/vulnerabilities/vulnerabilities.json"
              },
              {
                  "option": "--check.version",
                  "description": "Version to check",
                  "value": "value",
                  "default": "Geth/v1.14.12-stable-293a300d/linux-amd64/go1.23.3"
              },
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": false
              }
          ],
          "subcommands": []
      },
      {
          "name": "geth wallet",
          "description": "Manage Ethereum presale wallets",
          "usage": "geth wallet command [command options] [arguments...]",
          "subcommands": [
              {
                  "name": "geth wallet import",
                  "description": "Import Ethereum presale wallet",
                  "usage": "geth wallet import [command options] <keyFile>",
                  "options": [
                      {
                          "option": "--datadir",
                          "description": "Data directory for the databases and keystore",
                          "value": "value",
                          "default": "/home/ahmad/.ethereum",
                          "tags": [
                              "$GETH_DATADIR"
                          ]
                      },
                      {
                          "option": "--help",
                          "shortcut": "-h",
                          "description": "show help",
                          "default": "false"
                      },
                      {
                          "option": "--keystore",
                          "description": "Directory for the keystore",
                          "value": "value",
                          "default": "inside the datadir",
                          "tags": [
                              "$GETH_KEYSTORE"
                          ]
                      },
                      {
                          "option": "--lightkdf",
                          "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
                          "default": "false",
                          "tags": [
                              "$GETH_LIGHTKDF"
                          ]
                      },
                      {
                          "option": "--password",
                          "description": "Password file to use for non-interactive password input",
                          "value": "value",
                          "tags": [
                              "$GETH_PASSWORD"
                          ]
                      }
                  ],
                  "subcommands": []
              }
          ],
          "options": [
              {
                  "option": "--help",
                  "shortcut": "-h",
                  "description": "show help",
                  "default": "false"
              }
          ]
      }
  ],
  "options": [
      {
          "option": "--allow-insecure-unlock",
          "description": "Allow insecure account unlocking when account-related RPCs are exposed by http (deprecated)",
          "default": "false"
      },
      {
          "option": "--authrpc.addr",
          "description": "Listening address for authenticated APIs",
          "default": "localhost"
      },
      {
          "option": "--authrpc.jwtsecret",
          "description": "Path to a JWT secret to use for authenticated RPC endpoints"
      },
      {
          "option": "--authrpc.port",
          "description": "Listening port for authenticated APIs",
          "default": "8551"
      },
      {
          "option": "--authrpc.vhosts",
          "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
          "default": "localhost"
      },
      {
          "option": "--beacon.api",
          "description": "Beacon node (CL) light client API URL. This flag can be given multiple times."
      },
      {
          "option": "--beacon.api.header",
          "description": "Pass custom HTTP header fields to the remote beacon node API in \"key:value\" format. This flag can be given multiple times."
      },
      {
          "option": "--beacon.checkpoint",
          "description": "Beacon chain weak subjectivity checkpoint block hash"
      },
      {
          "option": "--beacon.config",
          "description": "Beacon chain config YAML file"
      },
      {
          "option": "--beacon.genesis.gvroot",
          "description": "Beacon chain genesis validators root"
      },
      {
          "option": "--beacon.genesis.time",
          "description": "Beacon chain genesis time",
          "default": "0"
      },
      {
          "option": "--beacon.nofilter",
          "description": "Disable future slot signature filter",
          "default": "false"
      },
      {
          "option": "--beacon.threshold",
          "description": "Beacon sync committee participation threshold",
          "default": "342"
      },
      {
          "option": "--bloomfilter.size",
          "description": "Megabytes of memory allocated to bloom-filter for pruning",
          "default": "2048"
      },
      {
          "option": "--bootnodes",
          "description": "Comma separated enode URLs for P2P discovery bootstrap"
      },
      {
          "option": "--cache",
          "description": "Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode)",
          "default": "1024"
      },
      {
          "option": "--cache.blocklogs",
          "description": "Size (in number of blocks) of the log cache for filtering",
          "default": "32"
      },
      {
          "option": "--cache.database",
          "description": "Percentage of cache memory allowance to use for database io",
          "default": "50"
      },
      {
          "option": "--cache.gc",
          "description": "Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode)",
          "default": "25"
      },
      {
          "option": "--cache.noprefetch",
          "description": "Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data)",
          "default": "false"
      },
      {
          "option": "--cache.preimages",
          "description": "Enable recording the SHA3/keccak preimages of trie keys",
          "default": "false"
      },
      {
          "option": "--cache.snapshot",
          "description": "Percentage of cache memory allowance to use for snapshot caching (default = 10% full mode, 20% archive mode)",
          "default": "10"
      },
      {
          "option": "--cache.trie",
          "description": "Percentage of cache memory allowance to use for trie caching (default = 15% full mode, 30% archive mode)",
          "default": "15"
      },
      {
          "option": "--cache.trie.journal",
          "description": "Disk journal directory for trie cache to survive node restarts"
      },
      {
          "option": "--cache.trie.rejournal",
          "description": "Time interval to regenerate the trie cache journal",
          "default": "0s"
      },
      {
          "option": "--config",
          "description": "TOML configuration file"
      },
      {
          "option": "--crypto.kzg",
          "description": "KZG library implementation to use; gokzg (recommended) or ckzg",
          "default": "gokzg"
      },
      {
          "option": "--datadir",
          "description": "Data directory for the databases and keystore",
          "default": "/home/ahmad/.ethereum"
      },
      {
          "option": "--datadir.ancient",
          "description": "Root directory for ancient data (default = inside chaindata)"
      },
      {
          "option": "--datadir.minfreedisk",
          "description": "Minimum free disk space in MB, once reached triggers auto shut down (default = --cache.gc converted to MB, 0 = disabled)"
      },
      {
          "option": "--db.engine",
          "description": "Backing database implementation to use ('pebble' or 'leveldb')"
      },
      {
          "option": "--dev",
          "description": "Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled",
          "default": "false"
      },
      {
          "option": "--dev.gaslimit",
          "description": "Initial block gas limit",
          "default": "11500000"
      },
      {
          "option": "--dev.period",
          "description": "Block period to use in developer mode (0 = mine only if transaction pending)",
          "default": "0"
      },
      {
          "option": "--discovery.dns",
          "description": "Sets DNS discovery entry points (use \"\" to disable DNS)"
      },
      {
          "option": "--discovery.port",
          "description": "Use a custom UDP port for P2P discovery",
          "default": "30303"
      },
      {
          "option": "--discovery.v4",
          "shortcut": "--discv4",
          "description": "Enables the V4 discovery mechanism",
          "default": "true"
      },
      {
          "option": "--discovery.v5",
          "shortcut": "--discv5",
          "description": "Enables the V5 discovery mechanism",
          "default": "true"
      },
      {
          "option": "--eth.requiredblocks",
          "description": "Comma separated block number-to-hash mappings to require for peering (<number>=<hash>)"
      },
      {
          "option": "--ethstats",
          "description": "Reporting URL of a ethstats service (nodename:secret@host:port)"
      },
      {
          "option": "--exec",
          "description": "Execute JavaScript statement"
      },
      {
          "option": "--exitwhensynced",
          "description": "Exits after block synchronisation completes",
          "default": "false"
      },
      {
          "option": "--fdlimit",
          "description": "Raise the open file descriptor resource limit (default = system fd limit)",
          "default": "0"
      },
      {
          "option": "--gcmode",
          "description": "Blockchain garbage collection mode, only relevant in state.scheme=hash (\"full\", \"archive\")",
          "default": "full"
      },
      {
          "option": "--gpo.blocks",
          "description": "Number of recent blocks to check for gas prices",
          "default": "20"
      },
      {
          "option": "--gpo.ignoreprice",
          "description": "Gas price below which gpo will ignore transactions",
          "default": "2"
      },
      {
          "option": "--gpo.maxprice",
          "description": "Maximum transaction priority fee (or gasprice before London fork) to be recommended by gpo",
          "default": "500000000000"
      },
      {
          "option": "--gpo.percentile",
          "description": "Suggested gas price is the given percentile of a set of recent transaction gas prices",
          "default": "60"
      },
      {
          "option": "--graphql",
          "description": "Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well.",
          "default": "false"
      },
      {
          "option": "--graphql.corsdomain",
          "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)"
      },
      {
          "option": "--graphql.vhosts",
          "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
          "default": "localhost"
      },
      {
          "option": "--header",
          "shortcut": "-H",
          "description": "Pass custom headers to the RPC server when using --remotedb or the geth attach console. This flag can be given multiple times."
      },
      {
          "option": "--help",
          "shortcut": "-h",
          "description": "show help",
          "default": "false"
      },
      {
          "option": "--history.state",
          "description": "Number of recent blocks to retain state history for (default = 90,000 blocks, 0 = entire chain)",
          "default": "90000"
      },
      {
          "option": "--history.transactions",
          "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain)",
          "default": "2350000"
      },
      {
          "option": "--holesky",
          "description": "Holesky network: pre-configured proof-of-stake test network",
          "default": "false"
      },
      {
          "option": "--http",
          "description": "Enable the HTTP-RPC server",
          "default": "false"
      },
      {
          "option": "--http.addr",
          "description": "HTTP-RPC server listening interface",
          "default": "localhost"
      },
      {
          "option": "--http.api",
          "description": "API's offered over the HTTP-RPC interface"
      },
      {
          "option": "--http.corsdomain",
          "description": "Comma separated list of domains from which to accept cross origin requests (browser enforced)"
      },
      {
          "option": "--http.port",
          "description": "HTTP-RPC server listening port",
          "default": "8545"
      },
      {
          "option": "--http.rpcprefix",
          "description": "HTTP path prefix on which JSON-RPC is served. Use '/' to serve on all paths."
      },
      {
          "option": "--http.vhosts",
          "description": "Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard.",
          "default": "localhost"
      },
      {
          "option": "--identity",
          "description": "Custom node name"
      },
      {
          "option": "--import-preimages",
          "description": "Import the preimage database from an RLP stream"
      },
      {
          "option": "--init",
          "description": "Bootstrap and initialize a new genesis block"
      },
      {
          "option": "--ipcdisable",
          "description": "Disable the IPC-RPC server",
          "default": "false"
      },
      {
          "option": "--ipcpath",
          "description": "Filename for IPC socket/pipe within the datadir (explicit paths escape it)"
      },
      {
          "option": "--jspath",
          "description": "JavaScript root path for `loadScript`",
          "default": "."
      },
      {
          "option": "--keystore",
          "description": "Directory for the keystore (default = inside the datadir)",
          "value": "value"
      },
      {
          "option": "--light.egress",
          "description": "Outgoing bandwidth limit for serving light clients (deprecated)",
          "default": "0"
      },
      {
          "option": "--light.ingress",
          "description": "Incoming bandwidth limit for serving light clients (deprecated)",
          "default": "0"
      },
      {
          "option": "--light.maxpeers",
          "description": "Maximum number of light clients to serve, or light servers to attach to (deprecated)",
          "default": "0"
      },
      {
          "option": "--light.nopruning",
          "description": "Disable ancient light chain data pruning (deprecated)",
          "default": "false"
      },
      {
          "option": "--light.nosyncserve",
          "description": "Enables serving light clients before syncing (deprecated)",
          "default": "false"
      },
      {
          "option": "--light.serve",
          "description": "Maximum percentage of time allowed for serving LES requests (deprecated)",
          "default": "0"
      },
      {
          "option": "--lightkdf",
          "description": "Reduce key-derivation RAM & CPU usage at some expense of KDF strength",
          "default": "false"
      },
      {
          "option": "--log.backtrace",
          "description": "Request a stack trace at a specific logging statement (deprecated)"
      },
      {
          "option": "--log.compress",
          "description": "Compress the log files",
          "default": "false"
      },
      {
          "option": "--log.debug",
          "description": "Prepends log messages with call-site location (deprecated)",
          "default": "false"
      },
      {
          "option": "--log.file",
          "description": "Write logs to a file"
      },
      {
          "option": "--log.format",
          "description": "Log format to use (json|logfmt|terminal)"
      },
      {
          "option": "--log.maxage",
          "description": "Maximum number of days to retain a log file",
          "default": "30"
      },
      {
          "option": "--log.maxbackups",
          "description": "Maximum number of log files to retain",
          "default": "10"
      },
      {
          "option": "--log.maxsize",
          "description": "Maximum size in MBs of a single log file",
          "default": "100"
      },
      {
          "option": "--log.rotate",
          "description": "Enables log file rotation",
          "default": "false"
      },
      {
          "option": "--log.vmodule",
          "description": "Per-module verbosity: comma-separated list of <pattern>=<level> (e.g. eth/*=5,p2p=4)"
      },
      {
          "option": "--mainnet",
          "description": "Ethereum mainnet",
          "default": "false"
      },
      {
          "option": "--maxpeers",
          "description": "Maximum number of network peers (network disabled if set to 0)",
          "default": "50"
      },
      {
          "option": "--maxpendpeers",
          "description": "Maximum number of pending connection attempts (defaults used if set to 0)",
          "default": "0"
      },
      {
          "option": "--metrics",
          "description": "Enable metrics collection and reporting",
          "default": "false"
      },
      {
          "option": "--metrics.addr",
          "description": "Enable stand-alone metrics HTTP server listening interface."
      },
      {
          "option": "--metrics.expensive",
          "description": "Enable expensive metrics collection and reporting (deprecated)",
          "default": "false"
      },
      {
          "option": "--metrics.influxdb",
          "description": "Enable metrics export/push to an external InfluxDB database",
          "default": "false"
      },
      {
          "option": "--metrics.influxdb.bucket",
          "description": "InfluxDB bucket name to push reported metrics to (v2 only)",
          "default": "geth"
      },
      {
          "option": "--metrics.influxdb.database",
          "description": "InfluxDB database name to push reported metrics to",
          "default": "geth"
      },
      {
          "option": "--metrics.influxdb.endpoint",
          "description": "InfluxDB API endpoint to report metrics to",
          "default": "http://localhost:8086"
      },
      {
          "option": "--metrics.influxdb.organization",
          "description": "InfluxDB organization name (v2 only)",
          "default": "geth"
      },
      {
          "option": "--metrics.influxdb.password",
          "description": "Password to authorize access to the database",
          "default": "test"
      },
      {
          "option": "--metrics.influxdb.tags",
          "description": "Comma-separated InfluxDB tags (key/values) attached to all measurements",
          "default": "host=localhost"
      },
      {
          "option": "--metrics.influxdb.token",
          "description": "Token to authorize access to the database (v2 only)",
          "default": "test"
      },
      {
          "option": "--metrics.influxdb.username",
          "description": "Username to authorize access to the database",
          "default": "test"
      },
      {
          "option": "--metrics.influxdbv2",
          "description": "Enable metrics export/push to an external InfluxDB v2 database",
          "default": "false"
      },
      {
          "option": "--metrics.port",
          "description": "Metrics HTTP server listening port. Please note that --metrics.addr must be set to start the server.",
          "default": "6060"
      },
      {
          "option": "--mine",
          "description": "Enable mining (deprecated)",
          "default": "false"
      },
      {
          "option": "--miner.etherbase",
          "description": "0x prefixed public address for block mining rewards (deprecated)"
      },
      {
          "option": "--miner.extradata",
          "description": "Block extra data set by the miner (default = client version)"
      },
      {
          "option": "--miner.gaslimit",
          "description": "Target gas ceiling for mined blocks",
          "default": "30000000"
      },
      {
          "option": "--miner.gasprice",
          "description": "Minimum gas price for mining a transaction",
          "default": "1000000"
      },
      {
          "option": "--miner.newpayload-timeout",
          "description": "Specify the maximum time allowance for creating a new payload (deprecated)",
          "default": "2s"
      },
      {
          "option": "--miner.pending.feeRecipient",
          "description": "0x prefixed public address for the pending block producer (not used for actual block production)"
      },
      {
          "option": "--miner.recommit",
          "description": "Time interval to recreate the block being mined",
          "default": "2s"
      },
      {
          "option": "--nat",
          "description": "NAT port mapping mechanism (any|none|upnp|pmp|pmp:<IP>|extip:<IP>)",
          "default": "any"
      },
      {
          "option": "--networkid",
          "description": "Explicitly set network id (integer)(For testnets: use --sepolia, --holesky instead)",
          "default": "0"
      },
      {
          "option": "--netrestrict",
          "description": "Restricts network communication to the given IP networks (CIDR masks)"
      },
      {
          "option": "--nocompaction",
          "description": "Disables db compaction after import",
          "default": "false"
      },
      {
          "option": "--nodiscover",
          "description": "Disables the peer discovery mechanism (manual peer addition)",
          "default": "false"
      },
      {
          "option": "--nodekey",
          "description": "P2P node key file"
      },
      {
          "option": "--nodekeyhex",
          "description": "P2P node key as hex (for testing)"
      },
      {
          "option": "--nousb",
          "description": "Disables monitoring for and managing USB hardware wallets (deprecated)",
          "default": "false"
      },
      {
          "option": "--override.cancun",
          "description": "Manually specify the Cancun fork timestamp, overriding the bundled setting",
          "default": "0"
      },
      {
          "option": "--override.verkle",
          "description": "Manually specify the Verkle fork timestamp, overriding the bundled setting",
          "default": "0"
      },
      {
          "option": "--password",
          "description": "Password file to use for non-interactive password input"
      },
      {
          "option": "--pcscdpath",
          "description": "Path to the smartcard daemon (pcscd) socket file",
          "default": "/run/pcscd/pcscd.comm"
      },
      {
          "option": "--port",
          "description": "Network listening port",
          "default": "30303"
      },
      {
          "option": "--pprof",
          "description": "Enable the pprof HTTP server",
          "default": "false"
      },
      {
          "option": "--pprof.addr",
          "description": "pprof HTTP server listening interface",
          "default": "127.0.0.1"
      },
      {
          "option": "--pprof.blockprofilerate",
          "description": "Turn on block profiling with the given rate",
          "default": "0"
      },
      {
          "option": "--pprof.cpuprofile",
          "description": "Write CPU profile to the given file"
      },
      {
          "option": "--pprof.memprofilerate",
          "description": "Turn on memory profiling with the given rate",
          "default": "524288"
      },
      {
          "option": "--pprof.port",
          "description": "pprof HTTP server listening port",
          "default": "6060"
      },
      {
          "option": "--preload",
          "description": "Comma separated list of JavaScript files to preload into the console"
      },
      {
          "option": "--remotedb",
          "description": "URL for remote database"
      },
      {
          "option": "--rpc.allow-unprotected-txs",
          "description": "Allow for unprotected (non EIP155 signed) transactions to be submitted via RPC",
          "default": "false"
      },
      {
          "option": "--rpc.batch-request-limit",
          "description": "Maximum number of requests in a batch",
          "default": "1000"
      },
      {
          "option": "--rpc.batch-response-max-size",
          "description": "Maximum number of bytes returned from a batched call",
          "default": "25000000"
      },
      {
          "option": "--rpc.enabledeprecatedpersonal",
          "description": "This used to enable the 'personal' namespace.",
          "default": "false"
      },
      {
          "option": "--rpc.evmtimeout",
          "description": "Sets a timeout used for eth_call (0=infinite)",
          "default": "5s"
      },
      {
          "option": "--rpc.gascap",
          "description": "Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite)",
          "default": "50000000"
      },
      {
          "option": "--rpc.txfeecap",
          "description": "Sets a cap on transaction fee (in ether) that can be sent via the RPC APIs (0 = no cap)",
          "default": "1"
      },
      {
          "option": "--sepolia",
          "description": "Sepolia network: pre-configured proof-of-work test network",
          "default": "false"
      },
      {
          "option": "--signer",
          "description": "External signer (url or path to ipc file)"
      },
      {
          "option": "--snapshot",
          "description": "Enables snapshot-database mode (default = enable)",
          "default": "true"
      },
      {
          "option": "--synctarget",
          "description": "Hash of the block to full sync to (dev testing feature)"
      },
      {
          "option": "--syncmode",
          "description": "Blockchain sync mode (\"snap\" or \"full\")",
          "default": "snap"
      },
      {
          "option": "--trace",
          "description": "Write execution trace to the given file"
      },
      {
          "option": "--txlookuplimit",
          "description": "Number of recent blocks to maintain transactions index for (default = about one year, 0 = entire chain) (deprecated, use history.transactions instead)",
          "default": "2350000"
      },
      {
          "option": "--txpool.accountqueue",
          "description": "Maximum number of non-executable transaction slots permitted per account",
          "default": "64"
      },
      {
          "option": "--txpool.accountslots",
          "description": "Minimum number of executable transaction slots guaranteed per account",
          "default": "16"
      },
      {
          "option": "--txpool.globalqueue",
          "description": "Maximum number of non-executable transaction slots for all accounts",
          "default": "1024"
      },
      {
          "option": "--txpool.globalslots",
          "description": "Maximum number of executable transaction slots for all accounts",
          "default": "5120"
      },
      {
          "option": "--txpool.journal",
          "description": "Disk journal for local transaction to survive node restarts",
          "default": "transactions.rlp"
      },
      {
          "option": "--txpool.lifetime",
          "description": "Maximum amount of time non-executable transaction are queued",
          "default": "3h0m0s"
      },
      {
          "option": "--txpool.locals",
          "description": "Comma separated accounts to treat as locals (no flush, priority inclusion)"
      },
      {
          "option": "--txpool.nolocals",
          "description": "Disables price exemptions for locally submitted transactions",
          "default": "false"
      },
      {
          "option": "--txpool.pricebump",
          "description": "Price bump percentage to replace an already existing transaction",
          "default": "10"
      },
      {
          "option": "--txpool.pricelimit",
          "description": "Minimum gas price tip to enforce for acceptance into the pool",
          "default": "1"
      },
      {
          "option": "--txpool.rejournal",
          "description": "Time interval to regenerate the local transaction journal",
          "default": "1h0m0s"
      },
      {
          "option": "--unlock",
          "description": "Comma separated list of accounts to unlock (deprecated)"
      },
      {
          "option": "--usb",
          "description": "Enable monitoring and management of USB hardware wallets",
          "default": "false"
      },
      {
          "option": "--v5disc",
          "description": "Enables the experimental RLPx V5 (Topic Discovery) mechanism (deprecated, use --discv5 instead)",
          "default": "false"
      },
      {
          "option": "--verbosity",
          "description": "Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail",
          "default": "3"
      },
      {
          "option": "--version",
          "description": "print the version",
          "shortcut": "-v",
          "default": "false"
      },
      {
          "option": "--vmdebug",
          "description": "Record information useful for VM and contract debugging",
          "default": "false"
      },
      {
          "option": "--vmtrace",
          "description": "Name of tracer which should record internal VM operations (costly)"
      },
      {
          "option": "--vmtrace.jsonconfig",
          "description": "Tracer configuration (JSON)",
          "default": "{}"
      },
      {
          "option": "--whitelist",
          "description": "Comma separated block number-to-hash mappings to enforce (<number>=<hash>) (deprecated in favor of --eth.requiredblocks)"
      },
      {
          "option": "--ws",
          "description": "Enable the WS-RPC server",
          "default": "false"
      },
      {
          "option": "--ws.addr",
          "description": "WS-RPC server listening interface",
          "default": "localhost"
      },
      {
          "option": "--ws.api",
          "description": "API's offered over the WS-RPC interface"
      },
      {
          "option": "--ws.origins",
          "description": "Origins from which to accept websockets requests"
      },
      {
          "option": "--ws.port",
          "description": "WS-RPC server listening port",
          "default": "8546"
      },
      {
          "option": "--ws.rpcprefix",
          "description": "HTTP path prefix on which JSON-RPC is served. Use '/' to serve on all paths."
      }
  ],
  "version": "1.14.12-stable-293a300d"
}
