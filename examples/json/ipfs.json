{
	"description": "Global p2p merkle-dag filesystem.",
	"name": "ipfs",
	"usage": "ipfs [--config=<config> | -c] [--debug | -D] [--help] [-h] [--api=<api>] [--offline] [--cid-base=<base>] [--upgrade-cidv0-in-output] [--encoding=<encoding> | --enc] [--timeout=<timeout>] <command> ...",
	"options": [
		{
			"description": "Use a specific API instance (defaults to /ip4/127.0.0.1/tcp/5001).",
			"option": "--api",
			"value": "string"
		},
		{
			"default": "text",
			"description": "The encoding type the output should be encoded with (json, xml, or text).",
			"option": "--enc",
			"shortcut": "--encoding",
			"value": "string"
		},
		{
			"description": "Show the full command help text.",
			"option": "--help",
			"value": "bool"
		},
		{
			"description": "Run the command locally, instead of using the daemon. DEPRECATED: use --offline.",
			"option": "--local",
			"shortcut": "-L",
			"value": "bool",
			"tags": [
				"DEPRECATED"
			]
		},
		{
			"description": "Run the command offline.",
			"option": "--offline",
			"value": "bool"
		},
		{
			"description": "Multibase encoding used for version 1 CIDs in output.",
			"option": "--cid-base",
			"value": "string"
		},
		{
			"description": "Upgrade version 0 to version 1 CIDs in output.",
			"option": "--upgrade-cidv0-in-output",
			"value": "bool"
		},
		{
			"description": "Stream channel output.",
			"option": "--stream-channels",
			"value": "bool"
		},
		{
			"description": "Set a global timeout on the command.",
			"option": "--timeout",
			"value": "string"
		},
		{
			"description": "[DEPRECATED] Path to the configuration file to use.",
			"option": "--config",
			"shortcut": "-c",
			"value": "string",
			"tags": [
				"DEPRECATED"
			]
		},
		{
			"description": "Path to the configuration file to use.",
			"option": "--config-file",
			"value": "string"
		},
		{
			"description": "Path to the repository directory to use.",
			"option": "--repo-dir",
			"value": "string"
		},
		{
			"description": "Operate in debug mode.",
			"option": "--debug",
			"shortcut": "-D",
			"value": "bool"
		},
		{
			"description": "Show a short version of the command help text.",
			"shortcut": "-h",
			"value": "bool"
		}
	],
	"subcommands": [
		{
			"name": "ipfs bootstrap",
			"description": "Show or edit the list of bootstrap peers.",
			"usage": "ipfs bootstrap",
			"subcommands": [
				{
					"name": "ipfs bootstrap add",
					"description": "Add peers to the bootstrap list.",
					"usage": "ipfs bootstrap add [<peer>]... - Add peers to the bootstrap list.",
					"options": [
						{
							"description": "Add default bootstrap nodes. (Deprecated, use 'default' subcommand instead).",
							"option": "--default",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": [
						{
							"name": "ipfs bootstrap add default",
							"description": "A command-line tool for interacting with the InterPlanetary File System.",
							"usage": "ipfs <command> [<args>]",
							"subcommands": [
								{
									"name": "ipfs bootstrap add default bootstrap",
									"description": "IPFS command-line tool",
									"usage": "ipfs bootstrap add default",
									"subcommands": [],
									"options": []
								}
							]
						}
					]
				},
				{
					"name": "ipfs bootstrap list",
					"description": "Show peers in the bootstrap list.",
					"usage": "ipfs bootstrap list",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs bootstrap rm",
					"description": "Remove peers from the bootstrap list.",
					"usage": "ipfs bootstrap rm [<peer>]... - Remove peers from the bootstrap list.",
					"options": [
						{
							"description": "Remove all bootstrap peers. (Deprecated, use 'all' subcommand).",
							"option": "--all",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": [
						{
							"name": "ipfs bootstrap rm all",
							"description": "Manage the bootstrap list of peers.",
							"usage": "ipfs bootstrap",
							"subcommands": [
								{
									"name": "ipfs bootstrap rm all rm all",
									"description": "",
									"usage": "ipfs bootstrap rm all",
									"subcommands": [
										{
											"name": "ipfs bootstrap rm all rm all all",
											"description": "InterPlanetary File System command-line tool.",
											"usage": "ipfs [command] [options]",
											"subcommands": [
												{
													"name": "ipfs bootstrap rm all rm all all bootstrap",
													"description": "InterPlanetary File System command-line tool.",
													"usage": "ipfs <subcommand> [options]",
													"subcommands": [],
													"options": []
												}
											],
											"options": []
										}
									],
									"options": []
								}
							],
							"options": []
						}
					]
				}
			],
			"options": []
		},
		{
			"name": "ipfs bitswap",
			"description": "Interact with the bitswap agent.",
			"usage": "ipfs bitswap",
			"subcommands": [
				{
					"name": "ipfs bitswap ledger",
					"description": "The InterPlanetary File System (IPFS) command-line utility.",
					"usage": "ipfs <subcommand> [options] [arguments]",
					"subcommands": [
						{
							"name": "ipfs bitswap ledger bitswap",
							"description": "The IPFS command-line interface.",
							"usage": "ipfs [command]",
							"subcommands": [],
							"options": []
						}
					],
					"options": []
				},
				{
					"name": "ipfs bitswap reprovide",
					"description": "IPFS command-line interface.",
					"usage": "ipfs <subcommand> [options]",
					"subcommands": [
						{
							"name": "ipfs bitswap reprovide bitswap reprovide",
							"description": "Trigger reprovider to announce our data to network.",
							"usage": "ipfs bitswap reprovide",
							"subcommands": [],
							"options": []
						}
					]
				},
				{
					"description": "Show some diagnostic information on the bitswap agent.",
					"name": "ipfs bitswap stat",
					"options": [
						{
							"description": "Print sizes in human readable format (e.g., 1K 234M 2G).",
							"option": "--human",
							"tags": [
								"bool"
							]
						},
						{
							"description": "Print extra information.",
							"option": "--verbose",
							"shortcut": "-v",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": [],
					"usage": "ipfs bitswap stat [--verbose | -v] [--human]"
				},
				{
					"description": "Print out all blocks currently on the bitswap wantlist for the local peer.",
					"name": "ipfs bitswap wantlist",
					"subcommands": [],
					"options": [
						{
							"description": "Specify which peer to show wantlist for.",
							"option": "--peer",
							"shortcut": "-p",
							"value": "string",
							"default": "self"
						}
					],
					"usage": "ipfs bitswap wantlist - Show blocks currently on the wantlist."
				}
			]
		},
		{
			"name": "ipfs block",
			"description": "'ipfs block' is a plumbing command used to manipulate raw IPFS blocks. Reads from stdin or writes to stdout. A block is identified by a Multihash passed with a valid CID.",
			"usage": "ipfs block - Interact with raw IPFS blocks.",
			"subcommands": [
				{
					"name": "ipfs block get",
					"description": "'ipfs block get' is a plumbing command for retrieving raw IPFS blocks. It takes a <cid>, and outputs the block to stdout.",
					"usage": "ipfs block get <cid> - Get a raw IPFS block.",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs block put",
					"description": "'ipfs block put' is a plumbing command for storing raw IPFS blocks. It reads data from stdin, and outputs the block's CID to stdout. Unless cid-codec is specified, this command returns raw (0x55) CIDv1 CIDs. Passing alternative --cid-codec does not modify imported data, nor run any validation. It is provided solely for convenience for users who create blocks in userland. NOTE: Do not use --format for any new code. It got superseded by --cid-codec and left only for backward compatibility when a legacy CIDv0 is required (--format=v0).",
					"usage": "ipfs block put <data>... - Store input as an IPFS block.",
					"options": [
						{
							"option": "--allow-big-block",
							"description": "Disable block size check and allow creation of blocks bigger than 1MiB. WARNING: such blocks won't be transferable over the standard bitswap.",
							"value": "bool",
							"default": "false"
						},
						{
							"option": "--cid-codec",
							"description": "Multicodec to use in returned CID.",
							"value": "string",
							"default": "raw"
						},
						{
							"option": "--format",
							"shortcut": "-f",
							"description": "Use legacy format for returned CID (DEPRECATED).",
							"value": "string"
						},
						{
							"option": "--mhlen",
							"description": "Multihash hash length.",
							"value": "int",
							"default": "-1"
						},
						{
							"option": "--mhtype",
							"description": "Multihash hash function.",
							"value": "string",
							"default": "sha2-256"
						},
						{
							"option": "--pin",
							"description": "Pin added blocks recursively.",
							"value": "bool",
							"default": "false"
						}
					],
					"subcommands": []
				},
				{
					"description": "'ipfs block rm' is a plumbing command for removing raw ipfs blocks. It takes a list of CIDs to remove from the local datastore.",
					"name": "ipfs block rm",
					"usage": "ipfs block rm [--force | -f] [--quiet | -q] [--] <cid>...",
					"options": [
						{
							"description": "Ignore nonexistent blocks.",
							"option": "--force",
							"shortcut": "-f",
							"tags": [
								"bool"
							]
						},
						{
							"description": "Write minimal output.",
							"option": "--quiet",
							"shortcut": "-q",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"description": "'ipfs block stat' is a plumbing command for retrieving information on raw IPFS blocks. It outputs the following to stdout:\n\n  Key  - the CID of the block\n  Size - the size of the block in bytes",
					"name": "ipfs block stat",
					"subcommands": [],
					"options": [],
					"usage": "ipfs block stat <cid> - Print information of a raw IPFS block."
				}
			]
		},
		{
			"name": "ipfs cid",
			"description": "Convert and discover properties of CIDs",
			"usage": "ipfs cid",
			"subcommands": [
				{
					"description": "'ipfs cid base32' normalizes passed CIDs to their canonical case-insensitive encoding. Useful when processing third-party CIDs which could come with arbitrary formats.",
					"name": "ipfs cid base32",
					"subcommands": [
						{
							"description": "'ipfs cid base32' normalizes passed CIDs to their canonical case-insensitive encoding. Useful when processing third-party CIDs which could come with arbitrary formats.",
							"name": "ipfs cid base32 cid",
							"subcommands": [],
							"usage": "ipfs cid base32 [--] <cid>..."
						}
					],
					"usage": "ipfs cid base32 <cid>..."
				},
				{
					"name": "ipfs cid bases",
					"description": "'ipfs cid bases' relies on https://github.com/multiformats/go-multibase",
					"usage": "ipfs cid bases - List available multibase encodings.",
					"subcommands": [],
					"options": [
						{
							"option": "--numeric",
							"description": "also include numeric codes.",
							"value": "bool"
						},
						{
							"option": "--prefix",
							"description": "also include the single letter prefixes in addition to the code.",
							"value": "bool"
						}
					]
				},
				{
					"name": "ipfs cid codecs",
					"description": "'ipfs cid codecs' relies on https://github.com/multiformats/go-multicodec",
					"usage": "ipfs cid codecs - List available CID multicodecs.",
					"subcommands": [],
					"options": [
						{
							"option": "--numeric",
							"shortcut": "-n",
							"description": "also include numeric codes.",
							"value": "bool"
						},
						{
							"option": "--supported",
							"shortcut": "-s",
							"description": "list only codecs supported by go-ipfs commands.",
							"value": "bool"
						}
					]
				},
				{
					"name": "ipfs cid format",
					"description": "Format and convert a CID in various useful ways.",
					"usage": "ipfs cid format <cid>... - Format and convert a CID in various useful ways.",
					"options": [
						{
							"option": "-b",
							"description": "Multibase to display CID in.",
							"value": "string"
						},
						{
							"option": "-f",
							"description": "Printf style format string.",
							"value": "string",
							"default": "%s"
						},
						{
							"option": "-v",
							"description": "CID version to convert to.",
							"value": "string"
						},
						{
							"option": "--mc",
							"description": "CID multicodec to convert to.",
							"value": "string"
						}
					],
					"subcommands": []
				},
				{
					"description": "'ipfs cid hashes' relies on https://github.com/multiformats/go-multihash",
					"name": "ipfs cid hashes",
					"subcommands": [],
					"usage": "ipfs cid hashes - List available multihashes.",
					"options": [
						{
							"description": "also include numeric codes.",
							"option": "--numeric",
							"shortcut": "-n",
							"tags": [
								"bool"
							]
						},
						{
							"description": "list only codecs supported by go-ipfs commands.",
							"option": "--supported",
							"shortcut": "-s",
							"tags": [
								"bool"
							]
						}
					]
				}
			],
			"options": []
		},
		{
			"name": "ipfs commands",
			"description": "Lists all available commands (and subcommands) and exits.",
			"usage": "ipfs commands [--flags | -f]",
			"options": [
				{
					"option": "--flags",
					"shortcut": "-f",
					"description": "Show command flags.",
					"value": "bool"
				}
			],
			"subcommands": [
				{
					"name": "ipfs commands completion",
					"description": "Generate shell completions.",
					"usage": "ipfs commands completion",
					"subcommands": [
						{
							"name": "ipfs commands completion bash",
							"description": "Generates command completions for the bash shell.",
							"usage": "ipfs commands completion bash - Generate bash shell completions.",
							"subcommands": [
								{
									"name": "ipfs commands completion bash commands",
									"description": "Generates command completions for the bash shell.",
									"usage": "ipfs commands completion bash",
									"subcommands": [],
									"options": []
								},
								{
									"description": "Generates command completions for the bash shell.",
									"name": "ipfs commands completion bash completion",
									"options": [],
									"subcommands": [
										{
											"description": "Generates command completions for the bash shell.",
											"name": "ipfs commands completion bash completion commands",
											"subcommands": [],
											"usage": "ipfs commands completion bash"
										}
									],
									"usage": "ipfs commands completion bash - Generate bash shell completions."
								}
							],
							"options": []
						},
						{
							"name": "ipfs commands completion fish",
							"description": "Generates command completions for the fish shell.",
							"usage": "ipfs commands completion fish",
							"subcommands": [],
							"options": []
						},
						{
							"description": "Generates command completions for the zsh shell.",
							"name": "ipfs commands completion zsh",
							"usage": "ipfs commands completion zsh",
							"subcommands": [],
							"options": []
						}
					],
					"options": []
				}
			]
		},
		{
			"name": "ipfs config",
			"description": "'ipfs config' controls configuration variables. It works much like 'git config'. The configuration values are stored in a config file inside your IPFS repository (IPFS_PATH).",
			"usage": "ipfs config <key> [<value>] - Get and set IPFS config values.",
			"subcommands": [
				{
					"name": "ipfs config edit",
					"description": "Interface for managing IPFS configurations.",
					"usage": "ipfs config edit - Open the config file for editing in $EDITOR.",
					"subcommands": [
						{
							"name": "ipfs config edit config",
							"description": "IPFS is a distributed file system that seeks to connect all computing devices with the same system of files.",
							"usage": "ipfs <subcommand> [options]",
							"subcommands": []
						}
					],
					"options": []
				},
				{
					"name": "ipfs config profile",
					"description": "Apply profiles to config.",
					"usage": "ipfs config profile",
					"subcommands": [
						{
							"name": "ipfs config profile apply",
							"description": "Apply profile to config.",
							"usage": "ipfs config profile apply [--dry-run] [--] <profile>",
							"options": [
								{
									"description": "print difference between the current config and the config that would be generated.",
									"option": "--dry-run",
									"value": "bool"
								}
							],
							"subcommands": []
						}
					],
					"options": []
				},
				{
					"description": "Replace the config with a specified file.",
					"name": "ipfs config replace",
					"subcommands": [
						{
							"name": "ipfs config replace config",
							"description": "Replace the config with <file>.",
							"usage": "ipfs config replace <file> - Replace the config with <file>.",
							"subcommands": [],
							"options": []
						}
					],
					"usage": "ipfs config replace <file>"
				},
				{
					"description": "Output config file contents.",
					"name": "ipfs config show",
					"usage": "ipfs config show",
					"subcommands": [
						{
							"name": "ipfs config show config",
							"description": "InterPlanetary File System (IPFS) command-line tool.",
							"usage": "ipfs <command> [<args>]",
							"subcommands": [
								{
									"description": "For security reasons, this command will omit your private key and remote services. If you would like to make a full backup of your config (private key included), you must copy the config file from your repo.",
									"name": "ipfs config show config show",
									"subcommands": [],
									"options": [],
									"usage": "ipfs config show - Output config file contents."
								}
							],
							"options": []
						}
					],
					"options": []
				}
			],
			"options": [
				{
					"option": "--bool",
					"description": "Set a boolean value.",
					"value": "bool"
				},
				{
					"option": "--json",
					"description": "Parse stringified JSON.",
					"value": "bool"
				}
			]
		},
		{
			"name": "ipfs id",
			"description": "Show IPFS node id info.",
			"usage": "ipfs id [<peerid>]",
			"subcommands": [],
			"options": [
				{
					"option": "--format",
					"shortcut": "-f",
					"description": "Optional output format.",
					"value": "string"
				},
				{
					"option": "--peerid-base",
					"description": "Encoding used for peer IDs: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
					"value": "string",
					"default": "b58mh"
				}
			]
		},
		{
			"name": "ipfs init",
			"description": "Initializes ipfs configuration files and generates a new keypair. If you are going to run IPFS in server environment, you may want to initialize it using 'server' profile. For the list of available profiles see 'ipfs config profile --help'. ipfs uses a repository in the local file system. By default, the repo is located at ~/.ipfs. To change the repo location, set the $IPFS_PATH environment variable: export IPFS_PATH=/path/to/ipfsrepo",
			"usage": "ipfs init [<default-config>] - Initializes ipfs config file.",
			"subcommands": [],
			"options": [
				{
					"option": "--algorithm",
					"shortcut": "-a",
					"description": "Cryptographic algorithm to use for key generation.",
					"value": "string",
					"default": "ed25519"
				},
				{
					"option": "--bits",
					"shortcut": "-b",
					"description": "Number of bits to use in the generated RSA private key.",
					"value": "int"
				},
				{
					"option": "--empty-repo",
					"shortcut": "-e",
					"description": "Don't add and pin help files to the local storage.",
					"value": "bool",
					"default": "true"
				},
				{
					"option": "--profile",
					"shortcut": "-p",
					"description": "Apply profile settings to config. Multiple profiles can be separated by ','.",
					"value": "string"
				}
			]
		},
		{
			"name": "ipfs log",
			"description": "'ipfs log' contains utility commands to affect or read the logging output of a running daemon.",
			"usage": "ipfs log",
			"subcommands": [
				{
					"description": "Change the verbosity of one or all subsystems log output. This does not affect the event log.",
					"name": "ipfs log level",
					"subcommands": [],
					"options": [],
					"usage": "ipfs log level <subsystem> <level> - Change the logging level."
				},
				{
					"description": "'ipfs log ls' is a utility command used to list the logging subsystems of a running daemon.",
					"name": "ipfs log ls",
					"usage": "ipfs log ls",
					"subcommands": [],
					"options": []
				},
				{
					"description": "Outputs event log messages (not other log messages) as they are generated. Currently broken. Follow https://github.com/ipfs/kubo/issues/9245 for updates.",
					"name": "ipfs log tail",
					"usage": "ipfs log tail - Read the event log.",
					"subcommands": [],
					"options": []
				}
			]
		},
		{
			"name": "ipfs mount",
			"description": "Mounts IPFS to the filesystem (read-only).",
			"usage": "ipfs mount [--ipfs-path=<ipfs-path> | -f] [--ipns-path=<ipns-path> | -n]",
			"subcommands": [],
			"options": [
				{
					"option": "--ipfs-path",
					"shortcut": "-f",
					"description": "The path where IPFS should be mounted.",
					"value": "string"
				},
				{
					"option": "--ipns-path",
					"shortcut": "-n",
					"description": "The path where IPNS should be mounted.",
					"value": "string"
				}
			]
		},
		{
			"name": "ipfs multibase",
			"description": "Encode and decode files or stdin with multibase format",
			"usage": "ipfs multibase",
			"subcommands": [
				{
					"name": "ipfs multibase decode",
					"description": "Decode multibase string",
					"usage": "ipfs multibase decode <encoded_file>",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs multibase encode",
					"description": "InterPlanetary File System (IPFS) command-line interface.",
					"usage": "ipfs multibase encode <file> - Encode data into multibase string",
					"subcommands": [
						{
							"name": "ipfs multibase encode multibase",
							"description": "Encode data into multibase string",
							"usage": "ipfs multibase encode <file> - Encode data into multibase string",
							"subcommands": [],
							"options": [
								{
									"option": "-b",
									"description": "multibase encoding.",
									"value": "string",
									"default": "base64url"
								}
							]
						}
					],
					"options": [
						{
							"option": "-b",
							"description": "multibase encoding.",
							"value": "string",
							"default": "base64url"
						}
					]
				},
				{
					"name": "ipfs multibase list",
					"description": "List available multibase encodings.",
					"usage": "ipfs multibase list [--prefix] [--numeric]",
					"options": [
						{
							"description": "also include numeric codes.",
							"option": "--numeric",
							"tags": [
								"bool"
							]
						},
						{
							"description": "also include the single letter prefixes in addition to the code.",
							"option": "--prefix",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs multibase transcode",
					"description": "Transcode multibase string between bases. This command expects multibase inside of a file or via stdin.",
					"usage": "ipfs multibase transcode <encoded_file> - Transcode multibase string between bases",
					"subcommands": [],
					"options": [
						{
							"option": "-b",
							"description": "multibase encoding.",
							"value": "string",
							"default": "base64url"
						}
					]
				}
			]
		},
		{
			"description": "IPNS is a PKI namespace, where names are the hashes of public keys, and the private key enables publishing new (signed) values. In both publish and resolve, the default name used is the node's own PeerID, which is the hash of its public key.",
			"name": "ipfs name",
			"subcommands": [
				{
					"description": "Prints values inside of IPNS Record protobuf and its DAG-CBOR Data field. The input can be a file or STDIN, the output can be JSON. Values in PublicKey, SignatureV1 and SignatureV2 fields are raw bytes encoded in Multibase. The Data field is DAG-CBOR represented as DAG-JSON. Passing --verify will verify signature against provided public key.",
					"name": "ipfs name inspect",
					"subcommands": [],
					"usage": "ipfs name inspect <record> - Inspects an IPNS Record",
					"options": [
						{
							"description": "Include a full hex dump of the raw Protobuf record.",
							"option": "--dump",
							"tags": [
								"bool"
							],
							"default": "true"
						},
						{
							"description": "CID of the public IPNS key to validate against.",
							"option": "--verify",
							"tags": [
								"string"
							],
							"value": "<verify>"
						}
					]
				},
				{
					"name": "ipfs name publish",
					"description": "Publish IPNS names.",
					"usage": "ipfs name publish <ipfs-path> - Publish IPNS names.",
					"options": [
						{
							"option": "--allow-offline",
							"description": "When offline, save the IPNS record to the local datastore without broadcasting to the network instead of simply failing.",
							"tags": [
								"bool"
							]
						},
						{
							"option": "--ipns-base",
							"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
							"value": "<ipns-base>",
							"default": "base36",
							"tags": [
								"string"
							]
						},
						{
							"option": "--key",
							"shortcut": "-k",
							"description": "Name of the key to be used or a valid PeerID, as listed by 'ipfs key list -l'.",
							"value": "<key>",
							"default": "self",
							"tags": [
								"string"
							]
						},
						{
							"option": "--lifetime",
							"shortcut": "-t",
							"description": "Time duration that the record will be valid for. This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
							"default": "24h",
							"tags": [
								"string"
							]
						},
						{
							"option": "--quieter",
							"shortcut": "-Q",
							"description": "Write only final hash.",
							"tags": [
								"bool"
							]
						},
						{
							"option": "--resolve",
							"description": "Check if the given path can be resolved before publishing.",
							"default": "true",
							"tags": [
								"bool"
							]
						},
						{
							"option": "--ttl",
							"description": "Time duration this record should be cached for. Uses the same syntax as the lifetime option. (caution: experimental).",
							"value": "<ttl>",
							"tags": [
								"string"
							]
						},
						{
							"option": "--v1compat",
							"description": "Produce a backward-compatible IPNS Record by including fields for both V1 and V2 signatures.",
							"default": "true",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs name pubsub",
					"description": "Manage and inspect the state of the IPNS pubsub resolver. Note: this command is experimental and subject to change as the system is refined",
					"usage": "ipfs name pubsub - IPNS pubsub management",
					"subcommands": [
						{
							"name": "ipfs name pubsub cancel",
							"description": "Cancel a name subscription.",
							"usage": "ipfs name pubsub cancel <name> - Cancel a name subscription.",
							"options": [],
							"subcommands": []
						},
						{
							"name": "ipfs name pubsub state",
							"description": "WARNING: EXPERIMENTAL, command may change in future releases",
							"usage": "ipfs name pubsub state - Query the state of IPNS pubsub.",
							"subcommands": [],
							"options": []
						},
						{
							"description": "WARNING: EXPERIMENTAL, command may change in future releases",
							"name": "ipfs name pubsub subs",
							"usage": "ipfs name pubsub subs - Show current name subscriptions.",
							"options": [
								{
									"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
									"option": "--ipns-base",
									"value": "string",
									"default": "base36"
								}
							],
							"subcommands": []
						}
					]
				},
				{
					"name": "ipfs name resolve",
					"description": "IPNS is a PKI namespace, where names are the hashes of public keys, and the private key enables publishing new (signed) values. In both publish and resolve, the default name used is the node's own PeerID, which is the hash of its public key. You can use the 'ipfs key' commands to list and generate more names and their respective keys.",
					"usage": "ipfs name resolve [<name>] - Resolve IPNS names.",
					"subcommands": [],
					"options": [
						{
							"option": "--dht-record-count",
							"shortcut": "--dhtrc",
							"description": "Number of records to request for DHT resolution.",
							"value": "uint"
						},
						{
							"option": "--dht-timeout",
							"shortcut": "--dhtt",
							"description": "Max time to collect values during DHT resolution eg \"30s\". Pass 0 for no timeout.",
							"value": "string"
						},
						{
							"option": "--nocache",
							"shortcut": "-n",
							"description": "Do not use cached entries.",
							"value": "bool"
						},
						{
							"option": "--recursive",
							"shortcut": "-r",
							"description": "Resolve until the result is not an IPNS name.",
							"value": "bool",
							"default": "true"
						},
						{
							"option": "--stream",
							"shortcut": "-s",
							"description": "Stream entries as they are found.",
							"value": "bool"
						}
					]
				}
			],
			"usage": "ipfs name"
		},
		{
			"name": "ipfs p2p",
			"description": "Create and use tunnels to remote peers over libp2p. Note: this command is experimental and subject to change as use cases and APIs are refined.",
			"usage": "ipfs p2p - Libp2p stream mounting.",
			"subcommands": [
				{
					"name": "ipfs p2p close",
					"description": "Stop listening for new connections to forward.",
					"usage": "ipfs p2p close [--all | -a] [--protocol=<protocol> | -p] [--listen-address=<listen-address> | -l] [--target-address=<target-address> | -t]",
					"options": [
						{
							"option": "--all",
							"shortcut": "-a",
							"description": "Close all listeners.",
							"value": "bool"
						},
						{
							"option": "--listen-address",
							"shortcut": "-l",
							"description": "Match listen address.",
							"value": "string"
						},
						{
							"option": "--protocol",
							"shortcut": "-p",
							"description": "Match protocol name.",
							"value": "string"
						},
						{
							"option": "--target-address",
							"shortcut": "-t",
							"description": "Match target address.",
							"value": "string"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs p2p forward",
					"description": "Forward connections to libp2p service.",
					"usage": "ipfs p2p forward <protocol> <listen-address> <target-address>",
					"options": [
						{
							"description": "Don't require /x/ prefix.",
							"option": "--allow-custom-protocol",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs p2p listen",
					"description": "WARNING: EXPERIMENTAL, command may change in future releases",
					"usage": "ipfs p2p listen <protocol> <target-address> - Create libp2p service.",
					"subcommands": [
						{
							"description": "EXPERIMENTAL, command may change in future releases",
							"name": "ipfs p2p listen p2p",
							"usage": "ipfs p2p listen <protocol> <target-address> - Create libp2p service.",
							"subcommands": [
								{
									"name": "ipfs p2p listen p2p listen",
									"description": "Create libp2p service and forward connections made to <target-address>. <protocol> specifies the libp2p handler name. It must be prefixed with '/x/'.",
									"usage": "ipfs p2p listen <protocol> <target-address> - Create libp2p service.",
									"options": [
										{
											"option": "--allow-custom-protocol",
											"description": "Don't require /x/ prefix.",
											"value": "bool"
										},
										{
											"option": "--report-peer-id",
											"shortcut": "-r",
											"description": "Send remote base58 peerid to target when a new connection is established.",
											"value": "bool"
										}
									],
									"subcommands": []
								}
							],
							"options": [
								{
									"option": "--allow-custom-protocol",
									"description": "Don't require /x/ prefix.",
									"tags": [
										"bool"
									]
								},
								{
									"option": "--report-peer-id",
									"shortcut": "-r",
									"description": "Send remote base58 peerid to target when a new connection is established.",
									"tags": [
										"bool"
									]
								}
							]
						}
					]
				},
				{
					"description": "EXPERIMENTAL, command may change in future releases",
					"name": "ipfs p2p ls",
					"usage": "ipfs p2p ls - List active p2p listeners.",
					"subcommands": [
						{
							"description": "EXPERIMENTAL, command may change in future releases",
							"usage": "ipfs p2p ls - List active p2p listeners.",
							"subcommands": [
								{
									"name": "ipfs p2p ls p2p ls",
									"description": "WARNING: EXPERIMENTAL, command may change in future releases",
									"usage": "ipfs p2p ls - List active p2p listeners.",
									"subcommands": [
										{
											"name": "ipfs p2p ls p2p ls p2p",
											"description": "EXPERIMENTAL, command may change in future releases",
											"usage": "ipfs p2p ls - List active p2p listeners.",
											"subcommands": [
												{
													"name": "ipfs p2p ls p2p ls p2p ls",
													"description": "EXPERIMENTAL, command may change in future releases",
													"usage": "ipfs p2p ls - List active p2p listeners.",
													"subcommands": [],
													"options": [
														{
															"option": "--headers",
															"shortcut": "-v",
															"description": "Print table headers (Protocol, Listen, Target).",
															"value": "bool"
														}
													]
												}
											],
											"options": [
												{
													"option": "--headers",
													"shortcut": "-v",
													"description": "Print table headers (Protocol, Listen, Target).",
													"value": "bool"
												}
											]
										}
									],
									"options": [
										{
											"option": "--headers",
											"shortcut": "-v",
											"description": "Print table headers (Protocol, Listen, Target).",
											"value": "bool"
										}
									]
								}
							],
							"options": [
								{
									"option": "--headers",
									"shortcut": "-v",
									"description": "Print table headers (Protocol, Listen, Target).",
									"tags": [
										"bool"
									]
								}
							],
							"name": "ipfs p2p ls p2p"
						}
					],
					"options": []
				},
				{
					"description": "Create and manage p2p streams",
					"name": "ipfs p2p stream",
					"usage": "ipfs p2p stream - P2P stream management.",
					"subcommands": [
						{
							"description": "WARNING: EXPERIMENTAL, command may change in future releases",
							"name": "ipfs p2p stream close",
							"subcommands": [
								{
									"description": "WARNING: EXPERIMENTAL, command may change in future releases",
									"name": "ipfs p2p stream close p2p",
									"usage": "ipfs p2p stream close [<id>] - Close active p2p stream.",
									"subcommands": [
										{
											"name": "ipfs p2p stream close p2p stream",
											"description": "WARNING: EXPERIMENTAL, command may change in future releases",
											"usage": "ipfs p2p stream close [<id>] - Close active p2p stream.",
											"subcommands": [
												{
													"name": "ipfs p2p stream close p2p stream close",
													"description": "WARNING: EXPERIMENTAL, command may change in future releases",
													"usage": "ipfs p2p stream close [<id>] - Close active p2p stream.",
													"subcommands": [],
													"options": [
														{
															"option": "--all",
															"shortcut": "-a",
															"description": "Close all streams.",
															"value": "bool"
														}
													]
												}
											],
											"options": [
												{
													"option": "--all",
													"shortcut": "-a",
													"description": "Close all streams.",
													"value": "bool"
												}
											]
										},
										{
											"name": "ipfs p2p stream close p2p close",
											"description": "WARNING: EXPERIMENTAL, command may change in future releases",
											"usage": "ipfs p2p stream close [<id>] - Close active p2p stream.",
											"subcommands": [
												{
													"name": "ipfs p2p stream close p2p close p2p",
													"description": "Close active p2p stream.",
													"usage": "ipfs p2p stream close [--all | -a] [--] [<id>]",
													"options": [
														{
															"option": "--all",
															"shortcut": "-a",
															"description": "Close all streams.",
															"value": "bool"
														}
													],
													"subcommands": []
												},
												{
													"description": "WARNING: EXPERIMENTAL, command may change in future releases",
													"name": "ipfs p2p stream close p2p close stream",
													"subcommands": [
														{
															"name": "ipfs p2p stream close p2p close stream close",
															"description": "WARNING: EXPERIMENTAL, command may change in future releases",
															"usage": "ipfs p2p stream close [<id>] - Close active p2p stream.",
															"subcommands": [],
															"options": [
																{
																	"option": "--all",
																	"shortcut": "-a",
																	"description": "Close all streams.",
																	"tags": [
																		"bool"
																	]
																}
															]
														}
													],
													"usage": "ipfs p2p stream close [<id>]",
													"options": [
														{
															"description": "Close all streams.",
															"option": "--all",
															"shortcut": "-a",
															"tags": [
																"bool"
															]
														}
													]
												}
											],
											"options": [
												{
													"option": "--all",
													"shortcut": "-a",
													"description": "Close all streams.",
													"value": "bool"
												}
											]
										}
									],
									"options": [
										{
											"option": "--all",
											"shortcut": "-a",
											"description": "Close all streams.",
											"value": "bool"
										}
									]
								}
							],
							"usage": "ipfs p2p stream close [<id>] - Close active p2p stream."
						},
						{
							"name": "ipfs p2p stream ls",
							"description": "WARNING: EXPERIMENTAL, command may change in future releases",
							"usage": "ipfs p2p stream ls - List active p2p streams.",
							"subcommands": [
								{
									"name": "ipfs p2p stream ls p2p",
									"description": "List active p2p streams.",
									"usage": "ipfs p2p stream ls [--headers | -v]",
									"options": [
										{
											"option": "--headers",
											"shortcut": "-v",
											"description": "Print table headers (ID, Protocol, Local, Remote).",
											"value": "bool"
										}
									],
									"subcommands": []
								},
								{
									"name": "ipfs p2p stream ls stream",
									"description": "List active p2p streams.",
									"usage": "ipfs p2p stream ls [--headers | -v]",
									"options": [
										{
											"option": "--headers",
											"shortcut": "-v",
											"description": "Print table headers (ID, Protocol, Local, Remote).",
											"value": "bool"
										}
									],
									"subcommands": []
								}
							],
							"options": [
								{
									"option": "--headers",
									"shortcut": "-v",
									"description": "Print table headers (ID, Protocol, Local, Remote)",
									"value": "bool"
								}
							]
						}
					],
					"options": []
				}
			]
		},
		{
			"name": "ipfs pin",
			"description": "Pin (and unpin) objects to local storage.",
			"usage": "ipfs pin",
			"subcommands": [
				{
					"name": "ipfs pin add",
					"description": "Pin objects to local storage.",
					"usage": "ipfs pin add <ipfs-path>...",
					"subcommands": [],
					"options": [
						{
							"option": "--progress",
							"description": "Show progress.",
							"value": "bool"
						},
						{
							"option": "--recursive",
							"shortcut": "-r",
							"description": "Recursively pin the object linked to by the specified object(s).",
							"value": "bool",
							"default": "true"
						}
					]
				},
				{
					"name": "ipfs pin ls",
					"description": "Returns a list of objects that are pinned locally. By default, all pinned objects are returned, but the '--type' flag or arguments can restrict that to a specific pin type or to some specific objects respectively.",
					"usage": "ipfs pin ls [<ipfs-path>]... - List objects pinned to local storage.",
					"options": [
						{
							"option": "--quiet",
							"shortcut": "-q",
							"description": "Write just hashes of objects.",
							"tags": [
								"bool"
							]
						},
						{
							"option": "--stream",
							"shortcut": "-s",
							"description": "Enable streaming of pins as they are discovered.",
							"tags": [
								"bool"
							]
						},
						{
							"option": "--type",
							"shortcut": "-t",
							"description": "The type of pinned keys to list. Can be \"direct\", \"indirect\", \"recursive\", or \"all\".",
							"value": "string",
							"default": "all"
						}
					],
					"subcommands": []
				},
				{
					"description": "Pin (and unpin) objects to remote pinning service.",
					"name": "ipfs pin remote",
					"usage": "ipfs pin remote",
					"subcommands": [
						{
							"description": "Asks remote pinning service to pin an IPFS object from a given path or a CID.",
							"name": "ipfs pin remote add",
							"usage": "ipfs pin remote add [--service=<service>] [--name=<name>] [--background] [--] <ipfs-path>",
							"options": [
								{
									"description": "Add to the queue on the remote service and return immediately (does not wait for pinned status).",
									"option": "--background",
									"tags": [
										"bool"
									],
									"default": "false"
								},
								{
									"description": "An optional name for the pin.",
									"option": "--name",
									"tags": [
										"string"
									],
									"value": "<name>"
								},
								{
									"description": "Name of the remote pinning service to use (mandatory).",
									"option": "--service",
									"tags": [
										"string"
									],
									"value": "<service>"
								}
							],
							"subcommands": []
						},
						{
							"name": "ipfs pin remote ls",
							"description": "Returns a list of objects that are pinned to a remote pinning service.",
							"usage": "ipfs pin remote ls - List objects pinned to remote pinning service.",
							"options": [
								{
									"description": "Return pins for the specified CIDs (comma-separated).",
									"option": "--cid",
									"value": "array"
								},
								{
									"description": "Return pins with names that contain the value provided (case-sensitive, exact match).",
									"option": "--name",
									"value": "string"
								},
								{
									"default": "[pinned]",
									"description": "Return pins with the specified statuses (queued,pinning,pinned,failed).",
									"option": "--status",
									"value": "array"
								},
								{
									"description": "Name of the remote pinning service to use (mandatory).",
									"option": "--service",
									"value": "string"
								}
							],
							"subcommands": []
						},
						{
							"name": "ipfs pin remote rm",
							"description": "Remove pins from remote pinning service.",
							"usage": "ipfs pin remote rm [--service=<service>] [--name=<name>] [--cid=<cid>]... [--status=<status>]... [--force]",
							"options": [
								{
									"option": "--cid",
									"description": "Remove pins for the specified CIDs.",
									"value": "array"
								},
								{
									"option": "--force",
									"description": "Allow removal of multiple pins matching the query without additional confirmation.",
									"value": "bool",
									"default": "false"
								},
								{
									"option": "--name",
									"description": "Remove pins with names that contain provided value (case-sensitive, exact match).",
									"value": "string"
								},
								{
									"option": "--service",
									"description": "Name of the remote pinning service to use (mandatory).",
									"value": "string"
								},
								{
									"option": "--status",
									"description": "Remove pins with the specified statuses (queued,pinning,pinned,failed).",
									"value": "array",
									"default": "[pinned]"
								}
							],
							"subcommands": []
						},
						{
							"description": "Configure remote pinning services.",
							"name": "ipfs pin remote service",
							"subcommands": [
								{
									"description": "Add credentials for access to a remote pinning service and store them in the config under Pinning.RemoteServices map.",
									"name": "ipfs pin remote service add",
									"usage": "ipfs pin remote service add [--] <service> <endpoint> <key>",
									"options": [],
									"subcommands": []
								},
								{
									"name": "ipfs pin remote service ls",
									"description": "List remote pinning services.",
									"usage": "ipfs pin remote service ls [--stat]",
									"options": [
										{
											"option": "--stat",
											"description": "Try to fetch and display current pin count on remote service (queued/pinning/pinned/failed).",
											"value": "bool",
											"default": "false"
										}
									],
									"subcommands": []
								},
								{
									"name": "ipfs pin remote service rm",
									"description": "A command-line tool for interacting with IPFS.",
									"usage": "ipfs <subcommand> [options]",
									"subcommands": [
										{
											"name": "ipfs pin remote service rm pin",
											"description": "Remove credentials for access to a remote pinning service.",
											"usage": "ipfs pin remote service rm <service> - Remove remote pinning service.",
											"subcommands": [
												{
													"name": "ipfs pin remote service rm pin rm",
													"description": "Remove credentials for access to a remote pinning service.",
													"usage": "ipfs pin remote service rm <service> - Remove remote pinning service.",
													"subcommands": [],
													"options": []
												}
											],
											"options": []
										}
									],
									"options": []
								}
							],
							"usage": "ipfs pin remote service"
						}
					]
				},
				{
					"description": "Removes the pin from the given object allowing it to be garbage collected if needed. (By default, recursively. Use -r=false for direct pins.) A pin may not be removed because the specified object is not pinned or pinned indirectly. To determine if the object is pinned indirectly, use the command: ipfs pin ls -t indirect <cid>",
					"name": "ipfs pin rm",
					"usage": "ipfs pin rm <ipfs-path>... - Remove object from pin-list.",
					"options": [
						{
							"option": "--recursive",
							"shortcut": "-r",
							"description": "Recursively unpin the object linked to by the specified object(s).",
							"value": "bool",
							"default": "true"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs pin update",
					"description": "Efficiently pins a new object based on differences from an existing one and, by default, removes the old pin. This command is useful when the new pin contains many similarities or is a derivative of an existing one, particularly for large objects. This allows a more efficient DAG-traversal which fully skips already-pinned branches from the old object. As a requirement, the old object needs to be an existing recursive pin.",
					"usage": "ipfs pin update <from-path> <to-path> - Update a recursive pin.",
					"options": [
						{
							"description": "Remove the old pin.",
							"option": "--unpin",
							"tags": [
								"bool"
							],
							"default": "true"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs pin verify",
					"description": "Verify that recursive pins are complete.",
					"usage": "ipfs pin verify [--verbose] [--quiet | -q]",
					"options": [
						{
							"option": "--quiet",
							"shortcut": "-q",
							"description": "Write just hashes of broken pins.",
							"value": "bool"
						},
						{
							"option": "--verbose",
							"description": "Also write the hashes of non-broken pins.",
							"value": "bool"
						}
					],
					"subcommands": []
				}
			]
		},
		{
			"name": "ipfs ping",
			"description": "'ipfs ping' is a tool to test sending data to other nodes. It finds nodes via the routing system, sends pings, waits for pongs, and prints out round-trip latency information.",
			"usage": "ipfs ping <peer ID>... - Send echo request packets to IPFS hosts.",
			"options": [
				{
					"description": "Number of ping messages to send.",
					"option": "--count",
					"shortcut": "-n",
					"value": "int",
					"default": "10"
				}
			],
			"subcommands": []
		},
		{
			"name": "ipfs pubsub",
			"description": "ipfs pubsub allows you to publish messages to a given topic, and also to subscribe to new messages on a given topic. DEPRECATED FEATURE (see https://github.com/ipfs/kubo/issues/9717) It is not intended in its current state to be used in a production environment. To use, the daemon must be run with '--enable-pubsub-experiment'.",
			"usage": "ipfs pubsub - An experimental publish-subscribe system on ipfs.",
			"subcommands": [
				{
					"description": "ipfs pubsub ls lists out the names of topics you are currently subscribed to.",
					"name": "ipfs pubsub ls",
					"options": [
						{
							"description": "Inspect the format by encoding/decoding multibase strings in the userland.",
							"option": "--enc",
							"value": "json"
						}
					],
					"subcommands": [],
					"usage": "ipfs pubsub ls - List subscribed topics by name."
				},
				{
					"description": "ipfs pubsub peers with no arguments lists out the pubsub peers you are currently connected to. If given a topic, it will list connected peers who are subscribed to the named topic. DEPRECATED FEATURE (see https://github.com/ipfs/kubo/issues/9717)",
					"name": "ipfs pubsub peers",
					"subcommands": [],
					"usage": "ipfs pubsub peers [<topic>]"
				},
				{
					"description": "ipfs pubsub pub publishes a message to a specified topic. It reads binary data from stdin or a file.",
					"name": "ipfs pubsub pub",
					"usage": "ipfs pubsub pub <topic> <data> - Publish data to a given pubsub topic.",
					"options": [
						{
							"option": "--enable-pubsub-experiment",
							"description": "Enable the pubsub experiment, required for publishing messages.",
							"tags": [
								"DEPRECATED"
							]
						}
					],
					"subcommands": []
				},
				{
					"description": "DEPRECATED, command will be removed in the future. ipfs pubsub sub subscribes to messages on a given topic.",
					"name": "ipfs pubsub sub",
					"usage": "ipfs pubsub sub [--] <topic>",
					"options": [
						{
							"description": "To use, the daemon must be run with '--enable-pubsub-experiment'.",
							"option": "--enable-pubsub-experiment",
							"tags": [
								"DEPRECATED"
							]
						},
						{
							"description": "You can inspect the format by passing --enc=json.",
							"option": "--enc=json"
						}
					],
					"subcommands": []
				}
			],
			"options": []
		},
		{
			"name": "ipfs routing",
			"description": "Issue routing commands.",
			"usage": "ipfs routing",
			"subcommands": [
				{
					"description": "Outputs a list of newline-delimited multiaddresses.",
					"name": "ipfs routing findpeer",
					"usage": "ipfs routing findpeer [--verbose | -v] [--] <peerID>...",
					"options": [
						{
							"description": "Print extra information.",
							"option": "--verbose",
							"shortcut": "-v",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs routing findprovs",
					"description": "Outputs a list of newline-delimited provider Peer IDs.",
					"usage": "ipfs routing findprovs <key>... - Find peers that can provide a specific value, given a key.",
					"options": [
						{
							"option": "--num-providers",
							"shortcut": "-n",
							"description": "The number of providers to find.",
							"value": "int",
							"default": "20"
						},
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"description": "Outputs the best value for the given key. There may be several different values for a given key stored in the routing system; in this context 'best' means the record that is most desirable. There is no one metric for 'best': it depends entirely on the key type. For IPNS, 'best' is the record that is both valid and has the highest sequence number (freshest). Different key types can specify other 'best' rules.",
					"name": "ipfs routing get",
					"usage": "ipfs routing get [--] <key>...",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs routing provide",
					"description": "EXPERIMENTAL, command may change in future releases",
					"usage": "ipfs routing provide <key>... - Announce to the network that you are providing given values.",
					"subcommands": [
						{
							"name": "ipfs routing provide routing",
							"description": "WARNING: EXPERIMENTAL, command may change in future releases",
							"usage": "ipfs routing provide <key>... - Announce to the network that you are providing given values.",
							"subcommands": [],
							"options": [
								{
									"option": "--recursive",
									"shortcut": "-r",
									"description": "Recursively provide entire graph.",
									"value": "bool"
								},
								{
									"option": "--verbose",
									"shortcut": "-v",
									"description": "Print extra information.",
									"value": "bool"
								}
							]
						}
					],
					"options": [
						{
							"option": "--recursive",
							"shortcut": "-r",
							"description": "Recursively provide entire graph.",
							"value": "bool"
						},
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					]
				},
				{
					"description": "WARNING: EXPERIMENTAL, command may change in future releases",
					"name": "ipfs routing put",
					"subcommands": [
						{
							"description": "WARNING: EXPERIMENTAL, command may change in future releases",
							"name": "ipfs routing put routing",
							"usage": "ipfs routing put <key> <value-file> - Write a key/value pair to the routing system.",
							"options": [
								{
									"description": "When offline, save the IPNS record to the local datastore without broadcasting to the network instead of simply failing.",
									"option": "--allow-offline",
									"tags": [
										"bool"
									]
								}
							],
							"subcommands": []
						}
					],
					"usage": "ipfs routing put <key> <value-file> - Write a key/value pair to the routing system.",
					"options": [
						{
							"description": "When offline, save the IPNS record to the the local datastore without broadcasting to the network instead of simply failing.",
							"option": "--allow-offline",
							"value": "bool"
						}
					]
				}
			],
			"options": []
		},
		{
			"name": "ipfs diag",
			"description": "Generate diagnostic reports.",
			"usage": "ipfs diag",
			"subcommands": [
				{
					"name": "ipfs diag cmds",
					"description": "Lists running and recently run commands.",
					"usage": "ipfs diag cmds - List commands run on this IPFS node.",
					"options": [
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					],
					"subcommands": [
						{
							"name": "ipfs diag cmds ipfs diag cmds clear",
							"description": "InterPlanetary File System command-line interface.",
							"usage": "ipfs <command> [<args>] [<options>]",
							"subcommands": [
								{
									"description": "Clear inactive requests from the log.",
									"name": "ipfs diag cmds ipfs diag cmds clear diag",
									"usage": "ipfs diag cmds clear",
									"subcommands": [],
									"options": []
								}
							]
						},
						{
							"name": "ipfs diag cmds ipfs diag cmds set-time",
							"description": "Set how long to keep inactive requests in the log.",
							"usage": "ipfs diag cmds set-time [--] <time>",
							"subcommands": [],
							"options": []
						}
					]
				},
				{
					"name": "ipfs diag profile",
					"usage": "ipfs diag profile [--output=<output> | -o] [--collectors=<collectors>]... [--profile-time=<profile-time>] [--mutex-profile-fraction=<mutex-profile-fraction>] [--block-profile-rate=<block-profile-rate>]",
					"description": "Collects profiles from a running go-ipfs daemon into a single zipfile. To aid in debugging, this command also attempts to include a copy of the running go-ipfs binary.",
					"options": [
						{
							"option": "--block-profile-rate",
							"description": "The duration to wait between sampling goroutine-blocking events for the blocking profile.",
							"value": "string",
							"default": "1ms"
						},
						{
							"option": "--collectors",
							"description": "The list of collectors to use for collecting diagnostic data.",
							"value": "array",
							"default": "[goroutines-stack goroutines-pprof version heap allocs bin cpu mutex block]"
						},
						{
							"option": "--mutex-profile-fraction",
							"description": "The fraction 1/n of mutex contention events that are reported in the mutex profile.",
							"value": "int",
							"default": "4"
						},
						{
							"option": "--output",
							"shortcut": "-o",
							"description": "The path where the output .zip should be stored.",
							"value": "string",
							"default": "./ipfs-profile-[timestamp].zip"
						},
						{
							"option": "--profile-time",
							"description": "The amount of time spent profiling. If this is set to 0, then sampling profiles are skipped.",
							"value": "string",
							"default": "30s"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs diag sys",
					"description": "Print system diagnostic information.",
					"usage": "ipfs diag sys",
					"subcommands": [
						{
							"name": "ipfs diag sys diag",
							"description": "Print system diagnostic information.",
							"usage": "ipfs diag sys",
							"subcommands": [],
							"options": []
						}
					],
					"options": []
				}
			]
		},
		{
			"name": "ipfs update",
			"description": "An external command for updating IPFS that needs to be installed. Visit https://github.com/ipfs/ipfs-update/blob/master/README.md#install for installation instructions.",
			"usage": "ipfs-update [<flags>] <subcommand> [<args>]",
			"subcommands": [],
			"options": []
		},
		{
			"name": "ipfs shutdown",
			"description": "IPFS command-line tool.",
			"usage": "ipfs shutdown",
			"subcommands": []
		},
		{
			"description": "Interact with filestore objects.",
			"name": "ipfs filestore",
			"subcommands": [
				{
					"description": "List blocks that are both in the filestore and standard block storage.",
					"name": "ipfs filestore dups",
					"subcommands": [
						{
							"name": "ipfs filestore dups filestore",
							"description": "A tool for interacting with the InterPlanetary File System (IPFS).",
							"usage": "ipfs filestore dups - List blocks that are both in the filestore and standard block storage.",
							"subcommands": [
								{
									"description": "List blocks that are both in the filestore and standard block storage.",
									"name": "ipfs filestore dups filestore dups",
									"usage": "ipfs filestore dups",
									"options": [],
									"subcommands": []
								}
							],
							"options": []
						}
					],
					"usage": "ipfs filestore dups"
				},
				{
					"description": "List objects in the filestore. If one or more <obj> is specified only list those specific objects, otherwise list all objects. The output is: <hash> <size> <path> <offset>",
					"name": "ipfs filestore ls",
					"usage": "ipfs filestore ls [--file-order] [--] [<obj>...]",
					"options": [
						{
							"description": "Sort the results based on the path of the backing file.",
							"option": "--file-order",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"description": "Verify objects in the filestore. If one or more <obj> is specified only verify those specific objects, otherwise verify all objects. The output is: <status> <hash> <size> <path> <offset> Where <status> is one of: ok: the block can be reconstructed changed: the contents of the backing file have changed no-file: the backing file could not be found error: there was some other problem reading the file missing: <obj> could not be found in the filestore ERROR: internal error, most likely due to a corrupt database For ERROR entries the error will also be printed to stderr.",
					"name": "ipfs filestore verify",
					"options": [
						{
							"description": "Verify the objects based on the order of the backing file.",
							"option": "--file-order",
							"value": "bool"
						}
					],
					"usage": "ipfs filestore verify [--file-order] [--] [<obj>...]",
					"subcommands": []
				}
			],
			"usage": "ipfs filestore"
		},
		{
			"description": "'ipfs dag' is used for creating and manipulating DAG objects/hierarchies. This subcommand is intended to deprecate and replace the existing 'ipfs object' command moving forward.",
			"name": "ipfs dag",
			"subcommands": [
				{
					"name": "ipfs dag export",
					"description": "'ipfs dag export' fetches a DAG and streams it out as a well-formed .car file. Note that at present only single root selections / .car files are supported. The output of blocks happens in strict DAG-traversal, first-seen, order. CAR file follows the CARv1 format: https://ipld.io/specs/transport/car/carv1/",
					"usage": "ipfs dag export <root> - Streams the selected DAG as a .car stream on stdout.",
					"subcommands": [],
					"options": [
						{
							"option": "--progress",
							"shortcut": "-p",
							"description": "Display progress on CLI. Defaults to true when STDERR is a TTY.",
							"value": "bool",
							"default": "true"
						}
					]
				},
				{
					"description": "'ipfs dag get' fetches a DAG node from IPFS and prints it out in the specified format.",
					"name": "ipfs dag get",
					"options": [
						{
							"default": "dag-json",
							"description": "Format that the object will be encoded as.",
							"option": "--output-codec",
							"value": "string"
						}
					],
					"usage": "ipfs dag get [--output-codec=<output-codec>] [--] <ref>",
					"subcommands": []
				},
				{
					"name": "ipfs dag import",
					"description": "'ipfs dag import' imports all blocks present in supplied .car (Content Address aRchive) files, recursively pinning any roots specified in the CAR file headers, unless --pin-roots is set to false.",
					"usage": "ipfs dag import <path>... - Import the contents of .car files",
					"subcommands": [],
					"options": [
						{
							"option": "--allow-big-block",
							"description": "Disable block size check and allow creation of blocks bigger than 1MiB. WARNING: such blocks won't be transferable over the standard bitswap.",
							"value": "bool",
							"default": "false"
						},
						{
							"option": "--pin-roots",
							"description": "Pin optional roots listed in the .car headers after importing.",
							"value": "bool",
							"default": "true"
						},
						{
							"option": "--silent",
							"description": "No output.",
							"value": "bool"
						},
						{
							"option": "--stats",
							"description": "Output stats.",
							"value": "bool"
						}
					]
				},
				{
					"name": "ipfs dag put",
					"description": "'ipfs dag put' accepts input from a file or stdin and parses it into an object of the specified format.",
					"usage": "ipfs dag put <object data>... - Add a DAG node to IPFS.",
					"options": [
						{
							"option": "--allow-big-block",
							"description": "Disable block size check and allow creation of blocks bigger than 1MiB. WARNING: such blocks won't be transferable over the standard bitswap.",
							"value": "bool",
							"default": "false"
						},
						{
							"option": "--hash",
							"description": "Hash function to use.",
							"value": "string",
							"default": "sha2-256"
						},
						{
							"option": "--input-codec",
							"description": "Codec that the input object is encoded in.",
							"value": "string",
							"default": "dag-json"
						},
						{
							"option": "--pin",
							"description": "Pin this object when adding.",
							"value": "bool"
						},
						{
							"option": "--store-codec",
							"description": "Codec that the stored object will be encoded with.",
							"value": "string",
							"default": "dag-cbor"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs dag resolve",
					"description": "IPFS command-line interface",
					"usage": "ipfs <command> [<args>]",
					"subcommands": [
						{
							"name": "ipfs dag resolve dag resolve",
							"description": "'ipfs dag resolve' fetches a DAG node from IPFS, prints its address and remaining path.",
							"usage": "ipfs dag resolve <ref> - Resolve IPLD block.",
							"options": [],
							"subcommands": []
						}
					],
					"options": []
				},
				{
					"description": "'ipfs dag stat' fetches a DAG and returns various statistics about it. Statistics include size and number of blocks. Note: This command skips duplicate blocks in reporting both size and the number of blocks",
					"name": "ipfs dag stat",
					"usage": "ipfs dag stat <root>... - Gets stats for a DAG.",
					"options": [
						{
							"description": "Return progressive data while reading through the DAG.",
							"option": "--progress",
							"shortcut": "-p",
							"value": "bool",
							"default": "true"
						}
					],
					"subcommands": []
				}
			],
			"usage": "ipfs dag"
		},
		{
			"name": "ipfs get",
			"description": "Stores to disk the data contained in an IPFS or IPNS object(s) at the given path.",
			"usage": "ipfs get <ipfs-path> - Download IPFS objects.",
			"options": [
				{
					"option": "--archive",
					"shortcut": "-a",
					"description": "Output a TAR archive.",
					"value": "bool"
				},
				{
					"option": "--compress",
					"shortcut": "-C",
					"description": "Compress the output with GZIP compression.",
					"value": "bool"
				},
				{
					"option": "--compression-level",
					"shortcut": "-l",
					"description": "The level of compression (1-9).",
					"value": "int"
				},
				{
					"option": "--output",
					"shortcut": "-o",
					"description": "The path where the output should be stored.",
					"value": "string"
				},
				{
					"option": "--progress",
					"shortcut": "-p",
					"description": "Stream progress data.",
					"value": "bool",
					"default": "true"
				}
			],
			"subcommands": []
		},
		{
			"name": "ipfs daemon",
			"description": "Run a network-connected IPFS node.",
			"usage": "ipfs daemon [--init] [--init-config=<init-config>] [--init-profile=<init-profile>] [--routing=<routing>] [--mount] [--writable] [--mount-ipfs=<mount-ipfs>] [--mount-ipns=<mount-ipns>] [--unrestricted-api] [--disable-transport-encryption] [--enable-gc] [--manage-fdlimit=false] [--migrate] [--enable-pubsub-experiment] [--enable-namesys-pubsub] [--enable-mplex-experiment] [--agent-version-suffix=<agent-version-suffix>]",
			"options": [
				{
					"description": "Optional suffix to the AgentVersion presented by `ipfs id` and also advertised through BitSwap.",
					"option": "--agent-version-suffix",
					"value": "string"
				},
				{
					"description": "DEPRECATED.",
					"option": "--enable-mplex-experiment"
				},
				{
					"description": "Enable IPNS over pubsub. Implicitly enables pubsub, overrides Ipns.UsePubsub config.",
					"option": "--enable-namesys-pubsub"
				},
				{
					"description": "DEPRECATED.",
					"option": "--enable-pubsub-experiment"
				},
				{
					"description": "Enable automatic periodic repo garbage collection.",
					"option": "--enable-gc"
				},
				{
					"description": "Disable transport encryption (for debugging protocols).",
					"option": "--disable-transport-encryption"
				},
				{
					"description": "Initialize ipfs with default settings if not already initialized.",
					"option": "--init"
				},
				{
					"description": "Path to existing configuration file to be loaded during --init.",
					"option": "--init-config",
					"value": "string"
				},
				{
					"description": "Configuration profiles to apply for --init. See ipfs init --help for more.",
					"option": "--init-profile",
					"value": "string"
				},
				{
					"default": "true",
					"description": "Check and raise file descriptor limits if needed.",
					"option": "--manage-fdlimit",
					"value": "bool"
				},
				{
					"description": "If true, assume yes at the migrate prompt. If false, assume no.",
					"option": "--migrate"
				},
				{
					"description": "Mounts IPFS to the filesystem using FUSE (experimental).",
					"option": "--mount"
				},
				{
					"description": "Path to the mountpoint for IPFS (if using --mount). Defaults to config setting.",
					"option": "--mount-ipfs",
					"value": "string"
				},
				{
					"description": "Path to the mountpoint for IPNS (if using --mount). Defaults to config setting.",
					"option": "--mount-ipns",
					"value": "string"
				},
				{
					"description": "Overrides the routing option.",
					"option": "--routing",
					"value": "string",
					"default": "default"
				},
				{
					"description": "Allow API access to unlisted hashes.",
					"option": "--unrestricted-api"
				},
				{
					"description": "Enable legacy Gateway.Writable (REMOVED).",
					"option": "--writable"
				}
			],
			"subcommands": []
		},
		{
			"description": "List directory contents for Unix filesystem objects.",
			"name": "ipfs ls",
			"usage": "ipfs ls <ipfs-path>... - List directory contents for Unix filesystem objects.",
			"options": [
				{
					"description": "Print table headers (Hash, Size, Name).",
					"option": "--headers",
					"shortcut": "-v",
					"tags": [
						"bool"
					]
				},
				{
					"description": "Resolve linked objects to find out their types.",
					"option": "--resolve-type",
					"tags": [
						"bool"
					],
					"default": "true"
				},
				{
					"description": "Resolve linked objects to find out their file size.",
					"option": "--size",
					"tags": [
						"bool"
					],
					"default": "true"
				},
				{
					"description": "Enable experimental streaming of directory entries as they are traversed.",
					"option": "--stream",
					"shortcut": "-s",
					"tags": [
						"bool"
					]
				}
			],
			"subcommands": []
		},
		{
			"name": "ipfs key",
			"description": "Create and list IPNS name keypairs",
			"usage": "ipfs key",
			"subcommands": [
				{
					"name": "ipfs key export",
					"description": "Exports a named libp2p key to disk.",
					"usage": "ipfs key export <name> - Export a keypair",
					"subcommands": [],
					"options": [
						{
							"description": "The format of the exported private key, libp2p-protobuf-cleartext or pem-pkcs8-cleartext.",
							"option": "--format",
							"shortcut": "-f",
							"value": "string",
							"default": "libp2p-protobuf-cleartext"
						},
						{
							"description": "The path where the output should be stored.",
							"option": "--output",
							"shortcut": "-o",
							"value": "string"
						}
					]
				},
				{
					"name": "ipfs key gen",
					"description": "Create a new keypair",
					"usage": "ipfs key gen <name>",
					"subcommands": [],
					"options": [
						{
							"option": "--ipns-base",
							"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
							"value": "string",
							"default": "base36"
						},
						{
							"option": "--size",
							"shortcut": "-s",
							"description": "size of the key to generate.",
							"value": "int"
						},
						{
							"option": "--type",
							"shortcut": "-t",
							"description": "type of the key to create: rsa, ed25519.",
							"value": "string",
							"default": "ed25519"
						}
					]
				},
				{
					"name": "ipfs key import",
					"description": "Imports a key and stores it under the provided name.",
					"usage": "ipfs key import <name> <key> - Import a key and prints imported key id",
					"subcommands": [],
					"options": [
						{
							"option": "--allow-any-key-type",
							"description": "Allow importing any key type.",
							"value": "bool",
							"default": "false"
						},
						{
							"option": "--format",
							"shortcut": "-f",
							"description": "The format of the private key to import, libp2p-protobuf-cleartext or pem-pkcs8-cleartext.",
							"value": "string",
							"default": "libp2p-protobuf-cleartext"
						},
						{
							"option": "--ipns-base",
							"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
							"value": "string",
							"default": "base36"
						}
					]
				},
				{
					"description": "List all local keypairs.",
					"name": "ipfs key list",
					"usage": "ipfs key list [-l] [--ipns-base=<ipns-base>]",
					"options": [
						{
							"description": "Show extra information about keys.",
							"option": "-l",
							"tags": [
								"bool"
							]
						},
						{
							"default": "base36",
							"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
							"option": "--ipns-base",
							"tags": [
								"string"
							],
							"value": "<ipns-base>"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs key rename",
					"description": "Rename a keypair.",
					"usage": "ipfs key rename <name> <newName> - Rename a keypair.",
					"subcommands": [],
					"options": [
						{
							"option": "--force",
							"shortcut": "-f",
							"description": "Allow to overwrite an existing key.",
							"value": "bool"
						},
						{
							"option": "--ipns-base",
							"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
							"value": "string",
							"default": "base36"
						}
					]
				},
				{
					"name": "ipfs key rm",
					"description": "Remove a keypair.",
					"usage": "ipfs key rm <name>... - Remove a keypair.",
					"subcommands": [],
					"options": [
						{
							"option": "--ipns-base",
							"description": "Encoding used for keys: Can either be a multibase encoded CID or a base58btc encoded multihash. Takes {b58mh|base36|k|base32|b...}.",
							"value": "string",
							"default": "base36"
						},
						{
							"option": "-l",
							"description": "Show extra information about keys.",
							"value": "bool"
						}
					]
				},
				{
					"name": "ipfs key rotate",
					"description": "Generates a new ipfs identity and saves it to the ipfs config file. Your existing identity key will be backed up in the Keystore. The daemon must not be running when calling this command. ipfs uses a repository in the local file system. By default, the repo is located at ~/.ipfs. To change the repo location, set the $IPFS_PATH environment variable: export IPFS_PATH=/path/to/ipfsrepo",
					"usage": "ipfs key rotate - Rotates the IPFS identity.",
					"subcommands": [],
					"options": [
						{
							"option": "--oldkey",
							"shortcut": "-o",
							"description": "Keystore name to use for backing up your existing identity.",
							"value": "string"
						},
						{
							"option": "--size",
							"shortcut": "-s",
							"description": "size of the key to generate.",
							"value": "int"
						},
						{
							"option": "--type",
							"shortcut": "-t",
							"description": "type of the key to create: rsa, ed25519.",
							"value": "string",
							"default": "ed25519"
						}
					]
				}
			]
		},
		{
			"name": "ipfs add",
			"description": "Add a file or directory to IPFS.",
			"usage": "ipfs add <path>... - Add a file or directory to IPFS.",
			"options": [
				{
					"option": "--cid-version",
					"description": "CID version. Defaults to 0 unless an option that depends on CIDv1 is passed. Passing version 1 will cause the raw-leaves option to default to true.",
					"value": "<cid-version>"
				},
				{
					"option": "--chunker",
					"shortcut": "-s",
					"description": "Chunking algorithm, size-[bytes], rabin-[min]-[avg]-[max] or buzhash.",
					"default": "size-262144",
					"value": "<chunker>"
				},
				{
					"option": "--dereference-args",
					"description": "Symlinks supplied in arguments are dereferenced."
				},
				{
					"option": "--fscache",
					"description": "Check the filestore for pre-existing blocks. (experimental)."
				},
				{
					"option": "--hash",
					"description": "Hash function to use. Implies CIDv1 if not sha2-256. (experimental).",
					"default": "sha2-256",
					"value": "<hash>"
				},
				{
					"option": "--hidden",
					"shortcut": "-H",
					"description": "Include files that are hidden. Only takes effect on recursive add."
				},
				{
					"option": "--ignore",
					"description": "A rule (.gitignore-stype) defining which file(s) should be ignored (variadic, experimental).",
					"value": "<ignore>"
				},
				{
					"option": "--ignore-rules-path",
					"description": "A path to a file with .gitignore-style ignore rules (experimental).",
					"value": "<ignore-rules-path>"
				},
				{
					"option": "--inline",
					"description": "Inline small blocks into CIDs. (experimental)."
				},
				{
					"option": "--inline-limit",
					"description": "Maximum block size to inline. (experimental).",
					"default": "32",
					"value": "<inline-limit>"
				},
				{
					"option": "--nocopy",
					"description": "Add the file using filestore. Implies raw-leaves. (experimental)."
				},
				{
					"option": "--only-hash",
					"shortcut": "-n",
					"description": "Only chunk and hash - do not write to disk."
				},
				{
					"option": "--pin",
					"description": "Pin locally to protect added files from garbage collection.",
					"default": "true"
				},
				{
					"option": "--progress",
					"shortcut": "-p",
					"description": "Stream progress data."
				},
				{
					"option": "--quiet",
					"shortcut": "-q",
					"description": "Write minimal output."
				},
				{
					"option": "--quieter",
					"shortcut": "-Q",
					"description": "Write only final hash."
				},
				{
					"option": "--raw-leaves",
					"description": "Use raw blocks for leaf nodes."
				},
				{
					"option": "--recursive",
					"shortcut": "-r",
					"description": "Add directory paths recursively."
				},
				{
					"option": "--silent",
					"description": "Write no output."
				},
				{
					"option": "--stdin-name",
					"description": "Assign a name if the file source is stdin.",
					"value": "<stdin-name>"
				},
				{
					"option": "--to-files",
					"description": "Add reference to Files API (MFS) at the provided path.",
					"value": "<to-files>"
				},
				{
					"option": "--trickle",
					"shortcut": "-t",
					"description": "Use trickle-dag format for dag generation."
				},
				{
					"option": "--wrap-with-directory",
					"shortcut": "-w",
					"description": "Wrap files with a directory object."
				}
			],
			"subcommands": []
		},
		{
			"name": "ipfs refs",
			"description": "Lists the hashes of all the links an IPFS or IPNS object(s) contains, with the following format: <link base58 hash>. List all references recursively by using the flag '-r'. NOTE: Like most other commands, Kubo will try to fetch the blocks of the passed path if they can't be found in the local store if it is running in online mode.",
			"usage": "ipfs refs <ipfs-path>... - List links (references) from an object.",
			"options": [
				{
					"option": "--edges",
					"shortcut": "-e",
					"description": "Emit edge format: `<from> -> <to>`.",
					"value": "bool"
				},
				{
					"option": "--format",
					"description": "Emit edges with given format. Available tokens: <src> <dst> <linkname>. Default: <dst>.",
					"value": "string",
					"default": "<dst>"
				},
				{
					"option": "--max-depth",
					"description": "Only for recursive refs, limits fetch and listing to the given depth. Default: -1.",
					"value": "int",
					"default": "-1"
				},
				{
					"option": "--recursive",
					"shortcut": "-r",
					"description": "Recursively list links of child nodes.",
					"value": "bool"
				},
				{
					"option": "--unique",
					"shortcut": "-u",
					"description": "Omit duplicate refs from output.",
					"value": "bool"
				}
			],
			"subcommands": [
				{
					"name": "ipfs refs local",
					"description": "InterPlanetary File System (IPFS) command-line tool.",
					"usage": "ipfs refs local - List all local references.",
					"subcommands": [
						{
							"name": "ipfs refs local refs",
							"description": "Displays the hashes of all local objects. NOTE: This treats all local objects as 'raw blocks' and returns CIDv1-Raw CIDs.",
							"usage": "ipfs refs local - List all local references.",
							"subcommands": [],
							"options": []
						}
					],
					"options": []
				}
			]
		},
		{
			"name": "ipfs ping",
			"description": "'ipfs ping' is a tool to test sending data to other nodes. It finds nodes via the routing system, sends pings, waits for pongs, and prints out round-trip latency information.",
			"usage": "ipfs ping <peer ID>... - Send echo request packets to IPFS hosts.",
			"options": [
				{
					"option": "--count",
					"shortcut": "-n",
					"description": "Number of ping messages to send.",
					"value": "int",
					"default": "10"
				}
			],
			"subcommands": []
		},
		{
			"description": "There are a number of mutable name protocols that can link among themselves and into IPNS. For example IPNS references can (currently) point at an IPFS object, and DNS links can point at other DNS links, IPNS entries, or IPFS objects. This command accepts any of these identifiers and resolves them to the referenced item.",
			"name": "ipfs resolve",
			"usage": "ipfs resolve <name> - Resolve the value of names to IPFS.",
			"options": [
				{
					"default": "true",
					"description": "Resolve until the result is an IPFS name.",
					"option": "--recursive",
					"shortcut": "-r",
					"tags": [
						"bool"
					]
				},
				{
					"description": "Number of records to request for DHT resolution.",
					"option": "--dht-record-count",
					"shortcut": "--dhtrc",
					"tags": [
						"int"
					],
					"value": "<dht-record-count>"
				},
				{
					"description": "Max time to collect values during DHT resolution eg \"30s\". Pass 0 for no timeout.",
					"option": "--dht-timeout",
					"shortcut": "--dhtt",
					"tags": [
						"string"
					],
					"value": "<dht-timeout>"
				}
			],
			"subcommands": []
		},
		{
			"name": "ipfs repo",
			"description": "'ipfs repo' is a plumbing command used to manipulate the repo.",
			"usage": "ipfs repo - Manipulate the IPFS repo.",
			"subcommands": [
				{
					"name": "ipfs repo gc",
					"description": "'ipfs repo gc' is a plumbing command that will sweep the local set of stored objects and remove ones that are not pinned in order to reclaim hard disk space.",
					"usage": "ipfs repo gc - Perform a garbage collection sweep on the repo.",
					"options": [
						{
							"option": "--quiet",
							"shortcut": "-q",
							"description": "Write minimal output.",
							"value": "bool"
						},
						{
							"option": "--silent",
							"description": "Write no output.",
							"value": "bool"
						},
						{
							"option": "--stream-errors",
							"description": "Stream errors.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs repo ls",
					"description": "Displays the hashes of all local objects. NOTE: This treats all local objects as \"raw blocks\" and returns CIDv1-Raw CIDs.",
					"usage": "ipfs repo ls",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs repo migrate",
					"description": "Apply any outstanding migrations to the repo.",
					"usage": "ipfs repo migrate [--allow-downgrade]",
					"options": [
						{
							"option": "--allow-downgrade",
							"description": "Allow downgrading to a lower repo version.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"description": "'ipfs repo stat' provides information about the local set of stored objects. It outputs RepoSize, StorageMax, NumObjects, RepoPath, and Version.",
					"name": "ipfs repo stat",
					"options": [
						{
							"description": "Print sizes in human readable format (e.g., 1K 234M 2G).",
							"option": "--human",
							"shortcut": "-H",
							"tags": [
								"bool"
							]
						},
						{
							"description": "Only report RepoSize and StorageMax.",
							"option": "--size-only",
							"shortcut": "-s",
							"tags": [
								"bool"
							]
						}
					],
					"usage": "ipfs repo stat [--size-only | -s] [--human | -H]",
					"subcommands": []
				},
				{
					"name": "ipfs repo verify",
					"description": "InterPlanetary File System command-line tool.",
					"usage": "ipfs repo verify - Verify all blocks in repo are not corrupted.",
					"subcommands": [
						{
							"name": "ipfs repo verify repo",
							"description": "InterPlanetary File System command-line tool.",
							"usage": "ipfs <subcommand> [options]",
							"subcommands": []
						}
					]
				},
				{
					"name": "ipfs repo version",
					"description": "",
					"usage": "ipfs repo version - Show the repo version.",
					"subcommands": [
						{
							"name": "ipfs repo version repo",
							"description": "A command-line tool for managing IPFS repositories.",
							"usage": "ipfs <subcommand> [<options>]",
							"subcommands": []
						}
					]
				}
			]
		},
		{
			"description": "Returns the current version of IPFS and exits.",
			"name": "ipfs version",
			"usage": "ipfs version [--number | -n] [--commit] [--repo] [--all]",
			"options": [
				{
					"description": "Show all version information.",
					"option": "--all",
					"tags": [
						"bool"
					]
				},
				{
					"description": "Show the commit hash.",
					"option": "--commit",
					"tags": [
						"bool"
					]
				},
				{
					"description": "Only show the version number.",
					"option": "--number",
					"shortcut": "-n",
					"tags": [
						"bool"
					]
				},
				{
					"description": "Show repo version.",
					"option": "--repo",
					"tags": [
						"bool"
					]
				}
			],
			"subcommands": [
				{
					"description": "Print out all dependencies and their versions.",
					"subcommands": [
						{
							"name": "ipfs version deps version",
							"description": "IPFS command-line interface",
							"usage": "ipfs version deps",
							"subcommands": [
								{
									"name": "ipfs version deps version deps",
									"description": "IPFS command-line interface.",
									"usage": "ipfs version deps - Shows information about dependencies used for build.",
									"subcommands": [
										{
											"description": "Print out all dependencies and their versions.",
											"subcommands": [
												{
													"name": "ipfs version deps version deps version deps",
													"description": "Command-line tool for interacting with IPFS.",
													"usage": "ipfs version deps",
													"subcommands": [
														{
															"name": "ipfs version deps version deps version deps version",
															"description": "Command-line interface for IPFS.",
															"usage": "ipfs <command> [<args>]",
															"subcommands": [],
															"options": []
														}
													],
													"options": []
												}
											],
											"usage": "ipfs version deps",
											"name": "ipfs version deps version deps version"
										}
									],
									"options": []
								}
							],
							"options": []
						}
					],
					"usage": "ipfs version deps",
					"name": "ipfs version deps"
				}
			]
		},
		{
			"name": "ipfs stats",
			"description": "'ipfs stats' is a set of commands to help look at statistics for your IPFS node.",
			"usage": "ipfs stats - Query IPFS statistics.",
			"subcommands": [
				{
					"name": "ipfs stats bitswap",
					"description": "Show some diagnostic information on the bitswap agent.",
					"usage": "ipfs stats bitswap [--verbose | -v] [--human]",
					"options": [
						{
							"option": "--human",
							"description": "Print sizes in human readable format (e.g., 1K 234M 2G).",
							"value": "bool"
						},
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"description": "'ipfs stats bw' prints bandwidth information for the ipfs daemon. It displays: TotalIn, TotalOut, RateIn, RateOut. By default, overall bandwidth and all protocols are shown. To limit bandwidth to a particular peer, use the 'peer' option along with that peer's multihash id. To specify a specific protocol, use the 'proto' option. The 'peer' and 'proto' options cannot be specified simultaneously. The protocols that are queried using this method are outlined in the specification: https://github.com/libp2p/specs/blob/master/7-properties.md#757-protocol-multicodecs",
					"name": "ipfs stats bw",
					"usage": "ipfs stats bw [--peer=<peer> | -p] [--proto=<proto> | -t] [--poll] [--interval=<interval> | -i]",
					"options": [
						{
							"description": "Time interval to wait between updating output, if 'poll' is true. This accepts durations such as '300s', '1.5h' or '2h45m'. Valid time units are: 'ns', 'us' (or 'µs'), 'ms', 's', 'm', 'h'. Default: 1s.",
							"option": "--interval",
							"shortcut": "-i",
							"value": "string"
						},
						{
							"description": "Specify a peer to print bandwidth for.",
							"option": "--peer",
							"shortcut": "-p",
							"value": "string"
						},
						{
							"description": "Print bandwidth at an interval.",
							"option": "--poll",
							"value": "bool"
						},
						{
							"description": "Specify a protocol to print bandwidth for.",
							"option": "--proto",
							"shortcut": "-t",
							"value": "string"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs stats dht",
					"description": "Returns statistics about the DHT(s) the node is participating in. This interface is not stable and may change from release to release.",
					"usage": "ipfs stats dht [--] [<dht>...]",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs stats provide",
					"description": "Returns statistics about the node's (re)provider system.",
					"usage": "ipfs stats provide",
					"options": [],
					"subcommands": []
				},
				{
					"description": "'ipfs repo stat' provides information about the local set of stored objects. It outputs: RepoSize, StorageMax, NumObjects, RepoPath, and Version.",
					"name": "ipfs stats repo",
					"subcommands": [],
					"options": [
						{
							"description": "Print sizes in human readable format (e.g., 1K 234M 2G).",
							"option": "--human",
							"shortcut": "-H",
							"value": "bool"
						},
						{
							"description": "Only report RepoSize and StorageMax.",
							"option": "--size-only",
							"shortcut": "-s",
							"value": "bool"
						}
					],
					"usage": "ipfs stats repo [--size-only | -s] [--human | -H]"
				}
			]
		},
		{
			"name": "ipfs swarm",
			"description": "'ipfs swarm' is a tool to manipulate the network swarm. The swarm is the component that opens, listens for, and maintains connections to other ipfs peers in the internet.",
			"usage": "ipfs swarm",
			"subcommands": [
				{
					"name": "ipfs swarm addrs",
					"description": "'ipfs swarm addrs' lists all addresses this node is aware of.",
					"usage": "ipfs swarm addrs - List known addresses. Useful for debugging.",
					"subcommands": [
						{
							"subcommands": [
								{
									"name": "ipfs swarm addrs ipfs swarm addrs listen listen",
									"description": "The ipfs command-line tool.",
									"usage": "ipfs [<subcommand>] [<options>]",
									"subcommands": [
										{
											"name": "ipfs swarm addrs ipfs swarm addrs listen listen swarm",
											"description": "'ipfs swarm addrs listen' lists all interface addresses the node is listening on.",
											"usage": "ipfs swarm addrs listen",
											"subcommands": [],
											"options": []
										}
									],
									"options": []
								}
							],
							"options": [],
							"description": "'ipfs swarm addrs listen' lists all interface addresses the node is listening on.",
							"name": "ipfs swarm addrs ipfs swarm addrs listen",
							"usage": "ipfs swarm addrs listen"
						},
						{
							"description": "'ipfs swarm addrs local' lists all local listening addresses announced to the network.",
							"name": "ipfs swarm addrs ipfs swarm addrs local",
							"subcommands": [
								{
									"name": "ipfs swarm addrs ipfs swarm addrs local swarm",
									"description": "'ipfs swarm addrs local' lists all local listening addresses announced to the network.",
									"usage": "ipfs swarm addrs local - List local addresses.",
									"subcommands": [],
									"options": [
										{
											"option": "--id",
											"description": "Show peer ID in addresses.",
											"tags": [
												"bool"
											]
										}
									]
								}
							],
							"usage": "ipfs swarm addrs local [--id]",
							"options": [
								{
									"description": "Show peer ID in addresses.",
									"option": "--id",
									"tags": [
										"bool"
									]
								}
							]
						}
					]
				},
				{
					"name": "ipfs swarm connect",
					"description": "'ipfs swarm connect' attempts to ensure a connection to a given peer. Multiaddresses given are advisory, for example the node may already be aware of other addresses for a given peer or may already have an established connection to the peer. The address format is a libp2p multiaddr.",
					"usage": "ipfs swarm connect <address>... - Open connection to a given peer.",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs swarm disconnect",
					"description": "'ipfs swarm disconnect' closes a connection to a peer address. The address format is an IPFS multiaddr. The disconnect is not permanent; if ipfs needs to talk to that address later, it will reconnect.",
					"usage": "ipfs swarm disconnect <address>... - Close connection to a given address.",
					"subcommands": [],
					"options": []
				},
				{
					"name": "ipfs swarm filters",
					"description": "'ipfs swarm filters' will list out currently applied filters. Its subcommands can be used to add or remove said filters. Filters are specified using the multiaddr-filter format.",
					"usage": "ipfs swarm filters - Manipulate address filters.",
					"subcommands": [
						{
							"description": "'ipfs swarm filters add' will add an address filter to the daemons swarm.",
							"name": "ipfs swarm filters add",
							"subcommands": [],
							"usage": "ipfs swarm filters add <address>... - Add an address filter."
						},
						{
							"description": "'ipfs swarm filters rm' will remove an address filter from the daemons swarm.",
							"name": "ipfs swarm filters rm",
							"subcommands": [
								{
									"name": "ipfs swarm filters rm swarm",
									"description": "IPFS command line interface.",
									"usage": "ipfs <command> [<args>]",
									"subcommands": []
								}
							],
							"usage": "ipfs swarm filters rm <address>... - Remove an address filter."
						}
					]
				},
				{
					"description": "'ipfs swarm peering' manages the peering subsystem. Peers in the peering subsystem are maintained to be connected, reconnected on disconnect with a back-off. The changes are not saved to the config.",
					"name": "ipfs swarm peering",
					"subcommands": [
						{
							"name": "ipfs swarm peering add",
							"description": "Command-line interface for IPFS operations.",
							"usage": "ipfs swarm peering add <address>... - Add peers into the peering subsystem.",
							"subcommands": [
								{
									"name": "ipfs swarm peering add swarm",
									"description": "'ipfs swarm peering add' will add the new address to the peering subsystem as one that should always be connected to.",
									"usage": "ipfs swarm peering add [--] <address>...",
									"subcommands": [],
									"options": []
								}
							]
						},
						{
							"name": "ipfs swarm peering ls",
							"description": "A tool for interacting with the InterPlanetary File System.",
							"usage": "ipfs <subcommand> [options]",
							"subcommands": [
								{
									"name": "ipfs swarm peering ls swarm",
									"description": "'ipfs swarm peering ls' lists the peers that are registered in the peering subsystem and to which the daemon is always connected.",
									"usage": "ipfs swarm peering ls",
									"subcommands": [],
									"options": []
								}
							]
						},
						{
							"description": "'ipfs swarm peering rm' will remove the given ID from the peering subsystem and remove it from the always-on connection.",
							"name": "ipfs swarm peering rm",
							"subcommands": [
								{
									"description": "'ipfs swarm peering rm' will remove the given ID from the peering subsystem and remove it from the always-on connection.",
									"name": "ipfs swarm peering rm swarm",
									"subcommands": [],
									"usage": "ipfs swarm peering rm <ID>... - Remove a peer from the peering subsystem."
								}
							],
							"usage": "ipfs swarm peering rm <ID>..."
						}
					],
					"usage": "ipfs swarm peering - Modify the peering subsystem."
				},
				{
					"name": "ipfs swarm peers",
					"description": "InterPlanetary File System (IPFS) command-line interface.",
					"usage": "ipfs <command> [<args>]",
					"subcommands": [
						{
							"name": "ipfs swarm peers swarm",
							"description": "'ipfs swarm peers' lists the set of peers this node is connected to.",
							"usage": "ipfs swarm peers [--verbose | -v] [--streams] [--latency] [--direction] [--identify]",
							"subcommands": [],
							"options": [
								{
									"option": "--direction",
									"description": "Also list information about the direction of connection.",
									"value": "bool"
								},
								{
									"option": "--identify",
									"description": "Also list information about peers identify.",
									"value": "bool"
								},
								{
									"option": "--latency",
									"description": "Also list information about latency to each peer.",
									"value": "bool"
								},
								{
									"option": "--streams",
									"description": "Also list information about open streams for each peer.",
									"value": "bool"
								},
								{
									"option": "--verbose",
									"shortcut": "-v",
									"description": "display all extra information.",
									"value": "bool"
								}
							]
						}
					]
				},
				{
					"description": "Get a summary of all resources accounted for by the libp2p Resource Manager.",
					"subcommands": [],
					"usage": "ipfs swarm resources",
					"name": "ipfs swarm resources"
				}
			]
		},
		{
			"name": "ipfs dht",
			"description": "Issue commands directly through the DHT.",
			"usage": "ipfs dht",
			"subcommands": [
				{
					"name": "ipfs dht findpeer",
					"description": "Outputs a list of newline-delimited multiaddresses.",
					"usage": "ipfs dht findpeer <peerID>... - Find the multiaddresses associated with a Peer ID.",
					"options": [
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs dht findprovs",
					"description": "Find peers that can provide a specific value, given a key.",
					"usage": "ipfs dht findprovs <key>... - Find peers that can provide a specific value, given a key.",
					"subcommands": [],
					"options": [
						{
							"option": "--num-providers",
							"shortcut": "-n",
							"description": "The number of providers to find.",
							"value": "int",
							"default": "20"
						},
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					]
				},
				{
					"description": "DEPRECATED, command will be removed in the future",
					"name": "ipfs dht get",
					"subcommands": [
						{
							"description": "Outputs the best value for the given key. There may be several different values for a given key stored in the routing system; in this context 'best' means the record that is most desirable. There is no one metric for 'best': it depends entirely on the key type. For IPNS, 'best' is the record that is both valid and has the highest sequence number (freshest). Different key types can specify other 'best' rules.",
							"name": "ipfs dht get dht",
							"usage": "ipfs dht get <key>... - Given a key, query the routing system for its best value.",
							"subcommands": [],
							"options": []
						}
					],
					"usage": "ipfs dht get <key>..."
				},
				{
					"name": "ipfs dht provide",
					"description": "Announce to the network that you are providing given values.",
					"usage": "ipfs dht provide <key>... - Announce to the network that you are providing given values.",
					"options": [
						{
							"option": "--recursive",
							"shortcut": "-r",
							"description": "Recursively provide entire graph.",
							"value": "bool"
						},
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"description": "Given a key of the form /foo/bar and a valid value for that key, this will write that value to the routing system with that key. Keys have two parts: a keytype (foo) and the key name (bar). IPNS uses the /ipns keytype, and expects the key name to be a Peer ID. IPNS entries are specifically formatted (protocol buffer). You may only use keytypes that are supported in your ipfs binary: currently this is only /ipns. Unless you have a relatively deep understanding of the go-ipfs routing internals, you likely want to be using 'ipfs name publish' instead of this. The value must be a valid value for the given key type. For example, if the key is /ipns/QmFoo, the value must be IPNS record (protobuf) signed with the key identified by QmFoo.",
					"subcommands": [],
					"options": [
						{
							"description": "When offline, save the IPNS record to the the local datastore without broadcasting to the network instead of simply failing.",
							"option": "--allow-offline",
							"value": "bool"
						}
					],
					"usage": "ipfs dht put <key> <value-file> - Write a key/value pair to the routing system.",
					"name": "ipfs dht put"
				},
				{
					"name": "ipfs dht query",
					"description": "Outputs a list of newline-delimited Peer IDs.",
					"usage": "ipfs dht query <peerID>... - Find the closest Peer IDs to a given Peer ID by querying the DHT.",
					"subcommands": [
						{
							"name": "ipfs dht query dht",
							"description": "Find the closest Peer IDs to a given Peer ID by querying the DHT.",
							"usage": "ipfs dht query <peerID>...",
							"subcommands": [],
							"options": [
								{
									"option": "--verbose",
									"shortcut": "-v",
									"description": "Print extra information.",
									"value": "bool"
								}
							]
						}
					],
					"options": [
						{
							"option": "--verbose",
							"shortcut": "-v",
							"description": "Print extra information.",
							"value": "bool"
						}
					]
				}
			]
		},
		{
			"name": "ipfs cat",
			"description": "Displays the data contained by an IPFS or IPNS object(s) at the given path.",
			"usage": "ipfs cat <ipfs-path>... - Show IPFS object data.",
			"options": [
				{
					"option": "--length",
					"shortcut": "-l",
					"description": "Maximum number of bytes to read.",
					"value": "int64"
				},
				{
					"option": "--offset",
					"shortcut": "-o",
					"description": "Byte offset to begin reading from.",
					"value": "int64"
				},
				{
					"option": "--progress",
					"shortcut": "-p",
					"description": "Stream progress data.",
					"value": "bool",
					"default": "true"
				}
			],
			"subcommands": []
		},
		{
			"description": "Files is an API for manipulating IPFS objects as if they were a Unix filesystem.\n\nThe files facility interacts with MFS (Mutable File System). MFS acts as a single, dynamic filesystem mount. MFS has a root CID that is transparently updated when a change happens (and can be checked with \"ipfs files stat /\").\n\nAll files and folders within MFS are respected and will not be deleted during garbage collections. However, a DAG may be referenced in MFS without being fully available locally (MFS content is lazy loaded when accessed). MFS is independent from the list of pinned items (\"ipfs pin ls\"). Calls to \"ipfs pin add\" and \"ipfs pin rm\" will add and remove pins independently of MFS. If MFS content that was additionally pinned is removed by calling \"ipfs files rm\", it will still remain pinned.\n\nContent added with \"ipfs add\" (which by default also becomes pinned), is not added to MFS. Any content can be lazily referenced from MFS with the command \"ipfs files cp /ipfs/<cid> /some/path/\" (see ipfs files cp --help).\n\nNOTE:\nMost of the subcommands of 'ipfs files' accept the '--flush' flag. It defaults to true. Use caution when setting this flag to false. It will improve performance for large numbers of file operations, but it does so at the cost of consistency guarantees. If the daemon is unexpectedly killed before running 'ipfs files flush' on the files in question, then data may be lost. This also applies to run 'ipfs repo gc' concurrently with '--flush=false' operations.",
			"name": "ipfs files",
			"options": [
				{
					"default": "true",
					"description": "Flush target and ancestors after write.",
					"option": "--flush",
					"shortcut": "-f",
					"tags": [
						"bool"
					]
				}
			],
			"subcommands": [
				{
					"name": "ipfs files chcid",
					"description": "Change the CID version or hash function of the root node of a given path.",
					"usage": "ipfs files chcid [<path>] - Change the CID version or hash function of the root node of a given path.",
					"options": [
						{
							"option": "--cid-version",
							"shortcut": "--cid-ver",
							"description": "Cid version to use. (experimental).",
							"value": "int",
							"tags": []
						},
						{
							"option": "--hash",
							"description": "Hash function to use. Will set Cid version to 1 if used. (experimental).",
							"value": "string",
							"tags": []
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs files cp",
					"description": "Add references to IPFS files and directories in MFS (or copy within MFS).",
					"usage": "ipfs files cp <source> <dest>",
					"subcommands": [],
					"options": [
						{
							"option": "--parents",
							"shortcut": "-p",
							"description": "Make parent directories as needed.",
							"value": "bool"
						}
					]
				},
				{
					"name": "ipfs files flush",
					"description": "Flush a given path's data to disk.",
					"usage": "ipfs files flush [<path>]",
					"options": [],
					"subcommands": []
				},
				{
					"description": "List directories in the local mutable namespace (works on both IPFS and MFS paths).",
					"name": "ipfs files ls",
					"usage": "ipfs files ls [--long | -l] [-U] [--] [<path>]",
					"options": [
						{
							"description": "Use long listing format.",
							"option": "--long",
							"shortcut": "-l",
							"tags": [
								"bool"
							]
						},
						{
							"description": "Do not sort; list entries in directory order.",
							"shortcut": "-U",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs files mkdir",
					"description": "Create the directory if it does not already exist.",
					"usage": "ipfs files mkdir <path> - Make directories.",
					"subcommands": [],
					"options": [
						{
							"option": "--cid-ver",
							"shortcut": "--cid-version",
							"description": "Cid version to use. (experimental).",
							"value": "int"
						},
						{
							"option": "--hash",
							"description": "Hash function to use. Will set Cid version to 1 if used. (experimental).",
							"value": "string"
						},
						{
							"option": "--parents",
							"shortcut": "-p",
							"description": "No error if existing, make parent directories as needed.",
							"value": "bool"
						}
					]
				},
				{
					"description": "Move files around. Just like the traditional Unix mv.",
					"name": "ipfs files mv",
					"usage": "ipfs files mv <source> <dest> - Move files.",
					"options": [],
					"subcommands": []
				},
				{
					"name": "ipfs files read",
					"description": "Read a specified number of bytes from a file at a given offset. By default, it will read the entire file similar to the Unix cat.",
					"usage": "ipfs files read <path> - Read a file from MFS.",
					"options": [
						{
							"description": "Byte offset to begin reading from.",
							"option": "--offset",
							"shortcut": "-o",
							"value": "int64"
						},
						{
							"description": "Maximum number of bytes to read.",
							"option": "--count",
							"shortcut": "-n",
							"value": "int64"
						}
					],
					"subcommands": []
				},
				{
					"description": "Remove files or directories.",
					"name": "ipfs files rm",
					"usage": "ipfs files rm [--recursive | -r] [--force] [--] <path>...",
					"options": [
						{
							"description": "Forcibly remove target at path; implies -r for directories.",
							"option": "--force",
							"tags": [
								"bool"
							]
						},
						{
							"description": "Recursively remove directories.",
							"option": "--recursive",
							"shortcut": "-r",
							"tags": [
								"bool"
							]
						}
					],
					"subcommands": []
				},
				{
					"name": "ipfs files stat",
					"description": "Display file status.",
					"usage": "ipfs files stat [--format=<format>] [--hash] [--size] [--with-local] [--] <path>",
					"options": [
						{
							"option": "--format",
							"description": "Print statistics in given format. Allowed tokens: <hash> <size> <cumulsize> <type> <childs>. Conflicts with other format options.",
							"value": "string",
							"default": "<hash>"
						},
						{
							"option": "--hash",
							"description": "Print only hash. Implies '--format=<hash>'. Conflicts with other format options.",
							"value": "bool"
						},
						{
							"option": "--size",
							"description": "Print only size. Implies '--format=<cumulsize>'. Conflicts with other format options.",
							"value": "bool"
						},
						{
							"option": "--with-local",
							"description": "Compute the amount of the dag that is local, and if possible the total size.",
							"value": "bool"
						}
					],
					"subcommands": []
				},
				{
					"description": "A low-level MFS command that allows you to append data at the end of a file, or specify a beginning offset within a file to write to. The entire length of the input will be written. If the '--create' option is specified, the file will be created if it does not exist. Nonexistent intermediate directories will not be created unless the '--parents' option is specified. Newly created files will have the same CID version and hash function of the parent directory unless the '--cid-version' and '--hash' options are used. Newly created leaves will be in the legacy format (Protobuf) if the CID version is 0, or raw if the CID version is non-zero. Use of the '--raw-leaves' option will override this behavior. If the '--flush' option is set to false, changes will not be propagated to the merkledag root. This can make operations much faster when doing a large number of writes to a deeper directory structure.",
					"name": "ipfs files write",
					"subcommands": [],
					"options": [
						{
							"description": "Cid version to use. (experimental).",
							"option": "--cid-version",
							"shortcut": "--cid-ver",
							"tags": [],
							"value": "int"
						},
						{
							"description": "Create the file if it does not exist.",
							"option": "--create",
							"shortcut": "-e",
							"tags": [],
							"value": "bool"
						},
						{
							"description": "Hash function to use. Will set Cid version to 1 if used. (experimental).",
							"option": "--hash",
							"tags": [],
							"value": "string"
						},
						{
							"description": "Make parent directories as needed.",
							"option": "--parents",
							"shortcut": "-p",
							"tags": [],
							"value": "bool"
						},
						{
							"description": "Use raw blocks for newly created leaf nodes. (experimental).",
							"option": "--raw-leaves",
							"tags": [],
							"value": "bool"
						},
						{
							"description": "Byte offset to begin writing at.",
							"option": "--offset",
							"shortcut": "-o",
							"tags": [],
							"value": "int64"
						},
						{
							"description": "Maximum number of bytes to read.",
							"option": "--count",
							"shortcut": "-n",
							"tags": [],
							"value": "int64"
						},
						{
							"description": "Truncate the file to size zero before writing.",
							"option": "--truncate",
							"shortcut": "-t",
							"tags": [],
							"value": "bool"
						}
					],
					"usage": "ipfs files write <path> <data> - Append to (modify) a file in MFS."
				}
			],
			"usage": "ipfs files [--flush=false]"
		}
	],
	"version": "0.23.0"
}
