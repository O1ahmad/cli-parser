{
    "description": "Ethereum 2.0 client by Sigma Prime. Provides a full-featured beacon node, a validator client and utilities for managing validator accounts.",
    "name": "lighthouse",
    "subcommands": [
        {
            "description": "Utilities for generating and managing Ethereum 2.0 accounts.",
            "name": "lighthouse account_manager",
            "usage": "lighthouse account_manager [OPTIONS] [COMMAND]",
            "subcommands": [
                {
                    "name": "lighthouse account_manager validator",
                    "description": "Provides commands for managing Eth2 validators.",
                    "usage": "Usage: lighthouse account_manager validator [OPTIONS] [COMMAND]",
                    "subcommands": [
                        {
                            "name": "lighthouse account_manager validator create",
                            "description": "Creates new validators from an existing EIP-2386 wallet using the EIP-2333 HD key derivation scheme.",
                            "usage": "lighthouse account_manager validator create [OPTIONS]",
                            "options": [
                                {
                                    "option": "--at-most",
                                    "value": "<AT_MOST_VALIDATORS>",
                                    "description": "Observe the number of validators in --validator-dir, only creating enough to reach the given count. Never deletes an existing validator."
                                },
                                {
                                    "option": "--count",
                                    "value": "<VALIDATOR_COUNT>",
                                    "description": "The number of validators to create, regardless of how many already exist"
                                },
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "value": "<DIR>",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks."
                                },
                                {
                                    "option": "--debug-level",
                                    "value": "<LEVEL>",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "default": "info",
                                    "tags": [
                                        "possible values: info, debug, trace, warn, error, crit"
                                    ]
                                },
                                {
                                    "option": "--deposit-gwei",
                                    "value": "<DEPOSIT_GWEI>",
                                    "description": "The GWEI value of the deposit amount. Defaults to the minimum amount required for an active validator (MAX_EFFECTIVE_BALANCE)"
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "value": "<URL>",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored."
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "value": "<SECONDS>",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "default": "180"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "value": "<FORMAT>",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "tags": [
                                        "possible values: JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "value": "<FILE>",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten."
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "value": "<LEVEL>",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "default": "debug",
                                    "tags": [
                                        "possible values: info, debug, trace, warn, error, crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "value": "<FORMAT>",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "tags": [
                                        "possible values: DEFAULT, JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "value": "<COUNT>",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "value": "<SIZE>",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "value": "<network>",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "tags": [
                                        "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                                    ]
                                },
                                {
                                    "option": "--secrets-dir",
                                    "value": "<SECRETS_DIR>",
                                    "description": "The path where the validator keystore passwords will be stored. Defaults to ~/.lighthouse/{network}/secrets"
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--store-withdrawal-keystore",
                                    "description": "If present, the withdrawal keystore will be stored alongside the voting keypair. It is generally recommended to *not* store the withdrawal key and instead generate them from the wallet seed when required."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "value": "<DIR>",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database."
                                },
                                {
                                    "option": "--wallet-name",
                                    "value": "<WALLET_NAME>",
                                    "description": "Use the wallet identified by this name"
                                },
                                {
                                    "option": "--wallet-password",
                                    "value": "<WALLET_PASSWORD_PATH>",
                                    "description": "A path to a file containing the password which will unlock the wallet."
                                },
                                {
                                    "option": "--wallets-dir",
                                    "value": "<wallets-dir>",
                                    "description": "A path containing Eth2 EIP-2386 wallets. Defaults to ~/.lighthouse/{network}/wallets"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager validator exit",
                            "description": "Submits a VoluntaryExit to the beacon chain for a given validator keystore.",
                            "usage": "Usage: lighthouse account_manager validator exit [OPTIONS] --keystore <KEYSTORE_PATH>",
                            "options": [
                                {
                                    "option": "--beacon-node",
                                    "description": "Address to a beacon node HTTP API",
                                    "default": "http://localhost:5052/"
                                },
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "default": "info",
                                    "value": "<LEVEL>",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "default": "180",
                                    "value": "<SECONDS>"
                                },
                                {
                                    "option": "--keystore",
                                    "description": "The path to the EIP-2335 voting keystore for the validator",
                                    "value": "<KEYSTORE_PATH>"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "default": "debug",
                                    "value": "<LEVEL>",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "default": "10",
                                    "value": "<COUNT>"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "default": "200",
                                    "value": "<SIZE>"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--no-confirmation",
                                    "description": "Exits without prompting for confirmation that you understand the implications of a voluntary exit. This should be used with caution"
                                },
                                {
                                    "option": "--no-wait",
                                    "description": "Exits after publishing the voluntary exit without waiting for confirmation that the exit was included in the beacon chain"
                                },
                                {
                                    "option": "--password-file",
                                    "description": "The path to the password file which unlocks the validator voting keystore",
                                    "value": "<PASSWORD_FILE_PATH>"
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager validator import",
                            "description": "Imports one or more EIP-2335 passwords into a Lighthouse VC directory, requesting passwords interactively. The directory flag provides a convenient method for importing a directory of keys generated by the eth2-deposit-cli Python utility.",
                            "usage": "Usage: lighthouse account_manager validator import [OPTIONS]",
                            "options": [
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--directory",
                                    "description": "Path to a directory which contains zero or more keystores for import. This directory and all sub-directories will be searched and any file name which contains 'keystore' and has the '.json' extension will be attempted to be imported.",
                                    "value": "<KEYSTORES_DIRECTORY>"
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                },
                                {
                                    "option": "--keystore",
                                    "description": "Path to a single keystore to be imported.",
                                    "value": "<KEYSTORE_PATH>"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--password-file",
                                    "description": "The path to the file containing the password which will unlock all keystores being imported. This flag must be used with `--reuse-password`. The password will be copied to the `validator_definitions.yml` file, so after import we strongly recommend you delete the file at KEYSTORE_PASSWORD_PATH.",
                                    "value": "<KEYSTORE_PASSWORD_PATH>"
                                },
                                {
                                    "option": "--reuse-password",
                                    "description": "If present, the same password will be used for all imported keystores."
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager validator list",
                            "description": "Lists the public keys of all validators.",
                            "usage": "lighthouse account_manager validator list [OPTIONS]",
                            "options": [
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager validator modify",
                            "description": "Modify validator status in validator_definitions.yml.",
                            "usage": "lighthouse account_manager validator modify [OPTIONS] [COMMAND]",
                            "subcommands": [
                                {
                                    "name": "lighthouse account_manager validator modify disable",
                                    "description": "Disable validator(s) in validator_definitions.yml.",
                                    "usage": "Usage: lighthouse account_manager validator modify disable [OPTIONS]",
                                    "options": [
                                        {
                                            "option": "--all",
                                            "description": "Disable all validators in the validator directory",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--datadir",
                                            "shortcut": "-d",
                                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                            "value": "<DIR>"
                                        },
                                        {
                                            "option": "--debug-level",
                                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                            "value": "<LEVEL>",
                                            "default": "info"
                                        },
                                        {
                                            "option": "--disable-log-timestamp",
                                            "description": "If present, do not include timestamps in logging output.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--disable-malloc-tuning",
                                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--genesis-state-url",
                                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                            "value": "<URL>"
                                        },
                                        {
                                            "option": "--genesis-state-url-timeout",
                                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                                            "value": "<SECONDS>",
                                            "default": "180"
                                        },
                                        {
                                            "option": "--help",
                                            "shortcut": "-h",
                                            "description": "Prints help information",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--log-color",
                                            "description": "Force outputting colors when emitting logs to the terminal.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--log-format",
                                            "description": "Specifies the log format used when emitting logs to the terminal.",
                                            "value": "<FORMAT>"
                                        },
                                        {
                                            "option": "--logfile",
                                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                            "value": "<FILE>"
                                        },
                                        {
                                            "option": "--logfile-compress",
                                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--logfile-debug-level",
                                            "description": "The verbosity level used when emitting logs to the log file.",
                                            "value": "<LEVEL>",
                                            "default": "debug"
                                        },
                                        {
                                            "option": "--logfile-format",
                                            "description": "Specifies the log format used when emitting logs to the logfile.",
                                            "value": "<FORMAT>"
                                        },
                                        {
                                            "option": "--logfile-max-number",
                                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                            "value": "<COUNT>",
                                            "default": "10"
                                        },
                                        {
                                            "option": "--logfile-max-size",
                                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                            "value": "<SIZE>",
                                            "default": "200"
                                        },
                                        {
                                            "option": "--logfile-no-restricted-perms",
                                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--network",
                                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                            "value": "<network>"
                                        },
                                        {
                                            "option": "--pubkey",
                                            "description": "Validator pubkey to disable",
                                            "value": "<PUBKEY>"
                                        },
                                        {
                                            "option": "--stdin-inputs",
                                            "description": "If present, read all user inputs from stdin instead of tty.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--testnet-dir",
                                            "shortcut": "-t",
                                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                            "value": "<DIR>"
                                        }
                                    ],
                                    "subcommands": []
                                },
                                {
                                    "name": "lighthouse account_manager validator modify enable",
                                    "description": "Enable validator(s) in validator_definitions.yml.",
                                    "usage": "Usage: lighthouse account_manager validator modify enable [OPTIONS]",
                                    "options": [
                                        {
                                            "option": "--all",
                                            "description": "Enable all validators in the validator directory",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--datadir",
                                            "shortcut": "-d",
                                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                            "value": "<DIR>"
                                        },
                                        {
                                            "option": "--debug-level",
                                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                            "value": "<LEVEL>",
                                            "default": "info",
                                            "tags": [
                                                "possible values: info, debug, trace, warn, error, crit"
                                            ]
                                        },
                                        {
                                            "option": "--disable-log-timestamp",
                                            "description": "If present, do not include timestamps in logging output.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--disable-malloc-tuning",
                                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--genesis-state-url",
                                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                            "value": "<URL>"
                                        },
                                        {
                                            "option": "--genesis-state-url-timeout",
                                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                                            "value": "<SECONDS>",
                                            "default": "180"
                                        },
                                        {
                                            "option": "--help",
                                            "shortcut": "-h",
                                            "description": "Prints help information",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--log-color",
                                            "description": "Force outputting colors when emitting logs to the terminal.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--log-format",
                                            "description": "Specifies the log format used when emitting logs to the terminal.",
                                            "value": "<FORMAT>",
                                            "tags": [
                                                "possible values: JSON"
                                            ]
                                        },
                                        {
                                            "option": "--logfile",
                                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                            "value": "<FILE>"
                                        },
                                        {
                                            "option": "--logfile-compress",
                                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--logfile-debug-level",
                                            "description": "The verbosity level used when emitting logs to the log file.",
                                            "value": "<LEVEL>",
                                            "default": "debug",
                                            "tags": [
                                                "possible values: info, debug, trace, warn, error, crit"
                                            ]
                                        },
                                        {
                                            "option": "--logfile-format",
                                            "description": "Specifies the log format used when emitting logs to the logfile.",
                                            "value": "<FORMAT>",
                                            "tags": [
                                                "possible values: DEFAULT, JSON"
                                            ]
                                        },
                                        {
                                            "option": "--logfile-max-number",
                                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                            "value": "<COUNT>",
                                            "default": "10"
                                        },
                                        {
                                            "option": "--logfile-max-size",
                                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                            "value": "<SIZE>",
                                            "default": "200"
                                        },
                                        {
                                            "option": "--logfile-no-restricted-perms",
                                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--network",
                                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                            "value": "<network>",
                                            "tags": [
                                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                                            ]
                                        },
                                        {
                                            "option": "--pubkey",
                                            "description": "Validator pubkey to enable",
                                            "value": "<PUBKEY>"
                                        },
                                        {
                                            "option": "--stdin-inputs",
                                            "description": "If present, read all user inputs from stdin instead of tty.",
                                            "tags": [
                                                "flag"
                                            ]
                                        },
                                        {
                                            "option": "--testnet-dir",
                                            "shortcut": "-t",
                                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                            "value": "<DIR>"
                                        }
                                    ],
                                    "subcommands": []
                                }
                            ],
                            "options": [
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                }
                            ]
                        },
                        {
                            "name": "lighthouse account_manager validator recover",
                            "description": "Recovers validator private keys given a BIP-39 mnemonic phrase. If you did not specify a `--first-index` or count `--count`, by default this will only recover the keys associated with the validator at index 0 for an HD wallet in accordance with the EIP-2333 spec.",
                            "usage": "lighthouse account_manager validator recover [OPTIONS]",
                            "options": [
                                {
                                    "option": "--count",
                                    "description": "The number of validator keys you wish to recover. Counted consecutively from the provided `--first_index`.",
                                    "value": "<COUNT>",
                                    "default": "1"
                                },
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--first-index",
                                    "description": "The first of consecutive key indexes you wish to recover.",
                                    "value": "<FIRST_INDEX>",
                                    "default": "0"
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--mnemonic-path",
                                    "description": "If present, the mnemonic will be read in from this file.",
                                    "value": "<MNEMONIC_PATH>"
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--secrets-dir",
                                    "description": "The path where the validator keystore passwords will be stored. Defaults to ~/.lighthouse/{network}/secrets",
                                    "value": "<SECRETS_DIR>"
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--store-withdrawal-keystore",
                                    "description": "If present, the withdrawal keystore will be stored alongside the voting keypair. It is generally recommended to *not* store the withdrawal key and instead generate them from the wallet seed when required."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager validator slashing-protection",
                            "description": "Import or export slashing protection data to or from another client",
                            "usage": "Usage: lighthouse account_manager validator slashing-protection [OPTIONS] [COMMAND]",
                            "subcommands": [
                                {
                                    "name": "lighthouse account_manager validator slashing-protection export",
                                    "description": "Export an interchange file",
                                    "usage": "lighthouse account_manager validator slashing-protection export [OPTIONS] [FILE]",
                                    "options": [
                                        {
                                            "option": "--datadir",
                                            "shortcut": "-d",
                                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                            "value": "<DIR>"
                                        },
                                        {
                                            "option": "--debug-level",
                                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                            "value": "<LEVEL>",
                                            "default": "info",
                                            "tags": [
                                                "possible values: info, debug, trace, warn, error, crit"
                                            ]
                                        },
                                        {
                                            "option": "--disable-log-timestamp",
                                            "description": "If present, do not include timestamps in logging output."
                                        },
                                        {
                                            "option": "--disable-malloc-tuning",
                                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                        },
                                        {
                                            "option": "--genesis-state-url",
                                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                            "value": "<URL>"
                                        },
                                        {
                                            "option": "--genesis-state-url-timeout",
                                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                                            "value": "<SECONDS>",
                                            "default": "180"
                                        },
                                        {
                                            "option": "--help",
                                            "shortcut": "-h",
                                            "description": "Prints help information"
                                        },
                                        {
                                            "option": "--log-color",
                                            "description": "Force outputting colors when emitting logs to the terminal."
                                        },
                                        {
                                            "option": "--log-format",
                                            "description": "Specifies the log format used when emitting logs to the terminal.",
                                            "value": "<FORMAT>",
                                            "tags": [
                                                "possible values: JSON"
                                            ]
                                        },
                                        {
                                            "option": "--logfile",
                                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                            "value": "<FILE>"
                                        },
                                        {
                                            "option": "--logfile-compress",
                                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                        },
                                        {
                                            "option": "--logfile-debug-level",
                                            "description": "The verbosity level used when emitting logs to the log file.",
                                            "value": "<LEVEL>",
                                            "default": "debug",
                                            "tags": [
                                                "possible values: info, debug, trace, warn, error, crit"
                                            ]
                                        },
                                        {
                                            "option": "--logfile-format",
                                            "description": "Specifies the log format used when emitting logs to the logfile.",
                                            "value": "<FORMAT>",
                                            "tags": [
                                                "possible values: DEFAULT, JSON"
                                            ]
                                        },
                                        {
                                            "option": "--logfile-max-number",
                                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                            "value": "<COUNT>",
                                            "default": "10"
                                        },
                                        {
                                            "option": "--logfile-max-size",
                                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                            "value": "<SIZE>",
                                            "default": "200"
                                        },
                                        {
                                            "option": "--logfile-no-restricted-perms",
                                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                        },
                                        {
                                            "option": "--network",
                                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                            "value": "<network>",
                                            "tags": [
                                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                                            ]
                                        },
                                        {
                                            "option": "--pubkeys",
                                            "description": "List of public keys to export history for. Keys should be 0x-prefixed, comma-separated. All known keys will be exported if omitted",
                                            "value": "<PUBKEYS>"
                                        },
                                        {
                                            "option": "--stdin-inputs",
                                            "description": "If present, read all user inputs from stdin instead of tty."
                                        },
                                        {
                                            "option": "--testnet-dir",
                                            "shortcut": "-t",
                                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                            "value": "<DIR>"
                                        }
                                    ],
                                    "subcommands": []
                                },
                                {
                                    "description": "Import an interchange file",
                                    "name": "lighthouse account_manager validator slashing-protection import",
                                    "options": [
                                        {
                                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                            "option": "--datadir",
                                            "shortcut": "-d",
                                            "value": "<DIR>"
                                        },
                                        {
                                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                                            "option": "--disable-malloc-tuning"
                                        },
                                        {
                                            "description": "If present, do not include timestamps in logging output.",
                                            "option": "--disable-log-timestamp"
                                        },
                                        {
                                            "default": "info",
                                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                            "option": "--debug-level",
                                            "value": "<LEVEL>"
                                        },
                                        {
                                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                            "option": "--genesis-state-url",
                                            "value": "<URL>"
                                        },
                                        {
                                            "default": "180",
                                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                                            "option": "--genesis-state-url-timeout",
                                            "value": "<SECONDS>"
                                        },
                                        {
                                            "shortcut": "-h",
                                            "description": "Prints help information",
                                            "option": "--help"
                                        },
                                        {
                                            "description": "Force outputting colors when emitting logs to the terminal.",
                                            "option": "--log-color"
                                        },
                                        {
                                            "description": "Specifies the log format used when emitting logs to the terminal.",
                                            "option": "--log-format",
                                            "value": "<FORMAT>"
                                        },
                                        {
                                            "default": "debug",
                                            "description": "The verbosity level used when emitting logs to the log file.",
                                            "option": "--logfile-debug-level",
                                            "value": "<LEVEL>"
                                        },
                                        {
                                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                            "option": "--logfile",
                                            "value": "<FILE>"
                                        },
                                        {
                                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                                            "option": "--logfile-compress"
                                        },
                                        {
                                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                                            "option": "--logfile-no-restricted-perms"
                                        },
                                        {
                                            "description": "Specifies the log format used when emitting logs to the logfile.",
                                            "option": "--logfile-format",
                                            "value": "<FORMAT>"
                                        },
                                        {
                                            "default": "10",
                                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                            "option": "--logfile-max-number",
                                            "value": "<COUNT>"
                                        },
                                        {
                                            "default": "200",
                                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                            "option": "--logfile-max-size",
                                            "value": "<SIZE>"
                                        },
                                        {
                                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                            "option": "--network",
                                            "value": "<network>"
                                        },
                                        {
                                            "description": "If present, read all user inputs from stdin instead of tty.",
                                            "option": "--stdin-inputs"
                                        },
                                        {
                                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                            "option": "--testnet-dir",
                                            "shortcut": "-t",
                                            "value": "<DIR>"
                                        }
                                    ],
                                    "usage": "Usage: lighthouse account_manager validator slashing-protection import [OPTIONS] [FILE]",
                                    "subcommands": []
                                }
                            ],
                            "options": [
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                }
                            ]
                        }
                    ],
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "shortcut": "-h",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "DEFAULT",
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "mainnet",
                                "gnosis",
                                "chiado",
                                "sepolia",
                                "holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--validator-dir",
                            "description": "The path to search for validator directories. Defaults to ~/.lighthouse/{network}/validators",
                            "value": "<VALIDATOR_DIRECTORY>"
                        }
                    ]
                },
                {
                    "name": "lighthouse account_manager wallet",
                    "description": "Manage wallets, from which validator keys can be derived.",
                    "usage": "lighthouse account_manager wallet [OPTIONS] [COMMAND]",
                    "subcommands": [
                        {
                            "name": "lighthouse account_manager wallet create",
                            "description": "Creates a new HD (hierarchical-deterministic) EIP-2386 wallet.",
                            "usage": "lighthouse account_manager wallet create [OPTIONS]",
                            "options": [
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "possible values: info, debug, trace, warn, error, crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "possible values: JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "possible values: info, debug, trace, warn, error, crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "possible values: DEFAULT, JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--mnemonic-length",
                                    "description": "The number of words to use for the mnemonic phrase.",
                                    "value": "<MNEMONIC_LENGTH>",
                                    "default": "24"
                                },
                                {
                                    "option": "--mnemonic-output-path",
                                    "description": "If present, the mnemonic will be saved to this file. DO NOT SHARE THE MNEMONIC.",
                                    "value": "<MNEMONIC_PATH>"
                                },
                                {
                                    "option": "--name",
                                    "description": "The wallet will be created with this name. It is not allowed to create two wallets with the same name for the same --base-dir.",
                                    "value": "<WALLET_NAME>"
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                                    ]
                                },
                                {
                                    "option": "--password-file",
                                    "description": "A path to a file containing the password which will unlock the wallet. If the file does not exist, a random password will be generated and saved at that path. To avoid confusion, if the file does not already exist it must include a '.pass' suffix.",
                                    "value": "<WALLET_PASSWORD_PATH>"
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--type",
                                    "description": "The type of wallet to create. Only HD (hierarchical-deterministic) wallets are supported presently.",
                                    "value": "<WALLET_TYPE>",
                                    "default": "hd",
                                    "tags": [
                                        "possible values: hd"
                                    ]
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager wallet list",
                            "usage": "lighthouse account_manager wallet list [OPTIONS]",
                            "options": [
                                {
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "value": "<DIR>"
                                },
                                {
                                    "option": "--debug-level",
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "value": "<LEVEL>",
                                    "default": "info",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--disable-log-timestamp",
                                    "description": "If present, do not include timestamps in logging output."
                                },
                                {
                                    "option": "--disable-malloc-tuning",
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                                },
                                {
                                    "option": "--genesis-state-url",
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "value": "<URL>"
                                },
                                {
                                    "option": "--genesis-state-url-timeout",
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "value": "<SECONDS>",
                                    "default": "180"
                                },
                                {
                                    "option": "--help",
                                    "shortcut": "-h",
                                    "description": "Prints help information"
                                },
                                {
                                    "option": "--log-color",
                                    "description": "Force outputting colors when emitting logs to the terminal."
                                },
                                {
                                    "option": "--log-format",
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile",
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "value": "<FILE>"
                                },
                                {
                                    "option": "--logfile-compress",
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                                },
                                {
                                    "option": "--logfile-debug-level",
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "value": "<LEVEL>",
                                    "default": "debug",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "option": "--logfile-format",
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "value": "<FORMAT>",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ]
                                },
                                {
                                    "option": "--logfile-max-number",
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "value": "<COUNT>",
                                    "default": "10"
                                },
                                {
                                    "option": "--logfile-max-size",
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "value": "<SIZE>",
                                    "default": "200"
                                },
                                {
                                    "option": "--logfile-no-restricted-perms",
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                                },
                                {
                                    "option": "--network",
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "value": "<network>",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ]
                                },
                                {
                                    "option": "--stdin-inputs",
                                    "description": "If present, read all user inputs from stdin instead of tty."
                                },
                                {
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "value": "<DIR>"
                                }
                            ],
                            "subcommands": []
                        },
                        {
                            "name": "lighthouse account_manager wallet recover",
                            "description": "Recovers an EIP-2386 wallet from a given a BIP-39 mnemonic phrase.",
                            "usage": "lighthouse account_manager wallet recover [OPTIONS]",
                            "options": [
                                {
                                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                                    "option": "--datadir",
                                    "shortcut": "-d",
                                    "value": "<DIR>"
                                },
                                {
                                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                                    "option": "--debug-level",
                                    "default": "info",
                                    "value": "<LEVEL>",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "description": "If present, do not include timestamps in logging output.",
                                    "option": "--disable-log-timestamp"
                                },
                                {
                                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                                    "option": "--disable-malloc-tuning"
                                },
                                {
                                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                                    "option": "--genesis-state-url",
                                    "value": "<URL>"
                                },
                                {
                                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                                    "option": "--genesis-state-url-timeout",
                                    "default": "180",
                                    "value": "<SECONDS>"
                                },
                                {
                                    "description": "Prints help information",
                                    "option": "--help",
                                    "shortcut": "-h"
                                },
                                {
                                    "description": "Force outputting colors when emitting logs to the terminal.",
                                    "option": "--log-color"
                                },
                                {
                                    "description": "Specifies the log format used when emitting logs to the terminal.",
                                    "option": "--log-format",
                                    "tags": [
                                        "JSON"
                                    ],
                                    "value": "<FORMAT>"
                                },
                                {
                                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                                    "option": "--logfile",
                                    "value": "<FILE>"
                                },
                                {
                                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                                    "option": "--logfile-compress"
                                },
                                {
                                    "description": "The verbosity level used when emitting logs to the log file.",
                                    "option": "--logfile-debug-level",
                                    "default": "debug",
                                    "value": "<LEVEL>",
                                    "tags": [
                                        "info",
                                        "debug",
                                        "trace",
                                        "warn",
                                        "error",
                                        "crit"
                                    ]
                                },
                                {
                                    "description": "Specifies the log format used when emitting logs to the logfile.",
                                    "option": "--logfile-format",
                                    "tags": [
                                        "DEFAULT",
                                        "JSON"
                                    ],
                                    "value": "<FORMAT>"
                                },
                                {
                                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                                    "option": "--logfile-max-number",
                                    "default": "10",
                                    "value": "<COUNT>"
                                },
                                {
                                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                                    "option": "--logfile-max-size",
                                    "default": "200",
                                    "value": "<SIZE>"
                                },
                                {
                                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                                    "option": "--logfile-no-restricted-perms"
                                },
                                {
                                    "description": "If present, the mnemonic will be read in from this file.",
                                    "option": "--mnemonic-path",
                                    "value": "<MNEMONIC_PATH>"
                                },
                                {
                                    "description": "The wallet will be created with this name. It is not allowed to create two wallets with the same name for the same --base-dir.",
                                    "option": "--name",
                                    "value": "<WALLET_NAME>"
                                },
                                {
                                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                                    "option": "--network",
                                    "tags": [
                                        "mainnet",
                                        "gnosis",
                                        "chiado",
                                        "sepolia",
                                        "holesky"
                                    ],
                                    "value": "<network>"
                                },
                                {
                                    "description": "This will be the new password for your recovered wallet. A path to a file containing the password which will unlock the wallet. If the file does not exist, a random password will be generated and saved at that path. To avoid confusion, if the file does not already exist it must include a '.pass' suffix.",
                                    "option": "--password-file",
                                    "value": "<PASSWORD_FILE_PATH>"
                                },
                                {
                                    "description": "If present, read all user inputs from stdin instead of tty.",
                                    "option": "--stdin-inputs"
                                },
                                {
                                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                                    "option": "--testnet-dir",
                                    "shortcut": "-t",
                                    "value": "<DIR>"
                                },
                                {
                                    "description": "The type of wallet to create. Only HD (hierarchical-deterministic) wallets are supported presently.",
                                    "option": "--type",
                                    "default": "hd",
                                    "tags": [
                                        "hd"
                                    ],
                                    "value": "<WALLET_TYPE>"
                                }
                            ],
                            "subcommands": []
                        }
                    ],
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "shortcut": "-h",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "DEFAULT",
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "mainnet",
                                "gnosis",
                                "chiado",
                                "sepolia",
                                "holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--wallets-dir",
                            "description": "A path containing Eth2 EIP-2386 wallets. Defaults to ~/.lighthouse/{network}/wallets",
                            "value": "<WALLETS_DIRECTORY>"
                        }
                    ]
                }
            ],
            "options": [
                {
                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                    "option": "--datadir",
                    "shortcut": "-d",
                    "value": "<DIR>"
                },
                {
                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                    "option": "--debug-level",
                    "default": "info",
                    "tags": [
                        "info",
                        "debug",
                        "trace",
                        "warn",
                        "error",
                        "crit"
                    ],
                    "value": "<LEVEL>"
                },
                {
                    "description": "If present, do not include timestamps in logging output.",
                    "option": "--disable-log-timestamp"
                },
                {
                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                    "option": "--disable-malloc-tuning"
                },
                {
                    "description": "Prints help information",
                    "option": "--help",
                    "shortcut": "-h"
                },
                {
                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                    "option": "--genesis-state-url",
                    "value": "<URL>"
                },
                {
                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                    "option": "--genesis-state-url-timeout",
                    "default": "180",
                    "value": "<SECONDS>"
                },
                {
                    "description": "Force outputting colors when emitting logs to the terminal.",
                    "option": "--log-color"
                },
                {
                    "description": "Specifies the log format used when emitting logs to the terminal.",
                    "option": "--log-format",
                    "tags": [
                        "JSON"
                    ],
                    "value": "<FORMAT>"
                },
                {
                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                    "option": "--logfile",
                    "value": "<FILE>"
                },
                {
                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                    "option": "--logfile-compress"
                },
                {
                    "description": "The verbosity level used when emitting logs to the log file.",
                    "option": "--logfile-debug-level",
                    "default": "debug",
                    "tags": [
                        "info",
                        "debug",
                        "trace",
                        "warn",
                        "error",
                        "crit"
                    ],
                    "value": "<LEVEL>"
                },
                {
                    "description": "Specifies the log format used when emitting logs to the logfile.",
                    "option": "--logfile-format",
                    "tags": [
                        "DEFAULT",
                        "JSON"
                    ],
                    "value": "<FORMAT>"
                },
                {
                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                    "option": "--logfile-max-number",
                    "default": "10",
                    "value": "<COUNT>"
                },
                {
                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                    "option": "--logfile-max-size",
                    "default": "200",
                    "value": "<SIZE>"
                },
                {
                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                    "option": "--logfile-no-restricted-perms"
                },
                {
                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                    "option": "--network",
                    "tags": [
                        "mainnet",
                        "gnosis",
                        "chiado",
                        "sepolia",
                        "holesky"
                    ],
                    "value": "<network>"
                },
                {
                    "description": "If present, read all user inputs from stdin instead of tty.",
                    "option": "--stdin-inputs"
                },
                {
                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                    "option": "--testnet-dir",
                    "shortcut": "-t",
                    "value": "<DIR>"
                }
            ]
        },
        {
            "name": "lighthouse beacon_node",
            "description": "The primary component which connects to the Ethereum 2.0 P2P network and downloads, verifies and stores blocks. Provides a HTTP API for querying the beacon chain and publishing messages to the network.",
            "usage": "Usage: lighthouse beacon_node [OPTIONS] --execution-endpoint <EXECUTION-ENDPOINT>",
            "options": [
                {
                    "option": "--allow-insecure-genesis-sync",
                    "description": "Enable syncing from genesis, which is generally insecure and incompatible with data availability checks. Checkpoint syncing is the preferred method for syncing a node. Only use this flag when testing. DO NOT use on mainnet!"
                },
                {
                    "option": "--always-prepare-payload",
                    "description": "Send payload attributes with every fork choice update. This is intended for use by block builders, relays and developers. You should set a fee recipient on this BN and also consider adjusting the --prepare-payload-lookahead flag."
                },
                {
                    "option": "--auto-compact-db",
                    "description": "Enable or disable automatic compaction of the database on finalization.",
                    "value": "<auto-compact-db>",
                    "default": "true"
                },
                {
                    "option": "--blob-prune-margin-epochs",
                    "description": "The margin for blob pruning in epochs.",
                    "value": "<EPOCHS>",
                    "default": "0"
                },
                {
                    "option": "--blobs-dir",
                    "description": "Data directory for the blobs database.",
                    "value": "<DIR>"
                },
                {
                    "option": "--block-cache-size",
                    "description": "Specifies how many blocks the database should cache in memory",
                    "value": "<SIZE>",
                    "default": "5"
                },
                {
                    "option": "--boot-nodes",
                    "description": "One or more comma-delimited base64-encoded ENR's to bootstrap the p2p network. Multiaddr is also supported.",
                    "value": "<ENR/MULTIADDR LIST>"
                },
                {
                    "option": "--builder",
                    "description": "The URL of a service compatible with the MEV-boost API.",
                    "value": "<builder>"
                },
                {
                    "option": "--builder-fallback-disable-checks",
                    "description": "This flag disables all checks related to chain health. This means the builder API will always be used for payload construction, regardless of recent chain conditions."
                },
                {
                    "option": "--builder-fallback-epochs-since-finalization",
                    "description": "If this node is proposing a block and the chain has not finalized within this number of epochs, it will NOT query any connected builders, and will use the local execution engine for payload construction.",
                    "value": "<builder-fallback-epochs-since-finalization>",
                    "default": "3"
                },
                {
                    "option": "--builder-fallback-skips",
                    "description": "If this node is proposing a block and has seen this number of skip slots on the canonical chain in a row, it will NOT query any connected builders, and will use the local execution engine for payload construction.",
                    "value": "<builder-fallback-skips>",
                    "default": "3"
                },
                {
                    "option": "--builder-fallback-skips-per-epoch",
                    "description": "If this node is proposing a block and has seen this number of skip slots on the canonical chain in the past `SLOTS_PER_EPOCH`, it will NOT query any connected builders, and will use the local execution engine for payload construction.",
                    "value": "<builder-fallback-skips-per-epoch>",
                    "default": "8"
                },
                {
                    "option": "--builder-header-timeout",
                    "description": "Defines a timeout value (in milliseconds) to use when fetching a block header from the builder API.",
                    "value": "<MILLISECONDS>",
                    "default": "1000"
                },
                {
                    "option": "--builder-user-agent",
                    "description": "The HTTP user agent to send alongside requests to the builder URL. The default is Lighthouse's version string.",
                    "value": "<STRING>"
                },
                {
                    "option": "--checkpoint-blobs",
                    "description": "Set the checkpoint blobs to start syncing from. Must be aligned and match --checkpoint-block. Using --checkpoint-sync-url instead is recommended.",
                    "value": "<BLOBS_SSZ>"
                },
                {
                    "option": "--checkpoint-block",
                    "description": "Set a checkpoint block to start syncing from. Must be aligned and match --checkpoint-state. Using --checkpoint-sync-url instead is recommended.",
                    "value": "<BLOCK_SSZ>"
                },
                {
                    "option": "--checkpoint-state",
                    "description": "Set a checkpoint state to start syncing from. Must be aligned and match --checkpoint-block. Using --checkpoint-sync-url instead is recommended.",
                    "value": "<STATE_SSZ>"
                },
                {
                    "option": "--checkpoint-sync-url",
                    "description": "Set the remote beacon node HTTP endpoint to use for checkpoint sync.",
                    "value": "<BEACON_NODE>"
                },
                {
                    "option": "--checkpoint-sync-url-timeout",
                    "description": "Set the timeout for checkpoint sync calls to remote beacon node HTTP endpoint.",
                    "value": "<SECONDS>",
                    "default": "180"
                },
                {
                    "option": "--compact-db",
                    "description": "If present, apply compaction to the database on start-up. Use with caution. It is generally not recommended unless auto-compaction is disabled."
                },
                {
                    "option": "--datadir",
                    "shortcut": "-d",
                    "description": "Used to specify a custom root data directory for lighthouse keys and databases.",
                    "value": "<DIR>"
                },
                {
                    "option": "--debug-level",
                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                    "value": "<LEVEL>",
                    "default": "info"
                },
                {
                    "option": "--disable-backfill-rate-limiting",
                    "description": "Disable the backfill sync rate-limiting. This allow users to just sync the entire chain as fast as possible, however it can result in resource contention which degrades staking performance."
                },
                {
                    "option": "--disable-deposit-contract-sync",
                    "description": "Explicitly disables syncing of deposit logs from the execution node. This overrides any previous option that depends on it. Useful if you intend to run a non-validating beacon node."
                },
                {
                    "option": "--disable-enr-auto-update",
                    "description": "Discovery automatically updates the nodes local ENR with an external IP address and port as seen by other peers on the network. This disables this feature, fixing the ENR's IP/PORT to those specified on boot."
                },
                {
                    "option": "--disable-inbound-rate-limiter",
                    "description": "Disables the inbound rate limiter (requests received by this node)."
                },
                {
                    "option": "--disable-log-timestamp",
                    "description": "If present, do not include timestamps in logging output."
                },
                {
                    "option": "--disable-malloc-tuning",
                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                },
                {
                    "option": "--disable-optimistic-finalized-sync",
                    "description": "Force Lighthouse to verify every execution block hash with the execution client during finalized sync."
                },
                {
                    "option": "--disable-packet-filter",
                    "description": "Disables the discovery packet filter. Useful for testing in smaller networks"
                },
                {
                    "option": "--disable-proposer-reorgs",
                    "description": "Do not attempt to reorg late blocks from other validators when proposing."
                },
                {
                    "option": "--disable-quic",
                    "description": "Disables the quic transport. The node will rely solely on the TCP transport for libp2p connections."
                },
                {
                    "option": "--disable-self-limiter",
                    "description": "Disables the outbound rate limiter (requests sent by this node)."
                },
                {
                    "option": "--disable-upnp",
                    "description": "Disables UPnP support. Setting this will prevent Lighthouse from attempting to automatically establish external port mappings."
                },
                {
                    "option": "--discovery-port",
                    "description": "The UDP port that discovery will listen on. Defaults to `port`",
                    "value": "<PORT>"
                },
                {
                    "option": "--discovery-port6",
                    "description": "The UDP port that discovery will listen on over IPv6 if listening over both IPv4 and IPv6. Defaults to `port6`",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-address",
                    "description": "The IP address/ DNS address to broadcast to other peers on how to reach this node.",
                    "value": "<ADDRESS>..."
                },
                {
                    "option": "--enr-match",
                    "shortcut": "-e",
                    "description": "Sets the local ENR IP address and port to match those set for lighthouse."
                },
                {
                    "option": "--enr-quic-port",
                    "description": "The quic UDP4 port that will be set on the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv4.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-quic6-port",
                    "description": "The quic UDP6 port that will be set on the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv6.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-tcp-port",
                    "description": "The TCP4 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv4.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-tcp6-port",
                    "description": "The TCP6 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv6.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-udp-port",
                    "description": "The UDP4 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv4.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-udp6-port",
                    "description": "The UDP6 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv6.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enable-private-discovery",
                    "description": "Lighthouse by default does not discover private IP addresses. Set this flag to enable connection attempts to local addresses."
                },
                {
                    "option": "--epochs-per-blob-prune",
                    "description": "The epoch interval with which to prune blobs from Lighthouse's database when they are older than the data availability boundary relative to the current epoch.",
                    "value": "<EPOCHS>",
                    "default": "1"
                },
                {
                    "option": "--epochs-per-migration",
                    "description": "The number of epochs to wait between running the migration of data from the hot DB to the cold DB.",
                    "value": "<N>",
                    "default": "1"
                },
                {
                    "option": "--eth1-blocks-per-log-query",
                    "description": "Specifies the number of blocks that a deposit log query should span.",
                    "value": "<BLOCKS>",
                    "default": "1000"
                },
                {
                    "option": "--eth1-cache-follow-distance",
                    "description": "Specifies the distance between the Eth1 chain head and the last block which should be imported into the cache.",
                    "value": "<BLOCKS>"
                },
                {
                    "option": "--eth1-purge-cache",
                    "description": "Purges the eth1 block and deposit caches"
                },
                {
                    "option": "--execution-endpoint",
                    "description": "Server endpoint for an execution layer JWT-authenticated HTTP JSON-RPC connection.",
                    "value": "<EXECUTION-ENDPOINT>"
                },
                {
                    "option": "--execution-jwt",
                    "description": "File path which contains the hex-encoded JWT secret for the execution endpoint provided in the --execution-endpoint flag.",
                    "value": "<EXECUTION-JWT>"
                },
                {
                    "option": "--execution-jwt-id",
                    "description": "Used by the beacon node to communicate a unique identifier to execution nodes during JWT authentication.",
                    "value": "<EXECUTION-JWT-ID>"
                },
                {
                    "option": "--execution-jwt-secret-key",
                    "description": "Hex-encoded JWT secret for the execution endpoint provided in the --execution-endpoint flag.",
                    "value": "<EXECUTION-JWT-SECRET-KEY>"
                },
                {
                    "option": "--execution-jwt-version",
                    "description": "Used by the beacon node to communicate a client version to execution nodes during JWT authentication.",
                    "value": "<EXECUTION-JWT-VERSION>"
                },
                {
                    "option": "--execution-timeout-multiplier",
                    "description": "Unsigned integer to multiply the default execution timeouts by.",
                    "value": "<NUM>",
                    "default": "1"
                },
                {
                    "option": "--fork-choice-before-proposal-timeout",
                    "description": "Set the maximum number of milliseconds to wait for fork choice before proposing a block.",
                    "value": "<fork-choice-before-proposal-timeout>",
                    "default": "250"
                },
                {
                    "option": "--freezer-dir",
                    "description": "Data directory for the freezer database.",
                    "value": "<DIR>"
                },
                {
                    "option": "--genesis-backfill",
                    "description": "Attempts to download blocks all the way back to genesis when checkpoint syncing."
                },
                {
                    "option": "--genesis-state-url",
                    "description": "A URL of a beacon-API compatible server from which to download the genesis state.",
                    "value": "<URL>"
                },
                {
                    "option": "--genesis-state-url-timeout",
                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                    "value": "<SECONDS>",
                    "default": "180"
                },
                {
                    "option": "--graffiti",
                    "description": "Specify your custom graffiti to be included in blocks.",
                    "value": "<GRAFFITI>"
                },
                {
                    "option": "--gui",
                    "description": "Enable the graphical user interface and all its requirements. This enables --http and --validator-monitor-auto and enables SSE logging."
                },
                {
                    "option": "--hdiff-buffer-cache-size",
                    "description": "Number of hierarchical diff (hdiff) buffers to cache in memory.",
                    "value": "<SIZE>",
                    "default": "16"
                },
                {
                    "option": "--help",
                    "shortcut": "-h",
                    "description": "Prints help information"
                },
                {
                    "option": "--hierarchy-exponents",
                    "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                    "value": "<EXPONENTS>",
                    "default": "5,9,11,13,16,18,21"
                },
                {
                    "option": "--historic-state-cache-size",
                    "description": "Specifies how many states from the freezer database should be cached in memory",
                    "value": "<SIZE>",
                    "default": "1"
                },
                {
                    "option": "--http",
                    "description": "Enable the RESTful HTTP API server. Disabled by default."
                },
                {
                    "option": "--http-address",
                    "description": "Set the listen address for the RESTful HTTP API server.",
                    "value": "<ADDRESS>"
                },
                {
                    "option": "--http-allow-origin",
                    "description": "Set the value of the Access-Control-Allow-Origin response HTTP header.",
                    "value": "<ORIGIN>"
                },
                {
                    "option": "--http-duplicate-block-status",
                    "description": "Status code to send when a block that is already known is POSTed to the HTTP API.",
                    "value": "<STATUS_CODE>"
                },
                {
                    "option": "--http-enable-beacon-processor",
                    "description": "The beacon processor is a scheduler which provides quality-of-service and DoS protection.",
                    "value": "<BOOLEAN>"
                },
                {
                    "option": "--http-enable-tls",
                    "description": "Serves the RESTful HTTP API server over TLS. This feature is currently experimental."
                },
                {
                    "option": "--http-port",
                    "description": "Set the listen TCP port for the RESTful HTTP API server.",
                    "value": "<PORT>"
                },
                {
                    "option": "--http-sse-capacity-multiplier",
                    "description": "Multiplier to apply to the length of HTTP server-sent-event (SSE) channels.",
                    "value": "<N>"
                },
                {
                    "option": "--http-tls-cert",
                    "description": "The path of the certificate to be used when serving the HTTP API server over TLS.",
                    "value": "<http-tls-cert>"
                },
                {
                    "option": "--http-tls-key",
                    "description": "The path of the private key to be used when serving the HTTP API server over TLS. Must not be password-protected.",
                    "value": "<http-tls-key>"
                },
                {
                    "option": "--import-all-attestations",
                    "description": "Import and aggregate all attestations, regardless of validator subscriptions."
                },
                {
                    "option": "--inbound-rate-limiter-protocols",
                    "description": "Configures the inbound rate limiter (requests received by this node).",
                    "value": "<inbound-rate-limiter-protocols>"
                },
                {
                    "option": "--invalid-gossip-verified-blocks-path",
                    "description": "If a block succeeds gossip validation whilst failing full validation, store the block SSZ as a file at this path.",
                    "value": "<PATH>"
                },
                {
                    "option": "--libp2p-addresses",
                    "description": "One or more comma-delimited multiaddrs to manually connect to a libp2p peer without an ENR.",
                    "value": "<MULTIADDR>"
                },
                {
                    "option": "--light-client-server",
                    "description": "Act as a full node supporting light clients on the p2p network [experimental]"
                },
                {
                    "option": "--listen-address",
                    "description": "The address lighthouse will listen for UDP and TCP connections.",
                    "value": "[<ADDRESS>...]",
                    "default": "0.0.0.0"
                },
                {
                    "option": "--log-color",
                    "description": "Force outputting colors when emitting logs to the terminal."
                },
                {
                    "option": "--log-format",
                    "description": "Specifies the log format used when emitting logs to the terminal.",
                    "value": "<FORMAT>"
                },
                {
                    "option": "--logfile",
                    "description": "File path where the log file will be stored.",
                    "value": "<FILE>"
                },
                {
                    "option": "--logfile-compress",
                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                },
                {
                    "option": "--logfile-debug-level",
                    "description": "The verbosity level used when emitting logs to the log file.",
                    "value": "<LEVEL>",
                    "default": "debug"
                },
                {
                    "option": "--logfile-format",
                    "description": "Specifies the log format used when emitting logs to the logfile.",
                    "value": "<FORMAT>"
                },
                {
                    "option": "--logfile-max-number",
                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                    "value": "<COUNT>",
                    "default": "10"
                },
                {
                    "option": "--logfile-max-size",
                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                    "value": "<SIZE>",
                    "default": "200"
                },
                {
                    "option": "--logfile-no-restricted-perms",
                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine."
                },
                {
                    "option": "--max-skip-slots",
                    "description": "Refuse to skip more than this many slots when processing an attestation.",
                    "value": "<NUM_SLOTS>"
                },
                {
                    "option": "--metrics",
                    "description": "Enable the Prometheus metrics HTTP server. Disabled by default."
                },
                {
                    "option": "--metrics-address",
                    "description": "Set the listen address for the Prometheus metrics HTTP server.",
                    "value": "<ADDRESS>"
                },
                {
                    "option": "--metrics-allow-origin",
                    "description": "Set the value of the Access-Control-Allow-Origin response HTTP header.",
                    "value": "<ORIGIN>"
                },
                {
                    "option": "--metrics-port",
                    "description": "Set the listen TCP port for the Prometheus metrics HTTP server.",
                    "value": "<PORT>"
                },
                {
                    "option": "--monitoring-endpoint",
                    "description": "Enables the monitoring service for sending system metrics to a remote endpoint.",
                    "value": "<ADDRESS>"
                },
                {
                    "option": "--monitoring-endpoint-period",
                    "description": "Defines how many seconds to wait between each message sent to the monitoring-endpoint.",
                    "value": "<SECONDS>"
                },
                {
                    "option": "--network",
                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                    "value": "<network>"
                },
                {
                    "option": "--network-dir",
                    "description": "Data directory for network keys.",
                    "value": "<DIR>"
                },
                {
                    "option": "--port",
                    "description": "The TCP/UDP ports to listen on.",
                    "value": "<PORT>",
                    "default": "9000"
                },
                {
                    "option": "--port6",
                    "description": "The TCP/UDP ports to listen on over IPv6 when listening over both IPv4 and IPv6.",
                    "value": "<PORT>",
                    "default": "9090"
                },
                {
                    "option": "--prepare-payload-lookahead",
                    "description": "The time before the start of a proposal slot at which payload attributes should be sent.",
                    "value": "<MILLISECONDS>"
                },
                {
                    "option": "--private",
                    "description": "Prevents sending various client identification information."
                },
                {
                    "option": "--proposer-only",
                    "description": "Sets this beacon node at be a block proposer only node."
                },
                {
                    "option": "--proposer-reorg-cutoff",
                    "description": "Maximum delay after the start of the slot at which to propose a reorging block.",
                    "value": "<MILLISECONDS>"
                },
                {
                    "option": "--proposer-reorg-disallowed-offsets",
                    "description": "Comma-separated list of integer offsets which can be used to avoid proposing reorging blocks at certain slots.",
                    "value": "<N1,N2,...>"
                },
                {
                    "option": "--proposer-reorg-epochs-since-finalization",
                    "description": "Maximum number of epochs since finalization at which proposer reorgs are allowed.",
                    "value": "<EPOCHS>"
                },
                {
                    "option": "--proposer-reorg-parent-threshold",
                    "description": "Percentage of parent vote weight above which to attempt a proposer reorg.",
                    "value": "<PERCENT>"
                },
                {
                    "option": "--proposer-reorg-threshold",
                    "description": "Percentage of head vote weight below which to attempt a proposer reorg.",
                    "value": "<PERCENT>"
                },
                {
                    "option": "--prune-blobs",
                    "description": "Prune blobs from Lighthouse's database when they are older than the data availability boundary relative to the current epoch.",
                    "value": "<BOOLEAN>",
                    "default": "true"
                },
                {
                    "option": "--prune-payloads",
                    "description": "Prune execution payloads from Lighthouse's database.",
                    "value": "<prune-payloads>",
                    "default": "true"
                },
                {
                    "option": "--purge-db",
                    "description": "If present, the chain database will be deleted. Requires manual confirmation."
                },
                {
                    "option": "--purge-db-force",
                    "description": "If present, the chain database will be deleted without confirmation. Use with caution."
                },
                {
                    "option": "--quic-port",
                    "description": "The UDP port that quic will listen on. Defaults to `port` + 1",
                    "value": "<PORT>"
                },
                {
                    "option": "--quic-port6",
                    "description": "The UDP port that quic will listen on over IPv6 if listening over both IPv4 and IPv6. Defaults to `port6` + 1",
                    "value": "<PORT>"
                },
                {
                    "option": "--reconstruct-historic-states",
                    "description": "After a checkpoint sync, reconstruct historic states in the database."
                },
                {
                    "option": "--reset-payload-statuses",
                    "description": "When present, Lighthouse will forget the payload statuses of any already-imported blocks."
                },
                {
                    "option": "--self-limiter-protocols",
                    "description": "Enables the outbound rate limiter (requests made by this node).",
                    "value": "<self-limiter-protocols>"
                },
                {
                    "option": "--shutdown-after-sync",
                    "description": "Shutdown beacon node as soon as sync is completed. Backfill sync will not be performed before shutdown."
                },
                {
                    "option": "--shuffling-cache-size",
                    "description": "Some HTTP API requests can be optimised by caching the shufflings at each epoch.",
                    "value": "<shuffling-cache-size>"
                },
                {
                    "option": "--slasher",
                    "description": "Run a slasher alongside the beacon node."
                },
                {
                    "option": "--slasher-att-cache-size",
                    "description": "Set the maximum number of attestation roots for the slasher to cache",
                    "value": "<COUNT>"
                },
                {
                    "option": "--slasher-backend",
                    "description": "Set the database backend to be used by the slasher.",
                    "value": "<DATABASE>"
                },
                {
                    "option": "--slasher-broadcast",
                    "description": "Broadcast slashings found by the slasher to the rest of the network [Enabled by default].",
                    "value": "[<slasher-broadcast>]",
                    "default": "true"
                },
                {
                    "option": "--slasher-chunk-size",
                    "description": "Number of epochs per validator per chunk stored on disk.",
                    "value": "<EPOCHS>"
                },
                {
                    "option": "--slasher-dir",
                    "description": "Set the slasher's database directory.",
                    "value": "<PATH>"
                },
                {
                    "option": "--slasher-history-length",
                    "description": "Configure how many epochs of history the slasher keeps. Immutable after initialization.",
                    "value": "<EPOCHS>"
                },
                {
                    "option": "--slasher-max-db-size",
                    "description": "Maximum size of the MDBX database used by the slasher.",
                    "value": "<GIGABYTES>"
                },
                {
                    "option": "--slasher-slot-offset",
                    "description": "Set the delay from the start of the slot at which the slasher should ingest attestations.",
                    "value": "<SECONDS>"
                },
                {
                    "option": "--slasher-update-period",
                    "description": "Configure how often the slasher runs batch processing.",
                    "value": "<SECONDS>"
                },
                {
                    "option": "--slasher-validator-chunk-size",
                    "description": "Number of validators per chunk stored on disk.",
                    "value": "<NUM_VALIDATORS>"
                },
                {
                    "option": "--slots-per-restore-point",
                    "description": "DEPRECATED. This flag has no effect.",
                    "value": "<SLOT_COUNT>"
                },
                {
                    "option": "--staking",
                    "description": "Standard option for a staking beacon node."
                },
                {
                    "option": "--state-cache-size",
                    "description": "Specifies the size of the state cache",
                    "value": "<STATE_CACHE_SIZE>",
                    "default": "128"
                },
                {
                    "option": "--stdin-inputs",
                    "description": "If present, read all user inputs from stdin instead of tty."
                },
                {
                    "option": "--subscribe-all-subnets",
                    "description": "Subscribe to all subnets regardless of validator count."
                },
                {
                    "option": "--suggested-fee-recipient",
                    "description": "Emergency fallback fee recipient for use in case the validator client does not have one configured.",
                    "value": "<SUGGESTED-FEE-RECIPIENT>"
                },
                {
                    "option": "--target-peers",
                    "description": "The target number of peers.",
                    "value": "<target-peers>"
                },
                {
                    "option": "--testnet-dir",
                    "shortcut": "-t",
                    "description": "Path to directory containing eth2_testnet specs.",
                    "value": "<DIR>"
                },
                {
                    "option": "--trusted-peers",
                    "description": "One or more comma-delimited trusted peer ids which always have the highest score according to the peer scoring system.",
                    "value": "<TRUSTED_PEERS>"
                },
                {
                    "option": "--trusted-setup-file-override",
                    "description": "Path to a json file containing the trusted setup params.",
                    "value": "<FILE>"
                },
                {
                    "option": "--validator-monitor-auto",
                    "description": "Enables the automatic detection and monitoring of validators connected to the HTTP API."
                },
                {
                    "option": "--validator-monitor-file",
                    "description": "As per --validator-monitor-pubkeys, but the comma-separated list is contained within a file at the given path.",
                    "value": "<PATH>"
                },
                {
                    "option": "--validator-monitor-individual-tracking-threshold",
                    "description": "Once the validator monitor reaches this number of local validators it will stop collecting per-validator Prometheus metrics and issuing per-validator logs.",
                    "value": "<INTEGER>"
                },
                {
                    "option": "--validator-monitor-pubkeys",
                    "description": "A comma-separated list of 0x-prefixed validator public keys.",
                    "value": "<PUBKEYS>"
                },
                {
                    "option": "--version",
                    "shortcut": "-V",
                    "description": "Print version"
                },
                {
                    "option": "--wss-checkpoint",
                    "description": "Specify a weak subjectivity checkpoint in `block_root:epoch` format to verify the node's sync against.",
                    "value": "<WSS_CHECKPOINT>"
                },
                {
                    "option": "--zero-ports",
                    "shortcut": "-z",
                    "description": "Sets all listening TCP/UDP ports to 0, allowing the OS to choose some arbitrary free ports."
                }
            ],
            "subcommands": []
        },
        {
            "description": "Start a special Lighthouse process that only serves as a discv5 boot-node. This process will *not* import blocks or perform most typical beacon node functions. Instead, it will simply run the discv5 service and assist nodes on the network to discover each other. This is the recommended way to provide a network boot-node since it has a reduced attack surface compared to a full beacon node.",
            "name": "lighthouse boot_node",
            "subcommands": [],
            "usage": "Usage: lighthouse boot_node [OPTIONS] --enr-address <ADDRESS>...",
            "options": [
                {
                    "option": "--boot-nodes",
                    "description": "One or more comma-delimited base64-encoded ENR's or multiaddr strings of peers to initially add to the local routing table",
                    "value": "<ENR-LIST/Multiaddr>"
                },
                {
                    "option": "--debug-level",
                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                    "value": "<LEVEL>",
                    "default": "info",
                    "tags": [
                        "possible values: info, debug, trace, warn, error, crit"
                    ]
                },
                {
                    "option": "--disable-log-timestamp",
                    "description": "If present, do not include timestamps in logging output."
                },
                {
                    "option": "--disable-malloc-tuning",
                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                },
                {
                    "option": "--disable-packet-filter",
                    "description": "Disables discv5 packet filter. Useful for testing in smaller networks"
                },
                {
                    "option": "--enr-address",
                    "description": "The IP address/ DNS address to broadcast to other peers on how to reach this node. If a DNS address is provided, the enr-address is set to the IP address it resolves to and does not auto-update based on PONG responses in discovery. Set this only if you are sure other nodes can connect to your local node on this address. This will update the `ip4` or `ip6` ENR fields accordingly. To update both, set this flag twice with the different values.",
                    "value": "<ADDRESS>..."
                },
                {
                    "option": "--enr-port",
                    "description": "The UDP port of the boot node's ENR. This is the port that external peers will dial to reach this boot node. Set this only if the external port differs from the listening port.",
                    "value": "<PORT>"
                },
                {
                    "option": "--enr-udp6-port",
                    "description": "The UDP6 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IpV6.",
                    "value": "<PORT>"
                },
                {
                    "option": "--genesis-state-url",
                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                    "value": "<URL>"
                },
                {
                    "option": "--genesis-state-url-timeout",
                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                    "value": "<SECONDS>",
                    "default": "180"
                },
                {
                    "option": "--listen-address",
                    "description": "The address the bootnode will listen for UDP communications. To listen over IpV4 and IpV6 set this flag twice with the different values.",
                    "value": "<ADDRESS>...",
                    "default": "0.0.0.0"
                },
                {
                    "option": "--log-color",
                    "description": "Force outputting colors when emitting logs to the terminal."
                },
                {
                    "option": "--log-format",
                    "description": "Specifies the log format used when emitting logs to the terminal.",
                    "value": "<FORMAT>",
                    "tags": [
                        "possible values: JSON"
                    ]
                },
                {
                    "option": "--logfile",
                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                    "value": "<FILE>"
                },
                {
                    "option": "--logfile-compress",
                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                },
                {
                    "option": "--logfile-debug-level",
                    "description": "The verbosity level used when emitting logs to the log file.",
                    "value": "<LEVEL>",
                    "default": "debug",
                    "tags": [
                        "possible values: info, debug, trace, warn, error, crit"
                    ]
                },
                {
                    "option": "--logfile-format",
                    "description": "Specifies the log format used when emitting logs to the logfile.",
                    "value": "<FORMAT>",
                    "tags": [
                        "possible values: DEFAULT, JSON"
                    ]
                },
                {
                    "option": "--logfile-max-number",
                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                    "value": "<COUNT>",
                    "default": "10"
                },
                {
                    "option": "--logfile-max-size",
                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                    "value": "<SIZE>",
                    "default": "200"
                },
                {
                    "option": "--logfile-no-restricted-perms",
                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                },
                {
                    "option": "--network",
                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                    "value": "<network>",
                    "tags": [
                        "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                    ]
                },
                {
                    "option": "--network-dir",
                    "description": "The directory which contains the enr and it's associated private key",
                    "value": "<NETWORK_DIR>"
                },
                {
                    "option": "--port",
                    "description": "The UDP port to listen on.",
                    "value": "<PORT>",
                    "default": "9000"
                },
                {
                    "option": "--port6",
                    "description": "The UDP port to listen on over IpV6 when listening over both Ipv4 and Ipv6. Defaults to 9090 when required.",
                    "value": "<PORT>",
                    "default": "9090"
                },
                {
                    "option": "--stdin-inputs",
                    "description": "If present, read all user inputs from stdin instead of tty."
                },
                {
                    "option": "-d, --datadir",
                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                    "value": "<DIR>"
                },
                {
                    "option": "-h, --help",
                    "description": "Prints help information"
                },
                {
                    "option": "-t, --testnet-dir",
                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                    "value": "<DIR>"
                },
                {
                    "option": "-x, --enable-enr-auto-update",
                    "description": "Discovery can automatically update the node's local ENR with an external IP address and port as seen by other peers on the network. This enables this feature."
                }
            ]
        },
        {
            "name": "lighthouse database_manager",
            "description": "Manage a beacon node database.",
            "usage": "lighthouse database_manager [OPTIONS] <COMMAND>",
            "subcommands": [
                {
                    "name": "lighthouse database_manager compact",
                    "description": "Compact database manually.",
                    "usage": "lighthouse database_manager compact [OPTIONS] --column <TAG>",
                    "options": [
                        {
                            "option": "--blobs-db",
                            "description": "Inspect the blobs DB rather than the hot DB",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--column",
                            "value": "<TAG>",
                            "description": "3-byte column ID (see `DBColumn`)"
                        },
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "value": "<DIR>",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks."
                        },
                        {
                            "option": "--debug-level",
                            "value": "<LEVEL>",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "default": "info",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--freezer",
                            "description": "Inspect the freezer DB rather than the hot DB",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--genesis-state-url",
                            "value": "<URL>",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored."
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "value": "<SECONDS>",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "value": "<N0,N1,N2,...>",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "default": "5,9,11,13,16,18,21"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--log-format",
                            "value": "<FORMAT>",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "tags": [
                                "possible values: JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "value": "<FILE>",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten."
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--logfile-debug-level",
                            "value": "<LEVEL>",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "default": "debug",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "value": "<FORMAT>",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "tags": [
                                "possible values: DEFAULT, JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "value": "<COUNT>",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "value": "<SIZE>",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--network",
                            "value": "<network>",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "tags": [
                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                            ]
                        },
                        {
                            "option": "--output-dir",
                            "value": "<DIR>",
                            "description": "Base directory for the output files. Defaults to the current directory"
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "value": "<DIR>",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database."
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse database_manager inspect",
                    "description": "Inspect raw database values.",
                    "usage": "lighthouse database_manager inspect [OPTIONS] --column <TAG>",
                    "options": [
                        {
                            "option": "--blobs-db",
                            "description": "Inspect the blobs DB rather than the hot DB",
                            "tags": []
                        },
                        {
                            "option": "--column",
                            "description": "3-byte column ID (see `DBColumn`)",
                            "value": "<TAG>"
                        },
                        {
                            "option": "-d",
                            "shortcut": "--datadir",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output.",
                            "tags": []
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                            "tags": []
                        },
                        {
                            "option": "--freezer",
                            "description": "Inspect the freezer DB rather than the hot DB",
                            "tags": []
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information",
                            "tags": []
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "value": "<N0,N1,N2,...>",
                            "default": "5,9,11,13,16,18,21"
                        },
                        {
                            "option": "--limit",
                            "description": "Output at most N keys",
                            "value": "<N>"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal.",
                            "tags": []
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                            "tags": []
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "DEFAULT",
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                            "tags": []
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "mainnet",
                                "gnosis",
                                "chiado",
                                "sepolia",
                                "holesky"
                            ]
                        },
                        {
                            "option": "--output",
                            "description": "Select the type of output to show",
                            "value": "<TARGET>",
                            "default": "sizes",
                            "tags": [
                                "sizes",
                                "total",
                                "values",
                                "gaps"
                            ]
                        },
                        {
                            "option": "--output-dir",
                            "description": "Base directory for the output files. Defaults to the current directory",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--skip",
                            "description": "Skip over the first N keys",
                            "value": "<N>"
                        },
                        {
                            "option": "-t",
                            "shortcut": "--testnet-dir",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty.",
                            "tags": []
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse database_manager migrate",
                    "description": "Migrate the database to a specific schema version.",
                    "usage": "lighthouse database_manager migrate [OPTIONS] --to <VERSION>",
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "value": "<N0,N1,N2,...>",
                            "default": "5,9,11,13,16,18,21"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "DEFAULT",
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "mainnet",
                                "gnosis",
                                "chiado",
                                "sepolia",
                                "holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--to",
                            "description": "Schema version to migrate to",
                            "value": "<VERSION>"
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse database_manager prune-blobs",
                    "description": "Prune blobs older than data availability boundary.",
                    "usage": "lighthouse database_manager prune-blobs [OPTIONS]",
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "value": "<N0,N1,N2,...>",
                            "default": "5,9,11,13,16,18,21"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: DEFAULT, JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        }
                    ],
                    "subcommands": []
                },
                {
                    "description": "Prune finalized execution payloads.",
                    "name": "lighthouse database_manager prune-payloads",
                    "usage": "lighthouse database_manager prune-payloads [OPTIONS]",
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "value": "<N0,N1,N2,...>",
                            "default": "5,9,11,13,16,18,21"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: DEFAULT, JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse database_manager prune-states",
                    "description": "Prune all beacon states from the freezer database.",
                    "usage": "Usage: lighthouse database_manager prune-states [OPTIONS]",
                    "options": [
                        {
                            "option": "--confirm",
                            "description": "Commit to pruning states irreversably. Without this flag the command will just check that the database is capable of being pruned.",
                            "tags": []
                        },
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>",
                            "tags": []
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output.",
                            "tags": []
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                            "tags": []
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>",
                            "tags": []
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180",
                            "tags": []
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information",
                            "tags": []
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "value": "<N0,N1,N2,...>",
                            "default": "5,9,11,13,16,18,21",
                            "tags": []
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal.",
                            "tags": []
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>",
                            "tags": []
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                            "tags": []
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: DEFAULT, JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10",
                            "tags": []
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200",
                            "tags": []
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                            "tags": []
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty.",
                            "tags": []
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>",
                            "tags": []
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse database_manager version",
                    "description": "Display database schema version.",
                    "usage": "lighthouse database_manager version [OPTIONS]",
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--hierarchy-exponents",
                            "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                            "value": "<N0,N1,N2,...>",
                            "default": "5,9,11,13,16,18,21"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "possible values: DEFAULT, JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        }
                    ],
                    "subcommands": []
                }
            ],
            "options": [
                {
                    "option": "--blob-prune-margin-epochs",
                    "description": "The margin for blob pruning in epochs. The oldest blobs are pruned up until data_availability_boundary - blob_prune_margin_epochs.",
                    "value": "<EPOCHS>",
                    "default": "0"
                },
                {
                    "option": "--blobs-dir",
                    "description": "Data directory for the blobs database.",
                    "value": "<DIR>"
                },
                {
                    "option": "--datadir",
                    "shortcut": "-d",
                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                    "value": "<DIR>"
                },
                {
                    "option": "--debug-level",
                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                    "value": "<LEVEL>",
                    "default": "info"
                },
                {
                    "option": "--disable-log-timestamp",
                    "description": "If present, do not include timestamps in logging output.",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--disable-malloc-tuning",
                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--freezer-dir",
                    "description": "Data directory for the freezer database.",
                    "value": "<DIR>"
                },
                {
                    "option": "--genesis-state-url",
                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                    "value": "<URL>"
                },
                {
                    "option": "--genesis-state-url-timeout",
                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                    "value": "<SECONDS>",
                    "default": "180"
                },
                {
                    "option": "--help",
                    "description": "Prints help information",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--hierarchy-exponents",
                    "description": "Specifies the frequency for storing full state snapshots and hierarchical diffs in the freezer DB.",
                    "value": "<N0,N1,N2,...>",
                    "default": "5,9,11,13,16,18,21"
                },
                {
                    "option": "--log-color",
                    "description": "Force outputting colors when emitting logs to the terminal.",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--log-format",
                    "description": "Specifies the log format used when emitting logs to the terminal.",
                    "value": "<FORMAT>"
                },
                {
                    "option": "--logfile",
                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                    "value": "<FILE>"
                },
                {
                    "option": "--logfile-compress",
                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--logfile-debug-level",
                    "description": "The verbosity level used when emitting logs to the log file.",
                    "value": "<LEVEL>",
                    "default": "debug"
                },
                {
                    "option": "--logfile-format",
                    "description": "Specifies the log format used when emitting logs to the logfile.",
                    "value": "<FORMAT>"
                },
                {
                    "option": "--logfile-max-number",
                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                    "value": "<COUNT>",
                    "default": "10"
                },
                {
                    "option": "--logfile-max-size",
                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                    "value": "<SIZE>",
                    "default": "200"
                },
                {
                    "option": "--logfile-no-restricted-perms",
                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--network",
                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                    "value": "<network>"
                },
                {
                    "option": "--stdin-inputs",
                    "description": "If present, read all user inputs from stdin instead of tty.",
                    "tags": [
                        "flag"
                    ]
                },
                {
                    "option": "--testnet-dir",
                    "shortcut": "-t",
                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                    "value": "<DIR>"
                }
            ]
        },
        {
            "description": "When connected to a beacon node, performs the duties of a staked validator (e.g., proposing blocks and attestations).",
            "name": "lighthouse validator_client",
            "options": [
                {
                    "default": "http://localhost:5052",
                    "description": "Comma-separated addresses to one or more beacon node HTTP APIs.",
                    "option": "--beacon-nodes",
                    "value": "<NETWORK_ADDRESSES>"
                },
                {
                    "description": "Comma-separated paths to custom TLS certificates to use when connecting to a beacon node (and/or proposer node). These certificates must be in PEM format and are used in addition to the OS trust store. Commas must only be used as a delimiter, and must not be part of the certificate path.",
                    "option": "--beacon-nodes-tls-certs",
                    "value": "<CERTIFICATE-FILES>"
                },
                {
                    "default": "subscriptions",
                    "description": "Comma-separated list of beacon API topics to broadcast to all beacon nodes. Possible values are: none, attestations, blocks, subscriptions, sync-committee.",
                    "option": "--broadcast",
                    "value": "<API_TOPICS>"
                },
                {
                    "description": "Defines the boost factor, a percentage multiplier to apply to the builder's payload value when choosing between a builder payload header and payload from the local execution node.",
                    "option": "--builder-boost-factor",
                    "value": "<UINT64>"
                },
                {
                    "description": "This flag takes a unix timestamp value that will be used to override the timestamp used in the builder api registration",
                    "option": "--builder-registration-timestamp-override",
                    "value": "<builder-registration-timestamp-override>"
                },
                {
                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                    "option": "--datadir",
                    "shortcut": "-d",
                    "value": "<DIR>"
                },
                {
                    "default": "info",
                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                    "option": "--debug-level",
                    "tags": [
                        "info",
                        "debug",
                        "trace",
                        "warn",
                        "error",
                        "crit"
                    ],
                    "value": "<LEVEL>"
                },
                {
                    "default": "30,000,000",
                    "description": "The gas limit to be used in all builder proposals for all validators managed by this validator client. Note this will not necessarily be used if the gas limit set here moves too far from the previous block's gas limit.",
                    "option": "--gas-limit",
                    "value": "<INTEGER>"
                },
                {
                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                    "option": "--genesis-state-url",
                    "value": "<URL>"
                },
                {
                    "default": "180",
                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                    "option": "--genesis-state-url-timeout",
                    "value": "<SECONDS>"
                },
                {
                    "description": "Specify your custom graffiti to be included in blocks.",
                    "option": "--graffiti",
                    "value": "<GRAFFITI>"
                },
                {
                    "description": "Specify a graffiti file to load validator graffitis from.",
                    "option": "--graffiti-file",
                    "value": "<GRAFFITI-FILE>"
                },
                {
                    "description": "Set the address for the HTTP address. The HTTP server is not encrypted and therefore it is unsafe to publish on a public network. When this flag is used, it additionally requires the explicit use of the `--unencrypted-http-transport` flag to ensure the user is aware of the risks involved. For access via the Internet, users should apply transport-layer security like a HTTPS reverse-proxy or SSH tunnelling.",
                    "option": "--http-address",
                    "value": "<ADDRESS>"
                },
                {
                    "description": "Set the value of the Access-Control-Allow-Origin response HTTP header. Use * to allow any origin (not recommended in production). If no value is supplied, the CORS allowed origin is set to the listen address of this server (e.g., http://localhost:5062).",
                    "option": "--http-allow-origin",
                    "value": "<ORIGIN>"
                },
                {
                    "description": "Set the listen TCP port for the RESTful HTTP API server.",
                    "option": "--http-port",
                    "value": "<PORT>"
                },
                {
                    "description": "Specifies the log format used when emitting logs to the terminal.",
                    "option": "--log-format",
                    "tags": [
                        "JSON"
                    ],
                    "value": "<FORMAT>"
                },
                {
                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                    "option": "--logfile",
                    "value": "<FILE>"
                },
                {
                    "default": "debug",
                    "description": "The verbosity level used when emitting logs to the log file.",
                    "option": "--logfile-debug-level",
                    "tags": [
                        "info",
                        "debug",
                        "trace",
                        "warn",
                        "error",
                        "crit"
                    ],
                    "value": "<LEVEL>"
                },
                {
                    "description": "Specifies the log format used when emitting logs to the logfile.",
                    "option": "--logfile-format",
                    "tags": [
                        "DEFAULT",
                        "JSON"
                    ],
                    "value": "<FORMAT>"
                },
                {
                    "default": "10",
                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                    "option": "--logfile-max-number",
                    "value": "<COUNT>"
                },
                {
                    "default": "200",
                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                    "option": "--logfile-max-size",
                    "value": "<SIZE>"
                },
                {
                    "description": "Set the listen address for the Prometheus metrics HTTP server.",
                    "option": "--metrics-address",
                    "value": "<ADDRESS>"
                },
                {
                    "description": "Set the value of the Access-Control-Allow-Origin response HTTP header. Use * to allow any origin (not recommended in production). If no value is supplied, the CORS allowed origin is set to the listen address of this server (e.g., http://localhost:5064).",
                    "option": "--metrics-allow-origin",
                    "value": "<ORIGIN>"
                },
                {
                    "description": "Set the listen TCP port for the Prometheus metrics HTTP server.",
                    "option": "--metrics-port",
                    "value": "<PORT>"
                },
                {
                    "description": "Enables the monitoring service for sending system metrics to a remote endpoint. This can be used to monitor your setup on certain services (e.g. beaconcha.in). This flag sets the endpoint where the beacon node metrics will be sent. Note: This will send information to a remote sever which may identify and associate your validators, IP address and other personal information. Always use a HTTPS connection and never provide an untrusted URL.",
                    "option": "--monitoring-endpoint",
                    "value": "<ADDRESS>"
                },
                {
                    "default": "60",
                    "description": "Defines how many seconds to wait between each message sent to the monitoring-endpoint.",
                    "option": "--monitoring-endpoint-period",
                    "value": "<SECONDS>"
                },
                {
                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                    "option": "--network",
                    "tags": [
                        "mainnet",
                        "gnosis",
                        "chiado",
                        "sepolia",
                        "holesky"
                    ],
                    "value": "<network>"
                },
                {
                    "description": "Comma-separated addresses to one or more beacon node HTTP APIs. These specify nodes that are used to send beacon block proposals. A failure will revert back to the standard beacon nodes specified in --beacon-nodes.",
                    "option": "--proposer-nodes",
                    "value": "<NETWORK_ADDRESSES>"
                },
                {
                    "description": "The directory which contains the password to unlock the validator voting keypairs. Each password should be contained in a file where the name is the 0x-prefixed hex representation of the validators voting public key. Defaults to ~/.lighthouse/{network}/secrets.",
                    "option": "--secrets-dir",
                    "value": "<SECRETS_DIRECTORY>"
                },
                {
                    "description": "Once the merge has happened, this address will receive transaction fees from blocks proposed by this validator client. If a fee recipient is configured in the validator definitions it takes priority over this value.",
                    "option": "--suggested-fee-recipient",
                    "value": "<FEE-RECIPIENT>"
                },
                {
                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                    "option": "--testnet-dir",
                    "shortcut": "-t",
                    "value": "<DIR>"
                },
                {
                    "default": "500",
                    "description": "Defines the number of validators per validator/register_validator request sent to the BN. This value can be reduced to avoid timeouts from builders.",
                    "option": "--validator-registration-batch-size",
                    "value": "<INTEGER>"
                },
                {
                    "description": "The directory which contains the validator keystores, deposit data for each validator along with the common slashing protection database and the validator_definitions.yml",
                    "option": "--validators-dir",
                    "value": "<VALIDATORS_DIR>"
                },
                {
                    "default": "20000",
                    "description": "Keep-alive timeout for each web3signer connection. Set to 'null' to never timeout",
                    "option": "--web3-signer-keep-alive-timeout",
                    "value": "<MILLIS>"
                },
                {
                    "description": "Maximum number of idle connections to maintain per web3signer host. Default is unlimited.",
                    "option": "--web3-signer-max-idle-connections",
                    "value": "<COUNT>"
                }
            ],
            "usage": "Usage: lighthouse validator_client [OPTIONS]",
            "subcommands": []
        },
        {
            "name": "lighthouse validator_manager",
            "description": "Utilities for managing a Lighthouse validator client via the HTTP API.",
            "usage": "Usage: lighthouse validator_manager [OPTIONS] [COMMAND]",
            "subcommands": [
                {
                    "description": "Creates new validators from BIP-39 mnemonic. A JSON file will be created which contains all the validator keystores and other validator data. This file can then be imported to a validator client using the 'import-validators' command. Another, optional JSON file is created which contains a list of validator deposits in the same format as the 'ethereum/staking-deposit-cli' tool.",
                    "name": "lighthouse validator_manager create",
                    "usage": "Usage: lighthouse validator_manager create [OPTIONS] --output-path <DIRECTORY>",
                    "options": [
                        {
                            "option": "--beacon-node",
                            "value": "<HTTP_ADDRESS>",
                            "description": "A HTTP(S) address of a beacon node using the beacon-API. If this value is provided, an error will be raised if any validator key here is already known as a validator by that beacon node. This helps prevent the same validator being created twice and therefore slashable conditions."
                        },
                        {
                            "option": "--builder-boost-factor",
                            "value": "<UINT64>",
                            "description": "Defines the boost factor, a percentage multiplier to apply to the builder's payload value when choosing between a builder payload header and payload from the local execution node."
                        },
                        {
                            "option": "--builder-proposals",
                            "value": "<builder-proposals>",
                            "description": "When provided, all created validators will attempt to create blocks via builder rather than the local EL.",
                            "tags": [
                                "possible values: true, false"
                            ]
                        },
                        {
                            "option": "--count",
                            "value": "<VALIDATOR_COUNT>",
                            "description": "The number of validators to create, regardless of how many already exist"
                        },
                        {
                            "option": "-d",
                            "shortcut": "--datadir",
                            "value": "<DIR>",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks."
                        },
                        {
                            "option": "--debug-level",
                            "value": "<LEVEL>",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "default": "info",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--deposit-gwei",
                            "value": "<DEPOSIT_GWEI>",
                            "description": "The GWEI value of the deposit amount. Defaults to the minimum amount required for an active validator (MAX_EFFECTIVE_BALANCE)"
                        },
                        {
                            "option": "--disable-deposits",
                            "description": "When provided don't generate the deposits JSON file that is commonly used for submitting validator deposits via a web UI. Using this flag will save several seconds per validator if the user has an alternate strategy for submitting deposits. If used, the --force-bls-withdrawal-credentials is also required to ensure users are aware that an --eth1-withdrawal-address is not set."
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--eth1-withdrawal-address",
                            "value": "<ETH1_ADDRESS>",
                            "description": "If this field is set, the given eth1 address will be used to create the withdrawal credentials. Otherwise, it will generate withdrawal credentials with the mnemonic-derived withdrawal public key in EIP-2334 format."
                        },
                        {
                            "option": "--first-index",
                            "value": "<FIRST_INDEX>",
                            "description": "The first of consecutive key indexes you wish to create.",
                            "default": "0"
                        },
                        {
                            "option": "--force-bls-withdrawal-credentials",
                            "description": "If present, allows BLS withdrawal credentials rather than an execution address. This is not recommended."
                        },
                        {
                            "option": "--gas-limit",
                            "value": "<UINT64>",
                            "description": "All created validators will use this gas limit. It is recommended to leave this as the default value by not specifying this flag."
                        },
                        {
                            "option": "--genesis-state-url",
                            "value": "<URL>",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored."
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "value": "<SECONDS>",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "default": "180"
                        },
                        {
                            "option": "-h",
                            "shortcut": "--help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "value": "<FORMAT>",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "tags": [
                                "possible values: JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "value": "<FILE>",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten."
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "value": "<LEVEL>",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "default": "debug",
                            "tags": [
                                "possible values: info, debug, trace, warn, error, crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "value": "<FORMAT>",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "tags": [
                                "possible values: DEFAULT, JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "value": "<COUNT>",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "value": "<SIZE>",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--mnemonic-path",
                            "value": "<MNEMONIC_PATH>",
                            "description": "If present, the mnemonic will be read in from this file."
                        },
                        {
                            "option": "--network",
                            "value": "<network>",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "tags": [
                                "possible values: mainnet, gnosis, chiado, sepolia, holesky"
                            ]
                        },
                        {
                            "option": "--output-path",
                            "value": "<DIRECTORY>",
                            "description": "The path to a directory where the validator and (optionally) deposits files will be created. The directory will be created if it does not exist."
                        },
                        {
                            "option": "--prefer-builder-proposals",
                            "value": "<prefer-builder-proposals>",
                            "description": "If this flag is set, Lighthouse will always prefer blocks constructed by builders, regardless of payload value.",
                            "tags": [
                                "possible values: true, false"
                            ]
                        },
                        {
                            "option": "--specify-voting-keystore-password",
                            "description": "If present, the user will be prompted to enter the voting keystore password that will be used to encrypt the voting keystores. If this flag is not provided, a random password will be used. It is not necessary to keep backups of voting keystore passwords if the mnemonic is safely backed up."
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--suggested-fee-recipient",
                            "value": "<ETH1_ADDRESS>",
                            "description": "All created validators will use this value for the suggested fee recipient. Omit this flag to use the default value from the VC."
                        },
                        {
                            "option": "-t",
                            "shortcut": "--testnet-dir",
                            "value": "<DIR>",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database."
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse validator_manager delete",
                    "description": "Deletes one or more validators from a validator client using the HTTP API.",
                    "usage": "lighthouse validator_manager delete [OPTIONS] --validators <STRING>",
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info"
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "shortcut": "-h",
                            "description": "Prints help information",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>"
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug"
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>"
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>"
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty.",
                            "tags": [
                                "flag"
                            ]
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--validators",
                            "description": "Comma-separated list of validators (pubkey) that will be deleted.",
                            "value": "<STRING>"
                        },
                        {
                            "option": "--vc-token",
                            "description": "The file containing a token required by the validator client.",
                            "value": "<PATH>"
                        },
                        {
                            "option": "--vc-url",
                            "description": "A HTTP(S) address of a validator client using the keymanager-API.",
                            "value": "<HTTP_ADDRESS>",
                            "default": "http://localhost:5062"
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse validator_manager import",
                    "description": "Uploads validators to a validator client using the HTTP API. The validators are defined in a JSON file which can be generated using the \"create-validators\" command.",
                    "usage": "lighthouse validator_manager import [OPTIONS]",
                    "options": [
                        {
                            "option": "--builder-boost-factor",
                            "description": "When provided, the imported validator will use this percentage multiplier to apply to the builder's payload value when choosing between a builder payload header and payload from the local execution node.",
                            "value": "<UINT64>"
                        },
                        {
                            "option": "--builder-proposals",
                            "description": "When provided, the imported validator will attempt to create blocks via builder rather than the local EL.",
                            "value": "<builder-proposals>"
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "-d, --datadir",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "-h, --help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info"
                        },
                        {
                            "option": "--gas-limit",
                            "description": "When provided, the imported validator will use this gas limit. It is recommended to leave this as the default value by not specifying this flag.",
                            "value": "<UINT64>"
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--ignore-duplicates",
                            "description": "If present, ignore any validators which already exist on the VC. Without this flag, the process will terminate without making any changes. This flag should be used with caution, whilst it does not directly cause slashable conditions, it might be an indicator that something is amiss. Users should also be careful to avoid submitting duplicate deposits for validators that already exist on the VC."
                        },
                        {
                            "option": "--keystore-file",
                            "description": "The path to a keystore JSON file to be imported to the validator client. This file is usually created using staking-deposit-cli or ethstaker-deposit-cli",
                            "value": "<PATH_TO_KEYSTORE_FILE>"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>"
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug"
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>"
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>"
                        },
                        {
                            "option": "--password",
                            "description": "Password of the keystore file.",
                            "value": "<STRING>"
                        },
                        {
                            "option": "--prefer-builder-proposals",
                            "description": "When provided, the imported validator will always prefer blocks constructed by builders, regardless of payload value.",
                            "value": "<prefer-builder-proposals>"
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--suggested-fee-recipient",
                            "description": "When provided, the imported validator will use the suggested fee recipient. Omit this flag to use the default value from the VC.",
                            "value": "<ETH1_ADDRESS>"
                        },
                        {
                            "option": "-t, --testnet-dir",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--validators-file",
                            "description": "The path to a JSON file containing a list of validators to be imported to the validator client. This file is usually named \"validators.json\".",
                            "value": "<PATH_TO_JSON_FILE>"
                        },
                        {
                            "option": "--vc-token",
                            "description": "The file containing a token required by the validator client.",
                            "value": "<PATH>"
                        },
                        {
                            "option": "--vc-url",
                            "description": "A HTTP(S) address of a validator client using the keymanager-API.",
                            "value": "<HTTP_ADDRESS>",
                            "default": "http://localhost:5062"
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse validator_manager list",
                    "description": "Lists all validators in a validator client using the HTTP API.",
                    "usage": "Usage: lighthouse validator_manager list [OPTIONS]",
                    "options": [
                        {
                            "option": "--datadir",
                            "shortcut": "-d",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--debug-level",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "value": "<LEVEL>",
                            "default": "info",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--genesis-state-url",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                            "value": "<URL>"
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "value": "<SECONDS>",
                            "default": "180"
                        },
                        {
                            "option": "--help",
                            "shortcut": "-h",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "value": "<FORMAT>",
                            "tags": [
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                            "value": "<FILE>"
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "value": "<LEVEL>",
                            "default": "debug",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "value": "<FORMAT>",
                            "tags": [
                                "DEFAULT",
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "value": "<COUNT>",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "value": "<SIZE>",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "value": "<network>",
                            "tags": [
                                "mainnet",
                                "gnosis",
                                "chiado",
                                "sepolia",
                                "holesky"
                            ]
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--testnet-dir",
                            "shortcut": "-t",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                            "value": "<DIR>"
                        },
                        {
                            "option": "--vc-token",
                            "description": "The file containing a token required by the validator client.",
                            "value": "<PATH>"
                        },
                        {
                            "option": "--vc-url",
                            "description": "A HTTP(S) address of a validator client using the keymanager-API.",
                            "value": "<HTTP_ADDRESS>",
                            "default": "http://localhost:5062"
                        }
                    ],
                    "subcommands": []
                },
                {
                    "name": "lighthouse validator_manager move",
                    "description": "Uploads validators to a validator client using the HTTP API. The validators are defined in a JSON file which can be generated using the \"create-validators\" command. This command only supports validators signing via a keystore on the local file system (i.e., not Web3Signer validators).",
                    "usage": "lighthouse validator_manager move [OPTIONS] --src-vc-token <PATH> --src-vc-url <HTTP_ADDRESS> --dest-vc-token <PATH> --dest-vc-url <HTTP_ADDRESS>",
                    "options": [
                        {
                            "option": "--builder-boost-factor",
                            "value": "<UINT64>",
                            "description": "Defines the boost factor, a percentage multiplier to apply to the builder's payload value when choosing between a builder payload header and payload from the local execution node."
                        },
                        {
                            "option": "--builder-proposals",
                            "value": "<builder-proposals>",
                            "description": "When provided, all created validators will attempt to create blocks via builder rather than the local EL.",
                            "tags": [
                                "true",
                                "false"
                            ]
                        },
                        {
                            "option": "--count",
                            "value": "<VALIDATOR_COUNT>",
                            "description": "The number of validators to move."
                        },
                        {
                            "option": "-d",
                            "shortcut": "--datadir",
                            "value": "<DIR>",
                            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks."
                        },
                        {
                            "option": "--debug-level",
                            "value": "<LEVEL>",
                            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                            "default": "info",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--dest-vc-token",
                            "value": "<PATH>",
                            "description": "The file containing a token required by the destination validator client."
                        },
                        {
                            "option": "--dest-vc-url",
                            "value": "<HTTP_ADDRESS>",
                            "description": "A HTTP(S) address of a validator client using the keymanager-API. This validator client is the \"destination\" and will have new validators added as they are removed from the \"source\" validator client."
                        },
                        {
                            "option": "--disable-log-timestamp",
                            "description": "If present, do not include timestamps in logging output."
                        },
                        {
                            "option": "--disable-malloc-tuning",
                            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                        },
                        {
                            "option": "--gas-limit",
                            "value": "<UINT64>",
                            "description": "All created validators will use this gas limit. It is recommended to leave this as the default value by not specifying this flag."
                        },
                        {
                            "option": "--genesis-state-url",
                            "value": "<URL>",
                            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored."
                        },
                        {
                            "option": "--genesis-state-url-timeout",
                            "value": "<SECONDS>",
                            "description": "The timeout in seconds for the request to --genesis-state-url.",
                            "default": "180"
                        },
                        {
                            "option": "-h",
                            "shortcut": "--help",
                            "description": "Prints help information"
                        },
                        {
                            "option": "--log-color",
                            "description": "Force outputting colors when emitting logs to the terminal."
                        },
                        {
                            "option": "--log-format",
                            "value": "<FORMAT>",
                            "description": "Specifies the log format used when emitting logs to the terminal.",
                            "tags": [
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile",
                            "value": "<FILE>",
                            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten."
                        },
                        {
                            "option": "--logfile-compress",
                            "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                        },
                        {
                            "option": "--logfile-debug-level",
                            "value": "<LEVEL>",
                            "description": "The verbosity level used when emitting logs to the log file.",
                            "default": "debug",
                            "tags": [
                                "info",
                                "debug",
                                "trace",
                                "warn",
                                "error",
                                "crit"
                            ]
                        },
                        {
                            "option": "--logfile-format",
                            "value": "<FORMAT>",
                            "description": "Specifies the log format used when emitting logs to the logfile.",
                            "tags": [
                                "DEFAULT",
                                "JSON"
                            ]
                        },
                        {
                            "option": "--logfile-max-number",
                            "value": "<COUNT>",
                            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                            "default": "10"
                        },
                        {
                            "option": "--logfile-max-size",
                            "value": "<SIZE>",
                            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                            "default": "200"
                        },
                        {
                            "option": "--logfile-no-restricted-perms",
                            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                        },
                        {
                            "option": "--network",
                            "value": "<network>",
                            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                            "tags": [
                                "mainnet",
                                "gnosis",
                                "chiado",
                                "sepolia",
                                "holesky"
                            ]
                        },
                        {
                            "option": "--prefer-builder-proposals",
                            "value": "<prefer-builder-proposals>",
                            "description": "If this flag is set, Lighthouse will always prefer blocks constructed by builders, regardless of payload value.",
                            "tags": [
                                "true",
                                "false"
                            ]
                        },
                        {
                            "option": "--src-vc-token",
                            "value": "<PATH>",
                            "description": "The file containing a token required by the source validator client."
                        },
                        {
                            "option": "--src-vc-url",
                            "value": "<HTTP_ADDRESS>",
                            "description": "A HTTP(S) address of a validator client using the keymanager-API. This validator client is the \"source\" and contains the validators that are to be moved."
                        },
                        {
                            "option": "--stdin-inputs",
                            "description": "If present, read all user inputs from stdin instead of tty."
                        },
                        {
                            "option": "--suggested-fee-recipient",
                            "value": "<ETH1_ADDRESS>",
                            "description": "All created validators will use this value for the suggested fee recipient. Omit this flag to use the default value from the VC."
                        },
                        {
                            "option": "-t",
                            "shortcut": "--testnet-dir",
                            "value": "<DIR>",
                            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database."
                        },
                        {
                            "option": "--validators",
                            "value": "<STRING>",
                            "description": "The validators to be moved. Either a list of 0x-prefixed validator pubkeys or the keyword \"all\"."
                        }
                    ],
                    "subcommands": []
                }
            ],
            "options": [
                {
                    "option": "--datadir",
                    "shortcut": "-d",
                    "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
                    "value": "<DIR>"
                },
                {
                    "option": "--debug-level",
                    "description": "Specifies the verbosity level used when emitting logs to the terminal.",
                    "value": "<LEVEL>",
                    "default": "info",
                    "tags": [
                        "info",
                        "debug",
                        "trace",
                        "warn",
                        "error",
                        "crit"
                    ]
                },
                {
                    "option": "--disable-log-timestamp",
                    "description": "If present, do not include timestamps in logging output."
                },
                {
                    "option": "--disable-malloc-tuning",
                    "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues."
                },
                {
                    "option": "--genesis-state-url",
                    "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
                    "value": "<URL>"
                },
                {
                    "option": "--genesis-state-url-timeout",
                    "description": "The timeout in seconds for the request to --genesis-state-url.",
                    "value": "<SECONDS>",
                    "default": "180"
                },
                {
                    "option": "--help",
                    "shortcut": "-h",
                    "description": "Prints help information"
                },
                {
                    "option": "--log-color",
                    "description": "Force outputting colors when emitting logs to the terminal."
                },
                {
                    "option": "--log-format",
                    "description": "Specifies the log format used when emitting logs to the terminal.",
                    "value": "<FORMAT>",
                    "tags": [
                        "JSON"
                    ]
                },
                {
                    "option": "--logfile",
                    "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
                    "value": "<FILE>"
                },
                {
                    "option": "--logfile-compress",
                    "description": "If present, compress old log files. This can help reduce the space needed to store old logs."
                },
                {
                    "option": "--logfile-debug-level",
                    "description": "The verbosity level used when emitting logs to the log file.",
                    "value": "<LEVEL>",
                    "default": "debug",
                    "tags": [
                        "info",
                        "debug",
                        "trace",
                        "warn",
                        "error",
                        "crit"
                    ]
                },
                {
                    "option": "--logfile-format",
                    "description": "Specifies the log format used when emitting logs to the logfile.",
                    "value": "<FORMAT>",
                    "tags": [
                        "DEFAULT",
                        "JSON"
                    ]
                },
                {
                    "option": "--logfile-max-number",
                    "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
                    "value": "<COUNT>",
                    "default": "10"
                },
                {
                    "option": "--logfile-max-size",
                    "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
                    "value": "<SIZE>",
                    "default": "200"
                },
                {
                    "option": "--logfile-no-restricted-perms",
                    "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder."
                },
                {
                    "option": "--network",
                    "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
                    "value": "<network>",
                    "tags": [
                        "mainnet",
                        "gnosis",
                        "chiado",
                        "sepolia",
                        "holesky"
                    ]
                },
                {
                    "option": "--stdin-inputs",
                    "description": "If present, read all user inputs from stdin instead of tty."
                },
                {
                    "option": "--testnet-dir",
                    "shortcut": "-t",
                    "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
                    "value": "<DIR>"
                }
            ]
        }
    ],
    "options": [
        {
            "default": "$HOME/.lighthouse/{network}",
            "description": "Used to specify a custom root data directory for lighthouse keys and databases. Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag Note: Users should specify separate custom datadirs for different networks.",
            "option": "--datadir",
            "shortcut": "-d",
            "value": "<DIR>"
        },
        {
            "default": "info",
            "description": "Specifies the verbosity level used when emitting logs to the terminal.",
            "option": "--debug-level",
            "tags": [
                "info",
                "debug",
                "trace",
                "warn",
                "error",
                "crit"
            ],
            "value": "<LEVEL>"
        },
        {
            "description": "If present, do not include timestamps in logging output.",
            "option": "--disable-log-timestamp"
        },
        {
            "description": "If present, do not configure the system allocator. Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.",
            "option": "--disable-malloc-tuning"
        },
        {
            "description": "A URL of a beacon-API compatible server from which to download the genesis state. Checkpoint sync server URLs can generally be used with this flag. If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.",
            "option": "--genesis-state-url",
            "value": "<URL>"
        },
        {
            "default": "180",
            "description": "The timeout in seconds for the request to --genesis-state-url.",
            "option": "--genesis-state-url-timeout",
            "value": "<SECONDS>"
        },
        {
            "description": "Print version",
            "option": "--help",
            "shortcut": "-h"
        },
        {
            "description": "Force outputting colors when emitting logs to the terminal.",
            "option": "--log-color"
        },
        {
            "description": "Specifies the log format used when emitting logs to the terminal.",
            "option": "--log-format",
            "tags": [
                "JSON"
            ],
            "value": "<FORMAT>"
        },
        {
            "description": "File path where the log file will be stored. Once it grows to the value specified in `--logfile-max-size` a new log file is generated where future logs are stored. Once the number of log files exceeds the value specified in `--logfile-max-number` the oldest log file will be overwritten.",
            "option": "--logfile",
            "value": "<FILE>"
        },
        {
            "default": "debug",
            "description": "The verbosity level used when emitting logs to the log file.",
            "option": "--logfile-debug-level",
            "tags": [
                "info",
                "debug",
                "trace",
                "warn",
                "error",
                "crit"
            ],
            "value": "<LEVEL>"
        },
        {
            "description": "If present, compress old log files. This can help reduce the space needed to store old logs.",
            "option": "--logfile-compress"
        },
        {
            "description": "Specifies the log format used when emitting logs to the logfile.",
            "option": "--logfile-format",
            "tags": [
                "DEFAULT",
                "JSON"
            ],
            "value": "<FORMAT>"
        },
        {
            "description": "If present, log files will be generated as world-readable meaning they can be read by any user on the machine. Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. For Windows users, the log file permissions will be inherited from the parent folder.",
            "option": "--logfile-no-restricted-perms"
        },
        {
            "default": "10",
            "description": "The maximum number of log files that will be stored. If set to 0, background file logging is disabled.",
            "option": "--logfile-max-number",
            "value": "<COUNT>"
        },
        {
            "default": "200",
            "description": "The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled.",
            "option": "--logfile-max-size",
            "value": "<SIZE>"
        },
        {
            "description": "Name of the Eth2 chain Lighthouse will sync and follow.",
            "option": "--network",
            "tags": [
                "mainnet",
                "gnosis",
                "chiado",
                "sepolia",
                "holesky"
            ],
            "value": "<network>"
        },
        {
            "description": "If present, read all user inputs from stdin instead of tty.",
            "option": "--stdin-inputs"
        },
        {
            "description": "Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. Only effective if there is no existing database.",
            "option": "--testnet-dir",
            "shortcut": "-t",
            "value": "<DIR>"
        },
        {
            "description": "Print version",
            "option": "--version",
            "shortcut": "-V"
        }
    ],
    "usage": "lighthouse [OPTIONS] [COMMAND]",
    "version": "6.0.0-c042dc1"
}
